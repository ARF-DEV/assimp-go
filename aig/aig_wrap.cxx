/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: aig\aig.i

#define SWIGMODULE aig

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <string>


#include <vector>
#include <stdexcept>


  #include "assimp/cimport.h"
  #include "assimp/scene.h"
  #include "assimp/mesh.h"
  
  #include "zlib/zconf.h"
  #include "zlib/zlib.h"

  #include "irrxml/irrXML.h"

  // #include "assimp/types.h"
  // #include "assimp/texture.h"
  // #include "assimp/light.h"
  // #include "assimp/camera.h"
  // #include "assimp/material.h"
  // #include "assimp/anim.h"
  // #include "assimp/metadata.h"
  // #include "assimp/postprocess.h"

SWIGINTERN std::vector< aiNode * > *aiNode_mChildren(aiNode const *self){
    std::vector<aiNode* > *result = new std::vector<aiNode* >;
    result->reserve(self->mNumChildren);

    for (unsigned int i = 0; i < self->mNumChildren; ++i) {
      result->push_back(self->mChildren[i]);
    }

    return result;
  }
SWIGINTERN std::vector< unsigned int > *aiNode_mMeshes(aiNode const *self){
    std::vector<unsigned int > *result = new std::vector<unsigned int >;
    result->reserve(self->mNumMeshes);

    for (unsigned int i = 0; i < self->mNumMeshes; ++i) {
      result->push_back(self->mMeshes[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiAnimation * > *aiScene_mAnimations(aiScene const *self){
    std::vector<aiAnimation* > *result = new std::vector<aiAnimation* >;
    result->reserve(self->mNumAnimations);

    for (unsigned int i = 0; i < self->mNumAnimations; ++i) {
      result->push_back(self->mAnimations[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiCamera * > *aiScene_mCameras(aiScene const *self){
    std::vector<aiCamera* > *result = new std::vector<aiCamera* >;
    result->reserve(self->mNumCameras);

    for (unsigned int i = 0; i < self->mNumCameras; ++i) {
      result->push_back(self->mCameras[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiLight * > *aiScene_mLights(aiScene const *self){
    std::vector<aiLight* > *result = new std::vector<aiLight* >;
    result->reserve(self->mNumLights);

    for (unsigned int i = 0; i < self->mNumLights; ++i) {
      result->push_back(self->mLights[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiMaterial * > *aiScene_mMaterials(aiScene const *self){
    std::vector<aiMaterial* > *result = new std::vector<aiMaterial* >;
    result->reserve(self->mNumMaterials);

    for (unsigned int i = 0; i < self->mNumMaterials; ++i) {
      result->push_back(self->mMaterials[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiMesh * > *aiScene_mMeshes(aiScene const *self){
    std::vector<aiMesh* > *result = new std::vector<aiMesh* >;
    result->reserve(self->mNumMeshes);

    for (unsigned int i = 0; i < self->mNumMeshes; ++i) {
      result->push_back(self->mMeshes[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiTexture * > *aiScene_mTextures(aiScene const *self){
    std::vector<aiTexture* > *result = new std::vector<aiTexture* >;
    result->reserve(self->mNumTextures);

    for (unsigned int i = 0; i < self->mNumTextures; ++i) {
      result->push_back(self->mTextures[i]);
    }

    return result;
  }
SWIGINTERN std::vector< unsigned int > *aiFace_mIndices(aiFace const *self){
    std::vector<unsigned int > *result = new std::vector<unsigned int >;
    result->reserve(self->mNumIndices);

    for (unsigned int i = 0; i < self->mNumIndices; ++i) {
      result->push_back(self->mIndices[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiVertexWeight * > *aiBone_mWeights(aiBone const *self){
    std::vector<aiVertexWeight *> *result = new std::vector<aiVertexWeight *>;
    result->reserve(self->mNumWeights);

    aiVertexWeight *currentValue = self->mWeights;
    aiVertexWeight *valueLimit = self->mWeights + self->mNumWeights;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiAnimMesh_mVertices(aiAnimMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mVertices;
    aiVector3D *valueLimit = self->mVertices + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiAnimMesh_mNormals(aiAnimMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mNormals;
    aiVector3D *valueLimit = self->mNormals + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiAnimMesh_mTangents(aiAnimMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mTangents;
    aiVector3D *valueLimit = self->mTangents + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiAnimMesh_mBitangents(aiAnimMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mBitangents;
    aiVector3D *valueLimit = self->mBitangents + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< std::vector< aiVector3D * > > *aiAnimMesh_mTextureCoords(aiAnimMesh const *self){
    std::vector<std::vector<aiVector3D *> > *result = new std::vector<std::vector<aiVector3D *> >;
    result->reserve(AI_MAX_NUMBER_OF_TEXTURECOORDS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++i) {
      std::vector<aiVector3D *> currentElements;

      if (self->mTextureCoords[i] != 0) {
        currentElements.reserve(self->mNumVertices);

        aiVector3D *currentValue = self->mTextureCoords[i];
        aiVector3D *valueLimit = self->mTextureCoords[i] + self->mNumVertices;
        while (currentValue < valueLimit) {
          currentElements.push_back(currentValue);
          ++currentValue;
        }
      }

      result->push_back(currentElements);
    }

    return result;
  }
SWIGINTERN std::vector< std::vector< aiColor4D * > > *aiAnimMesh_mColors(aiAnimMesh const *self){
    std::vector<std::vector<aiColor4D *> > *result = new std::vector<std::vector<aiColor4D *> >;
    result->reserve(AI_MAX_NUMBER_OF_COLOR_SETS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_COLOR_SETS; ++i) {
      std::vector<aiColor4D *> currentElements;

      if (self->mColors[i] != 0) {
        currentElements.reserve(self->mNumVertices);

        aiColor4D *currentValue = self->mColors[i];
        aiColor4D *valueLimit = self->mColors[i] + self->mNumVertices;
        while (currentValue < valueLimit) {
          currentElements.push_back(currentValue);
          ++currentValue;
        }
      }

      result->push_back(currentElements);
    }

    return result;
  }
SWIGINTERN std::vector< aiAnimMesh * > *aiMesh_mAnimMeshes(aiMesh const *self){
    std::vector<aiAnimMesh* > *result = new std::vector<aiAnimMesh* >;
    result->reserve(self->mNumAnimMeshes);

    for (unsigned int i = 0; i < self->mNumAnimMeshes; ++i) {
      result->push_back(self->mAnimMeshes[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiBone * > *aiMesh_mBones(aiMesh const *self){
    std::vector<aiBone* > *result = new std::vector<aiBone* >;
    result->reserve(self->mNumBones);

    for (unsigned int i = 0; i < self->mNumBones; ++i) {
      result->push_back(self->mBones[i]);
    }

    return result;
  }
SWIGINTERN std::vector< unsigned int > *aiMesh_mNumUVComponents(aiMesh const *self){
    std::vector<unsigned int > *result = new std::vector<unsigned int >;
    result->reserve(AI_MAX_NUMBER_OF_TEXTURECOORDS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++i) {
      result->push_back(self->mNumUVComponents[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiMesh_mVertices(aiMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mVertices;
    aiVector3D *valueLimit = self->mVertices + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiMesh_mNormals(aiMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mNormals;
    aiVector3D *valueLimit = self->mNormals + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiMesh_mTangents(aiMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mTangents;
    aiVector3D *valueLimit = self->mTangents + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiMesh_mBitangents(aiMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mBitangents;
    aiVector3D *valueLimit = self->mBitangents + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiFace * > *aiMesh_mFaces(aiMesh const *self){
    std::vector<aiFace *> *result = new std::vector<aiFace *>;
    result->reserve(self->mNumFaces);

    aiFace *currentValue = self->mFaces;
    aiFace *valueLimit = self->mFaces + self->mNumFaces;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< std::vector< aiVector3D * > > *aiMesh_mTextureCoords(aiMesh const *self){
    std::vector<std::vector<aiVector3D *> > *result = new std::vector<std::vector<aiVector3D *> >;
    result->reserve(AI_MAX_NUMBER_OF_TEXTURECOORDS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++i) {
      std::vector<aiVector3D *> currentElements;

      if (self->mTextureCoords[i] != 0) {
        currentElements.reserve(self->mNumVertices);

        aiVector3D *currentValue = self->mTextureCoords[i];
        aiVector3D *valueLimit = self->mTextureCoords[i] + self->mNumVertices;
        while (currentValue < valueLimit) {
          currentElements.push_back(currentValue);
          ++currentValue;
        }
      }

      result->push_back(currentElements);
    }

    return result;
  }
SWIGINTERN std::vector< std::vector< aiColor4D * > > *aiMesh_mColors(aiMesh const *self){
    std::vector<std::vector<aiColor4D *> > *result = new std::vector<std::vector<aiColor4D *> >;
    result->reserve(AI_MAX_NUMBER_OF_COLOR_SETS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_COLOR_SETS; ++i) {
      std::vector<aiColor4D *> currentElements;

      if (self->mColors[i] != 0) {
        currentElements.reserve(self->mNumVertices);

        aiColor4D *currentValue = self->mColors[i];
        aiColor4D *valueLimit = self->mColors[i] + self->mNumVertices;
        while (currentValue < valueLimit) {
          currentElements.push_back(currentValue);
          ++currentValue;
        }
      }

      result->push_back(currentElements);
    }

    return result;
  }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiAnimation * >::const_reference std_vector_Sl_aiAnimation_Sm__Sg__get(std::vector< aiAnimation * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiAnimation_Sm__Sg__set(std::vector< aiAnimation * > *self,int i,std::vector< aiAnimation * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiAnimMesh * >::const_reference std_vector_Sl_aiAnimMesh_Sm__Sg__get(std::vector< aiAnimMesh * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiAnimMesh_Sm__Sg__set(std::vector< aiAnimMesh * > *self,int i,std::vector< aiAnimMesh * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiBone * >::const_reference std_vector_Sl_aiBone_Sm__Sg__get(std::vector< aiBone * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiBone_Sm__Sg__set(std::vector< aiBone * > *self,int i,std::vector< aiBone * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiCamera * >::const_reference std_vector_Sl_aiCamera_Sm__Sg__get(std::vector< aiCamera * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiCamera_Sm__Sg__set(std::vector< aiCamera * > *self,int i,std::vector< aiCamera * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiColor4D * >::const_reference std_vector_Sl_aiColor4D_Sm__Sg__get(std::vector< aiColor4D * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiColor4D_Sm__Sg__set(std::vector< aiColor4D * > *self,int i,std::vector< aiColor4D * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< aiColor4D * > >::const_reference std_vector_Sl_std_vector_Sl_aiColor4D_Sm__Sg__Sg__get(std::vector< std::vector< aiColor4D * > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_aiColor4D_Sm__Sg__Sg__set(std::vector< std::vector< aiColor4D * > > *self,int i,std::vector< std::vector< aiColor4D * > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiFace * >::const_reference std_vector_Sl_aiFace_Sm__Sg__get(std::vector< aiFace * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiFace_Sm__Sg__set(std::vector< aiFace * > *self,int i,std::vector< aiFace * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiLight * >::const_reference std_vector_Sl_aiLight_Sm__Sg__get(std::vector< aiLight * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiLight_Sm__Sg__set(std::vector< aiLight * > *self,int i,std::vector< aiLight * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiMaterial * >::const_reference std_vector_Sl_aiMaterial_Sm__Sg__get(std::vector< aiMaterial * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiMaterial_Sm__Sg__set(std::vector< aiMaterial * > *self,int i,std::vector< aiMaterial * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiMaterialProperty * >::const_reference std_vector_Sl_aiMaterialProperty_Sm__Sg__get(std::vector< aiMaterialProperty * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiMaterialProperty_Sm__Sg__set(std::vector< aiMaterialProperty * > *self,int i,std::vector< aiMaterialProperty * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiMeshAnim * >::const_reference std_vector_Sl_aiMeshAnim_Sm__Sg__get(std::vector< aiMeshAnim * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiMeshAnim_Sm__Sg__set(std::vector< aiMeshAnim * > *self,int i,std::vector< aiMeshAnim * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiMesh * >::const_reference std_vector_Sl_aiMesh_Sm__Sg__get(std::vector< aiMesh * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiMesh_Sm__Sg__set(std::vector< aiMesh * > *self,int i,std::vector< aiMesh * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiNode * >::const_reference std_vector_Sl_aiNode_Sm__Sg__get(std::vector< aiNode * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiNode_Sm__Sg__set(std::vector< aiNode * > *self,int i,std::vector< aiNode * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiNodeAnim * >::const_reference std_vector_Sl_aiNodeAnim_Sm__Sg__get(std::vector< aiNodeAnim * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiNodeAnim_Sm__Sg__set(std::vector< aiNodeAnim * > *self,int i,std::vector< aiNodeAnim * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiTexture * >::const_reference std_vector_Sl_aiTexture_Sm__Sg__get(std::vector< aiTexture * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiTexture_Sm__Sg__set(std::vector< aiTexture * > *self,int i,std::vector< aiTexture * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiVector3D * >::const_reference std_vector_Sl_aiVector3D_Sm__Sg__get(std::vector< aiVector3D * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiVector3D_Sm__Sg__set(std::vector< aiVector3D * > *self,int i,std::vector< aiVector3D * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< aiVector3D * > >::const_reference std_vector_Sl_std_vector_Sl_aiVector3D_Sm__Sg__Sg__get(std::vector< std::vector< aiVector3D * > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_aiVector3D_Sm__Sg__Sg__set(std::vector< std::vector< aiVector3D * > > *self,int i,std::vector< std::vector< aiVector3D * > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiVertexWeight * >::const_reference std_vector_Sl_aiVertexWeight_Sm__Sg__get(std::vector< aiVertexWeight * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiVertexWeight_Sm__Sg__set(std::vector< aiVertexWeight * > *self,int i,std::vector< aiVertexWeight * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_aig_29567bba180e4e84(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_aig_29567bba180e4e84(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_aiLogStream_callback_set_aig_29567bba180e4e84(aiLogStream *_swig_go_0, void* _swig_go_1) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  aiLogStreamCallback arg2 = (aiLogStreamCallback) 0 ;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  arg2 = *(aiLogStreamCallback *)&_swig_go_1; 
  
  if (arg1) (arg1)->callback = arg2;
  
}


void* _wrap_aiLogStream_callback_get_aig_29567bba180e4e84(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  aiLogStreamCallback result;
  void* _swig_go_result;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  result = (aiLogStreamCallback) ((arg1)->callback);
  *(aiLogStreamCallback *)&_swig_go_result = (aiLogStreamCallback)result; 
  return _swig_go_result;
}


void _wrap_aiLogStream_user_set_aig_29567bba180e4e84(aiLogStream *_swig_go_0, _gostring_ _swig_go_1) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->user;
    if (arg2) {
      arg1->user = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->user, (const char *)arg2);
    } else {
      arg1->user = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_aiLogStream_user_get_aig_29567bba180e4e84(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  result = (char *) ((arg1)->user);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


aiLogStream *_wrap_new_aiLogStream_aig_29567bba180e4e84() {
  aiLogStream *result = 0 ;
  aiLogStream *_swig_go_result;
  
  
  result = (aiLogStream *)new aiLogStream();
  *(aiLogStream **)&_swig_go_result = (aiLogStream *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiLogStream_aig_29567bba180e4e84(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiPropertyStore_sentinel_set_aig_29567bba180e4e84(aiPropertyStore *_swig_go_0, char _swig_go_1) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char arg2 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  arg2 = (char)_swig_go_1; 
  
  if (arg1) (arg1)->sentinel = arg2;
  
}


char _wrap_aiPropertyStore_sentinel_get_aig_29567bba180e4e84(aiPropertyStore *_swig_go_0) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char result;
  char _swig_go_result;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  result = (char) ((arg1)->sentinel);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiPropertyStore *_wrap_new_aiPropertyStore_aig_29567bba180e4e84() {
  aiPropertyStore *result = 0 ;
  aiPropertyStore *_swig_go_result;
  
  
  result = (aiPropertyStore *)new aiPropertyStore();
  *(aiPropertyStore **)&_swig_go_result = (aiPropertyStore *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiPropertyStore_aig_29567bba180e4e84(aiPropertyStore *_swig_go_0) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  delete arg1;
  
}


aiScene *_wrap_aiImportFile_aig_29567bba180e4e84(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (aiScene *)aiImportFile((char const *)arg1,arg2);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  return _swig_go_result;
}


aiScene *_wrap_aiImportFileEx_aig_29567bba180e4e84(_gostring_ _swig_go_0, intgo _swig_go_1, aiFileIO *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  aiFileIO *arg3 = (aiFileIO *) 0 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(aiFileIO **)&_swig_go_2; 
  
  result = (aiScene *)aiImportFileEx((char const *)arg1,arg2,arg3);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  return _swig_go_result;
}


aiScene *_wrap_aiImportFileExWithProperties_aig_29567bba180e4e84(_gostring_ _swig_go_0, intgo _swig_go_1, aiFileIO *_swig_go_2, aiPropertyStore *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  aiFileIO *arg3 = (aiFileIO *) 0 ;
  aiPropertyStore *arg4 = (aiPropertyStore *) 0 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(aiFileIO **)&_swig_go_2; 
  arg4 = *(aiPropertyStore **)&_swig_go_3; 
  
  result = (aiScene *)aiImportFileExWithProperties((char const *)arg1,arg2,arg3,(aiPropertyStore const *)arg4);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  return _swig_go_result;
}


aiScene *_wrap_aiImportFileFromMemory_aig_29567bba180e4e84(_gostring_ _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiScene *)aiImportFileFromMemory((char const *)arg1,arg2,arg3,(char const *)arg4);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  free(arg4); 
  return _swig_go_result;
}


aiScene *_wrap_aiImportFileFromMemoryWithProperties_aig_29567bba180e4e84(_gostring_ _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, aiPropertyStore *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiPropertyStore *arg5 = (aiPropertyStore *) 0 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = *(aiPropertyStore **)&_swig_go_4; 
  
  result = (aiScene *)aiImportFileFromMemoryWithProperties((char const *)arg1,arg2,arg3,(char const *)arg4,(aiPropertyStore const *)arg5);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  free(arg4); 
  return _swig_go_result;
}


aiScene *_wrap_aiApplyPostProcessing_aig_29567bba180e4e84(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (aiScene *)aiApplyPostProcessing((aiScene const *)arg1,arg2);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  return _swig_go_result;
}


aiLogStream *_wrap_aiGetPredefinedLogStream_aig_29567bba180e4e84(intgo _swig_go_0, _gostring_ _swig_go_1) {
  enum aiDefaultLogStream arg1 ;
  char *arg2 = (char *) 0 ;
  aiLogStream result;
  aiLogStream *_swig_go_result;
  
  arg1 = (enum aiDefaultLogStream)_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = aiGetPredefinedLogStream(arg1,(char const *)arg2);
  *(aiLogStream **)&_swig_go_result = new aiLogStream(result); 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_aiAttachLogStream_aig_29567bba180e4e84(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  aiAttachLogStream((aiLogStream const *)arg1);
  
}


void _wrap_aiEnableVerboseLogging_aig_29567bba180e4e84(intgo _swig_go_0) {
  aiBool arg1 ;
  
  arg1 = (aiBool)_swig_go_0; 
  
  aiEnableVerboseLogging(arg1);
  
}


intgo _wrap_aiDetachLogStream_aig_29567bba180e4e84(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  enum aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  result = (enum aiReturn)aiDetachLogStream((aiLogStream const *)arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiDetachAllLogStreams_aig_29567bba180e4e84() {
  aiDetachAllLogStreams();
  
}


void _wrap_aiReleaseImport_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  aiReleaseImport((aiScene const *)arg1);
  
}


_gostring_ _wrap_aiGetErrorString_aig_29567bba180e4e84() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (char *)aiGetErrorString();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_aiIsExtensionSupported_aig_29567bba180e4e84(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  aiBool result;
  intgo _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (aiBool)aiIsExtensionSupported((char const *)arg1);
  _swig_go_result = result; 
  free(arg1); 
  return _swig_go_result;
}


void _wrap_aiGetExtensionList_aig_29567bba180e4e84(aiString *_swig_go_0) {
  aiString *arg1 = (aiString *) 0 ;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  aiGetExtensionList(arg1);
  
}


void _wrap_aiGetMemoryRequirements_aig_29567bba180e4e84(aiScene *_swig_go_0, aiMemoryInfo *_swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiMemoryInfo *arg2 = (aiMemoryInfo *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = *(aiMemoryInfo **)&_swig_go_1; 
  
  aiGetMemoryRequirements((aiScene const *)arg1,arg2);
  
}


aiPropertyStore *_wrap_aiCreatePropertyStore_aig_29567bba180e4e84() {
  aiPropertyStore *result = 0 ;
  aiPropertyStore *_swig_go_result;
  
  
  result = (aiPropertyStore *)aiCreatePropertyStore();
  *(aiPropertyStore **)&_swig_go_result = (aiPropertyStore *)result; 
  return _swig_go_result;
}


void _wrap_aiReleasePropertyStore_aig_29567bba180e4e84(aiPropertyStore *_swig_go_0) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  aiReleasePropertyStore(arg1);
  
}


void _wrap_aiSetImportPropertyInteger_aig_29567bba180e4e84(aiPropertyStore *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  aiSetImportPropertyInteger(arg1,(char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_aiSetImportPropertyFloat_aig_29567bba180e4e84(aiPropertyStore *_swig_go_0, _gostring_ _swig_go_1, ai_real *_swig_go_2) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char *arg2 = (char *) 0 ;
  ai_real arg3 ;
  ai_real *argp3 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (ai_real *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null ai_real");
  }
  arg3 = (ai_real)*argp3;
  
  
  aiSetImportPropertyFloat(arg1,(char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_aiSetImportPropertyString_aig_29567bba180e4e84(aiPropertyStore *_swig_go_0, _gostring_ _swig_go_1, aiString *_swig_go_2) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char *arg2 = (char *) 0 ;
  aiString *arg3 = (aiString *) 0 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(aiString **)&_swig_go_2; 
  
  aiSetImportPropertyString(arg1,(char const *)arg2,(aiString const *)arg3);
  
  free(arg2); 
}


void _wrap_aiSetImportPropertyMatrix_aig_29567bba180e4e84(aiPropertyStore *_swig_go_0, _gostring_ _swig_go_1, aiMatrix4x4 *_swig_go_2) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char *arg2 = (char *) 0 ;
  aiMatrix4x4 *arg3 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(aiMatrix4x4 **)&_swig_go_2; 
  
  aiSetImportPropertyMatrix(arg1,(char const *)arg2,(aiMatrix4x4 const *)arg3);
  
  free(arg2); 
}


void _wrap_aiCreateQuaternionFromMatrix_aig_29567bba180e4e84(aiQuaternion *_swig_go_0, aiMatrix3x3 *_swig_go_1) {
  aiQuaternion *arg1 = (aiQuaternion *) 0 ;
  aiMatrix3x3 *arg2 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiQuaternion **)&_swig_go_0; 
  arg2 = *(aiMatrix3x3 **)&_swig_go_1; 
  
  aiCreateQuaternionFromMatrix(arg1,(aiMatrix3x3 const *)arg2);
  
}


void _wrap_aiDecomposeMatrix_aig_29567bba180e4e84(aiMatrix4x4 *_swig_go_0, aiVector3D *_swig_go_1, aiQuaternion *_swig_go_2, aiVector3D *_swig_go_3) {
  aiMatrix4x4 *arg1 = (aiMatrix4x4 *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  aiQuaternion *arg3 = (aiQuaternion *) 0 ;
  aiVector3D *arg4 = (aiVector3D *) 0 ;
  
  arg1 = *(aiMatrix4x4 **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  arg3 = *(aiQuaternion **)&_swig_go_2; 
  arg4 = *(aiVector3D **)&_swig_go_3; 
  
  aiDecomposeMatrix((aiMatrix4x4 const *)arg1,arg2,arg3,arg4);
  
}


void _wrap_aiTransposeMatrix4_aig_29567bba180e4e84(aiMatrix4x4 *_swig_go_0) {
  aiMatrix4x4 *arg1 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiMatrix4x4 **)&_swig_go_0; 
  
  aiTransposeMatrix4(arg1);
  
}


void _wrap_aiTransposeMatrix3_aig_29567bba180e4e84(aiMatrix3x3 *_swig_go_0) {
  aiMatrix3x3 *arg1 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiMatrix3x3 **)&_swig_go_0; 
  
  aiTransposeMatrix3(arg1);
  
}


void _wrap_aiTransformVecByMatrix3_aig_29567bba180e4e84(aiVector3D *_swig_go_0, aiMatrix3x3 *_swig_go_1) {
  aiVector3D *arg1 = (aiVector3D *) 0 ;
  aiMatrix3x3 *arg2 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiVector3D **)&_swig_go_0; 
  arg2 = *(aiMatrix3x3 **)&_swig_go_1; 
  
  aiTransformVecByMatrix3(arg1,(aiMatrix3x3 const *)arg2);
  
}


void _wrap_aiTransformVecByMatrix4_aig_29567bba180e4e84(aiVector3D *_swig_go_0, aiMatrix4x4 *_swig_go_1) {
  aiVector3D *arg1 = (aiVector3D *) 0 ;
  aiMatrix4x4 *arg2 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiVector3D **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4 **)&_swig_go_1; 
  
  aiTransformVecByMatrix4(arg1,(aiMatrix4x4 const *)arg2);
  
}


void _wrap_aiMultiplyMatrix4_aig_29567bba180e4e84(aiMatrix4x4 *_swig_go_0, aiMatrix4x4 *_swig_go_1) {
  aiMatrix4x4 *arg1 = (aiMatrix4x4 *) 0 ;
  aiMatrix4x4 *arg2 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiMatrix4x4 **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4 **)&_swig_go_1; 
  
  aiMultiplyMatrix4(arg1,(aiMatrix4x4 const *)arg2);
  
}


void _wrap_aiMultiplyMatrix3_aig_29567bba180e4e84(aiMatrix3x3 *_swig_go_0, aiMatrix3x3 *_swig_go_1) {
  aiMatrix3x3 *arg1 = (aiMatrix3x3 *) 0 ;
  aiMatrix3x3 *arg2 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiMatrix3x3 **)&_swig_go_0; 
  arg2 = *(aiMatrix3x3 **)&_swig_go_1; 
  
  aiMultiplyMatrix3(arg1,(aiMatrix3x3 const *)arg2);
  
}


void _wrap_aiIdentityMatrix3_aig_29567bba180e4e84(aiMatrix3x3 *_swig_go_0) {
  aiMatrix3x3 *arg1 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiMatrix3x3 **)&_swig_go_0; 
  
  aiIdentityMatrix3(arg1);
  
}


void _wrap_aiIdentityMatrix4_aig_29567bba180e4e84(aiMatrix4x4 *_swig_go_0) {
  aiMatrix4x4 *arg1 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiMatrix4x4 **)&_swig_go_0; 
  
  aiIdentityMatrix4(arg1);
  
}


long long _wrap_aiGetImportFormatCount_aig_29567bba180e4e84() {
  size_t result;
  long long _swig_go_result;
  
  
  result = aiGetImportFormatCount();
  _swig_go_result = result; 
  return _swig_go_result;
}


aiImporterDesc *_wrap_aiGetImportFormatDescription_aig_29567bba180e4e84(long long _swig_go_0) {
  size_t arg1 ;
  aiImporterDesc *result = 0 ;
  aiImporterDesc *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (aiImporterDesc *)aiGetImportFormatDescription(arg1);
  *(aiImporterDesc **)&_swig_go_result = (aiImporterDesc *)result; 
  return _swig_go_result;
}


void _wrap_aiNode_mName_set_aig_29567bba180e4e84(aiNode *_swig_go_0, aiString *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiString arg2 ;
  aiString *argp2 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  argp2 = (aiString *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiString");
  }
  arg2 = (aiString)*argp2;
  
  
  if (arg1) (arg1)->mName = arg2;
  
}


aiString *_wrap_aiNode_mName_get_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiString result;
  aiString *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result =  ((arg1)->mName);
  *(aiString **)&_swig_go_result = new aiString(result); 
  return _swig_go_result;
}


void _wrap_aiNode_mTransformation_set_aig_29567bba180e4e84(aiNode *_swig_go_0, aiMatrix4x4 *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiMatrix4x4 arg2 ;
  aiMatrix4x4 *argp2 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  argp2 = (aiMatrix4x4 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiMatrix4x4");
  }
  arg2 = (aiMatrix4x4)*argp2;
  
  
  if (arg1) (arg1)->mTransformation = arg2;
  
}


aiMatrix4x4 *_wrap_aiNode_mTransformation_get_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiMatrix4x4 result;
  aiMatrix4x4 *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result =  ((arg1)->mTransformation);
  *(aiMatrix4x4 **)&_swig_go_result = new aiMatrix4x4(result); 
  return _swig_go_result;
}


void _wrap_aiNode_mParent_set_aig_29567bba180e4e84(aiNode *_swig_go_0, aiNode *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiNode *arg2 = (aiNode *) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiNode **)&_swig_go_1; 
  
  if (arg1) (arg1)->mParent = arg2;
  
}


aiNode *_wrap_aiNode_mParent_get_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (aiNode *) ((arg1)->mParent);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


void _wrap_aiNode_mNumChildren_set_aig_29567bba180e4e84(aiNode *_swig_go_0, intgo _swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumChildren = arg2;
  
}


intgo _wrap_aiNode_mNumChildren_get_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumChildren);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNode_mNumMeshes_set_aig_29567bba180e4e84(aiNode *_swig_go_0, intgo _swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumMeshes = arg2;
  
}


intgo _wrap_aiNode_mNumMeshes_get_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumMeshes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNode_mMetaData_set_aig_29567bba180e4e84(aiNode *_swig_go_0, aiMetadata *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiMetadata *arg2 = (aiMetadata *) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiMetadata **)&_swig_go_1; 
  
  if (arg1) (arg1)->mMetaData = arg2;
  
}


aiMetadata *_wrap_aiNode_mMetaData_get_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiMetadata *result = 0 ;
  aiMetadata *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (aiMetadata *) ((arg1)->mMetaData);
  *(aiMetadata **)&_swig_go_result = (aiMetadata *)result; 
  return _swig_go_result;
}


aiNode *_wrap_new_aiNode__SWIG_0_aig_29567bba180e4e84() {
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  
  result = (aiNode *)new aiNode();
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


aiNode *_wrap_new_aiNode__SWIG_1_aig_29567bba180e4e84(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  result = (aiNode *)new aiNode((std::string const &)*arg1);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiNode_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  delete arg1;
  
}


aiNode *_wrap_aiNode_FindNode__SWIG_0_aig_29567bba180e4e84(aiNode *_swig_go_0, aiString *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiString *arg2 = 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  result = (aiNode *)((aiNode const *)arg1)->FindNode((aiString const &)*arg2);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


aiNode *_wrap_aiNode_FindNode__SWIG_1_aig_29567bba180e4e84(aiNode *_swig_go_0, aiString *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiString *arg2 = 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  result = (aiNode *)(arg1)->FindNode((aiString const &)*arg2);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


aiNode *_wrap_aiNode_FindNode__SWIG_2_aig_29567bba180e4e84(aiNode *_swig_go_0, _gostring_ _swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  char *arg2 = (char *) 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (aiNode *)((aiNode const *)arg1)->FindNode((char const *)arg2);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  free(arg2); 
  return _swig_go_result;
}


aiNode *_wrap_aiNode_FindNode__SWIG_3_aig_29567bba180e4e84(aiNode *_swig_go_0, _gostring_ _swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  char *arg2 = (char *) 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (aiNode *)(arg1)->FindNode((char const *)arg2);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_aiNode_addChildren_aig_29567bba180e4e84(aiNode *_swig_go_0, intgo _swig_go_1, aiNode **_swig_go_2) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int arg2 ;
  aiNode **arg3 = (aiNode **) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(aiNode ***)&_swig_go_2; 
  
  (arg1)->addChildren(arg2,arg3);
  
}


std::vector< aiNode * > *_wrap_aiNode_mChildren_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  std::vector< aiNode * > *result = 0 ;
  std::vector< aiNode * > *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (std::vector< aiNode * > *)aiNode_mChildren((aiNode const *)arg1);
  *(std::vector< aiNode * > **)&_swig_go_result = (std::vector< aiNode * > *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_aiNode_mMeshes_aig_29567bba180e4e84(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (std::vector< unsigned int > *)aiNode_mMeshes((aiNode const *)arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


void _wrap_aiScene_mFlags_set_aig_29567bba180e4e84(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mFlags = arg2;
  
}


intgo _wrap_aiScene_mFlags_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mFlags);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mRootNode_set_aig_29567bba180e4e84(aiScene *_swig_go_0, aiNode *_swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiNode *arg2 = (aiNode *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = *(aiNode **)&_swig_go_1; 
  
  if (arg1) (arg1)->mRootNode = arg2;
  
}


aiNode *_wrap_aiScene_mRootNode_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (aiNode *) ((arg1)->mRootNode);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumMeshes_set_aig_29567bba180e4e84(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumMeshes = arg2;
  
}


intgo _wrap_aiScene_mNumMeshes_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumMeshes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumMaterials_set_aig_29567bba180e4e84(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumMaterials = arg2;
  
}


intgo _wrap_aiScene_mNumMaterials_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumMaterials);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumAnimations_set_aig_29567bba180e4e84(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumAnimations = arg2;
  
}


intgo _wrap_aiScene_mNumAnimations_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumAnimations);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumTextures_set_aig_29567bba180e4e84(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumTextures = arg2;
  
}


intgo _wrap_aiScene_mNumTextures_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumTextures);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumLights_set_aig_29567bba180e4e84(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumLights = arg2;
  
}


intgo _wrap_aiScene_mNumLights_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumLights);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumCameras_set_aig_29567bba180e4e84(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumCameras = arg2;
  
}


intgo _wrap_aiScene_mNumCameras_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumCameras);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mMetaData_set_aig_29567bba180e4e84(aiScene *_swig_go_0, aiMetadata *_swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiMetadata *arg2 = (aiMetadata *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = *(aiMetadata **)&_swig_go_1; 
  
  if (arg1) (arg1)->mMetaData = arg2;
  
}


aiMetadata *_wrap_aiScene_mMetaData_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiMetadata *result = 0 ;
  aiMetadata *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (aiMetadata *) ((arg1)->mMetaData);
  *(aiMetadata **)&_swig_go_result = (aiMetadata *)result; 
  return _swig_go_result;
}


aiScene *_wrap_new_aiScene_aig_29567bba180e4e84() {
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  result = (aiScene *)new aiScene();
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiScene_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_aiScene_HasMeshes_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasMeshes();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasMaterials_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasMaterials();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasLights_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasLights();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasTextures_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasTextures();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasCameras_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasCameras();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasAnimations_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasAnimations();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_aiScene_GetShortFilename_aig_29567bba180e4e84(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (char *)aiScene::GetShortFilename((char const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  free(arg1); 
  return _swig_go_result;
}


aiTexture *_wrap_aiScene_GetEmbeddedTexture_aig_29567bba180e4e84(aiScene *_swig_go_0, _gostring_ _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  char *arg2 = (char *) 0 ;
  aiTexture *result = 0 ;
  aiTexture *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (aiTexture *)((aiScene const *)arg1)->GetEmbeddedTexture((char const *)arg2);
  *(aiTexture **)&_swig_go_result = (aiTexture *)result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_aiScene_mPrivate_set_aig_29567bba180e4e84(aiScene *_swig_go_0, void *_swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  
  if (arg1) (arg1)->mPrivate = arg2;
  
}


void *_wrap_aiScene_mPrivate_get_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (void *) ((arg1)->mPrivate);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< aiAnimation * > *_wrap_aiScene_mAnimations_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiAnimation * > *result = 0 ;
  std::vector< aiAnimation * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiAnimation * > *)aiScene_mAnimations((aiScene const *)arg1);
  *(std::vector< aiAnimation * > **)&_swig_go_result = (std::vector< aiAnimation * > *)result; 
  return _swig_go_result;
}


std::vector< aiCamera * > *_wrap_aiScene_mCameras_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiCamera * > *result = 0 ;
  std::vector< aiCamera * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiCamera * > *)aiScene_mCameras((aiScene const *)arg1);
  *(std::vector< aiCamera * > **)&_swig_go_result = (std::vector< aiCamera * > *)result; 
  return _swig_go_result;
}


std::vector< aiLight * > *_wrap_aiScene_mLights_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiLight * > *result = 0 ;
  std::vector< aiLight * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiLight * > *)aiScene_mLights((aiScene const *)arg1);
  *(std::vector< aiLight * > **)&_swig_go_result = (std::vector< aiLight * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterial * > *_wrap_aiScene_mMaterials_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiMaterial * > *result = 0 ;
  std::vector< aiMaterial * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiMaterial * > *)aiScene_mMaterials((aiScene const *)arg1);
  *(std::vector< aiMaterial * > **)&_swig_go_result = (std::vector< aiMaterial * > *)result; 
  return _swig_go_result;
}


std::vector< aiMesh * > *_wrap_aiScene_mMeshes_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiMesh * > *result = 0 ;
  std::vector< aiMesh * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiMesh * > *)aiScene_mMeshes((aiScene const *)arg1);
  *(std::vector< aiMesh * > **)&_swig_go_result = (std::vector< aiMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiTexture * > *_wrap_aiScene_mTextures_aig_29567bba180e4e84(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiTexture * > *result = 0 ;
  std::vector< aiTexture * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiTexture * > *)aiScene_mTextures((aiScene const *)arg1);
  *(std::vector< aiTexture * > **)&_swig_go_result = (std::vector< aiTexture * > *)result; 
  return _swig_go_result;
}


void _wrap_aiFace_mNumIndices_set_aig_29567bba180e4e84(aiFace *_swig_go_0, intgo _swig_go_1) {
  aiFace *arg1 = (aiFace *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumIndices = arg2;
  
}


intgo _wrap_aiFace_mNumIndices_get_aig_29567bba180e4e84(aiFace *_swig_go_0) {
  aiFace *arg1 = (aiFace *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumIndices);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiFace *_wrap_new_aiFace__SWIG_0_aig_29567bba180e4e84() {
  aiFace *result = 0 ;
  aiFace *_swig_go_result;
  
  
  result = (aiFace *)new aiFace();
  *(aiFace **)&_swig_go_result = (aiFace *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiFace_aig_29567bba180e4e84(aiFace *_swig_go_0) {
  aiFace *arg1 = (aiFace *) 0 ;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  
  delete arg1;
  
}


aiFace *_wrap_new_aiFace__SWIG_1_aig_29567bba180e4e84(aiFace *_swig_go_0) {
  aiFace *arg1 = 0 ;
  aiFace *result = 0 ;
  aiFace *_swig_go_result;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  
  result = (aiFace *)new aiFace((aiFace const &)*arg1);
  *(aiFace **)&_swig_go_result = (aiFace *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_aiFace_mIndices_aig_29567bba180e4e84(aiFace *_swig_go_0) {
  aiFace *arg1 = (aiFace *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  
  result = (std::vector< unsigned int > *)aiFace_mIndices((aiFace const *)arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeight_mVertexId_set_aig_29567bba180e4e84(aiVertexWeight *_swig_go_0, intgo _swig_go_1) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mVertexId = arg2;
  
}


intgo _wrap_aiVertexWeight_mVertexId_get_aig_29567bba180e4e84(aiVertexWeight *_swig_go_0) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mVertexId);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeight_mWeight_set_aig_29567bba180e4e84(aiVertexWeight *_swig_go_0, float _swig_go_1) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  float arg2 ;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mWeight = arg2;
  
}


float _wrap_aiVertexWeight_mWeight_get_aig_29567bba180e4e84(aiVertexWeight *_swig_go_0) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  
  result = (float) ((arg1)->mWeight);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiVertexWeight *_wrap_new_aiVertexWeight__SWIG_0_aig_29567bba180e4e84() {
  aiVertexWeight *result = 0 ;
  aiVertexWeight *_swig_go_result;
  
  
  result = (aiVertexWeight *)new aiVertexWeight();
  *(aiVertexWeight **)&_swig_go_result = (aiVertexWeight *)result; 
  return _swig_go_result;
}


aiVertexWeight *_wrap_new_aiVertexWeight__SWIG_1_aig_29567bba180e4e84(intgo _swig_go_0, float _swig_go_1) {
  unsigned int arg1 ;
  float arg2 ;
  aiVertexWeight *result = 0 ;
  aiVertexWeight *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  result = (aiVertexWeight *)new aiVertexWeight(arg1,arg2);
  *(aiVertexWeight **)&_swig_go_result = (aiVertexWeight *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiVertexWeight_aig_29567bba180e4e84(aiVertexWeight *_swig_go_0) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiBone_mName_set_aig_29567bba180e4e84(aiBone *_swig_go_0, aiString *_swig_go_1) {
  aiBone *arg1 = (aiBone *) 0 ;
  aiString arg2 ;
  aiString *argp2 ;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  argp2 = (aiString *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiString");
  }
  arg2 = (aiString)*argp2;
  
  
  if (arg1) (arg1)->mName = arg2;
  
}


aiString *_wrap_aiBone_mName_get_aig_29567bba180e4e84(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  aiString result;
  aiString *_swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result =  ((arg1)->mName);
  *(aiString **)&_swig_go_result = new aiString(result); 
  return _swig_go_result;
}


void _wrap_aiBone_mNumWeights_set_aig_29567bba180e4e84(aiBone *_swig_go_0, intgo _swig_go_1) {
  aiBone *arg1 = (aiBone *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumWeights = arg2;
  
}


intgo _wrap_aiBone_mNumWeights_get_aig_29567bba180e4e84(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumWeights);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiBone_mOffsetMatrix_set_aig_29567bba180e4e84(aiBone *_swig_go_0, aiMatrix4x4 *_swig_go_1) {
  aiBone *arg1 = (aiBone *) 0 ;
  aiMatrix4x4 arg2 ;
  aiMatrix4x4 *argp2 ;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  argp2 = (aiMatrix4x4 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiMatrix4x4");
  }
  arg2 = (aiMatrix4x4)*argp2;
  
  
  if (arg1) (arg1)->mOffsetMatrix = arg2;
  
}


aiMatrix4x4 *_wrap_aiBone_mOffsetMatrix_get_aig_29567bba180e4e84(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  aiMatrix4x4 result;
  aiMatrix4x4 *_swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result =  ((arg1)->mOffsetMatrix);
  *(aiMatrix4x4 **)&_swig_go_result = new aiMatrix4x4(result); 
  return _swig_go_result;
}


aiBone *_wrap_new_aiBone__SWIG_0_aig_29567bba180e4e84() {
  aiBone *result = 0 ;
  aiBone *_swig_go_result;
  
  
  result = (aiBone *)new aiBone();
  *(aiBone **)&_swig_go_result = (aiBone *)result; 
  return _swig_go_result;
}


aiBone *_wrap_new_aiBone__SWIG_1_aig_29567bba180e4e84(aiBone *_swig_go_0) {
  aiBone *arg1 = 0 ;
  aiBone *result = 0 ;
  aiBone *_swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result = (aiBone *)new aiBone((aiBone const &)*arg1);
  *(aiBone **)&_swig_go_result = (aiBone *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiBone_aig_29567bba180e4e84(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiVertexWeight * > *_wrap_aiBone_mWeights_aig_29567bba180e4e84(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  std::vector< aiVertexWeight * > *result = 0 ;
  std::vector< aiVertexWeight * > *_swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result = (std::vector< aiVertexWeight * > *)aiBone_mWeights((aiBone const *)arg1);
  *(std::vector< aiVertexWeight * > **)&_swig_go_result = (std::vector< aiVertexWeight * > *)result; 
  return _swig_go_result;
}


intgo _wrap_aiPrimitiveType_POINT_aig_29567bba180e4e84() {
  aiPrimitiveType result;
  intgo _swig_go_result;
  
  
  result = aiPrimitiveType_POINT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPrimitiveType_LINE_aig_29567bba180e4e84() {
  aiPrimitiveType result;
  intgo _swig_go_result;
  
  
  result = aiPrimitiveType_LINE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPrimitiveType_TRIANGLE_aig_29567bba180e4e84() {
  aiPrimitiveType result;
  intgo _swig_go_result;
  
  
  result = aiPrimitiveType_TRIANGLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPrimitiveType_POLYGON_aig_29567bba180e4e84() {
  aiPrimitiveType result;
  intgo _swig_go_result;
  
  
  result = aiPrimitiveType_POLYGON;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiAnimMesh_mName_set_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0, aiString *_swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  aiString arg2 ;
  aiString *argp2 ;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  argp2 = (aiString *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiString");
  }
  arg2 = (aiString)*argp2;
  
  
  if (arg1) (arg1)->mName = arg2;
  
}


aiString *_wrap_aiAnimMesh_mName_get_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  aiString result;
  aiString *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result =  ((arg1)->mName);
  *(aiString **)&_swig_go_result = new aiString(result); 
  return _swig_go_result;
}


void _wrap_aiAnimMesh_mNumVertices_set_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0, intgo _swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumVertices = arg2;
  
}


intgo _wrap_aiAnimMesh_mNumVertices_get_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumVertices);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimMesh_mWeight_set_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0, float _swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  float arg2 ;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mWeight = arg2;
  
}


float _wrap_aiAnimMesh_mWeight_get_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (float) ((arg1)->mWeight);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiAnimMesh *_wrap_new_aiAnimMesh_aig_29567bba180e4e84() {
  aiAnimMesh *result = 0 ;
  aiAnimMesh *_swig_go_result;
  
  
  result = (aiAnimMesh *)new aiAnimMesh();
  *(aiAnimMesh **)&_swig_go_result = (aiAnimMesh *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiAnimMesh_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_aiAnimMesh_HasPositions_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasPositions();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiAnimMesh_HasNormals_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasNormals();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiAnimMesh_HasTangentsAndBitangents_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasTangentsAndBitangents();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiAnimMesh_HasVertexColors_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0, intgo _swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasVertexColors(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiAnimMesh_HasTextureCoords_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0, intgo _swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasTextureCoords(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_aiAnimMesh_mVertices_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiAnimMesh_mVertices((aiAnimMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_aiAnimMesh_mNormals_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiAnimMesh_mNormals((aiAnimMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_aiAnimMesh_mTangents_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiAnimMesh_mTangents((aiAnimMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_aiAnimMesh_mBitangents_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiAnimMesh_mBitangents((aiAnimMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiVector3D * > > *_wrap_aiAnimMesh_mTextureCoords_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3D * > > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiVector3D * > > *)aiAnimMesh_mTextureCoords((aiAnimMesh const *)arg1);
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiColor4D * > > *_wrap_aiAnimMesh_mColors_aig_29567bba180e4e84(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4D * > > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiColor4D * > > *)aiAnimMesh_mColors((aiAnimMesh const *)arg1);
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


intgo _wrap_aiMorphingMethod_VERTEX_BLEND_aig_29567bba180e4e84() {
  aiMorphingMethod result;
  intgo _swig_go_result;
  
  
  result = aiMorphingMethod_VERTEX_BLEND;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiMorphingMethod_MORPH_NORMALIZED_aig_29567bba180e4e84() {
  aiMorphingMethod result;
  intgo _swig_go_result;
  
  
  result = aiMorphingMethod_MORPH_NORMALIZED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiMorphingMethod_MORPH_RELATIVE_aig_29567bba180e4e84() {
  aiMorphingMethod result;
  intgo _swig_go_result;
  
  
  result = aiMorphingMethod_MORPH_RELATIVE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mPrimitiveTypes_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mPrimitiveTypes = arg2;
  
}


intgo _wrap_aiMesh_mPrimitiveTypes_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mPrimitiveTypes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mNumVertices_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumVertices = arg2;
  
}


intgo _wrap_aiMesh_mNumVertices_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumVertices);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mNumFaces_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumFaces = arg2;
  
}


intgo _wrap_aiMesh_mNumFaces_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumFaces);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mNumBones_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumBones = arg2;
  
}


intgo _wrap_aiMesh_mNumBones_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumBones);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mMaterialIndex_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mMaterialIndex = arg2;
  
}


intgo _wrap_aiMesh_mMaterialIndex_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mMaterialIndex);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mName_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, aiString *_swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  aiString arg2 ;
  aiString *argp2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  argp2 = (aiString *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiString");
  }
  arg2 = (aiString)*argp2;
  
  
  if (arg1) (arg1)->mName = arg2;
  
}


aiString *_wrap_aiMesh_mName_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  aiString result;
  aiString *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result =  ((arg1)->mName);
  *(aiString **)&_swig_go_result = new aiString(result); 
  return _swig_go_result;
}


void _wrap_aiMesh_mNumAnimMeshes_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumAnimMeshes = arg2;
  
}


intgo _wrap_aiMesh_mNumAnimMeshes_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumAnimMeshes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mMethod_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mMethod = arg2;
  
}


intgo _wrap_aiMesh_mMethod_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mMethod);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mAABB_set_aig_29567bba180e4e84(aiMesh *_swig_go_0, aiAABB *_swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  aiAABB arg2 ;
  aiAABB *argp2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  argp2 = (aiAABB *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiAABB");
  }
  arg2 = (aiAABB)*argp2;
  
  
  if (arg1) (arg1)->mAABB = arg2;
  
}


aiAABB *_wrap_aiMesh_mAABB_get_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  aiAABB result;
  aiAABB *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result =  ((arg1)->mAABB);
  *(aiAABB **)&_swig_go_result = new aiAABB(result); 
  return _swig_go_result;
}


aiMesh *_wrap_new_aiMesh_aig_29567bba180e4e84() {
  aiMesh *result = 0 ;
  aiMesh *_swig_go_result;
  
  
  result = (aiMesh *)new aiMesh();
  *(aiMesh **)&_swig_go_result = (aiMesh *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMesh_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_aiMesh_HasPositions_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasPositions();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasFaces_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasFaces();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasNormals_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasNormals();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasTangentsAndBitangents_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasTangentsAndBitangents();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasVertexColors_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (bool)((aiMesh const *)arg1)->HasVertexColors(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasTextureCoords_aig_29567bba180e4e84(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (bool)((aiMesh const *)arg1)->HasTextureCoords(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_aiMesh_GetNumUVChannels_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int)((aiMesh const *)arg1)->GetNumUVChannels();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_aiMesh_GetNumColorChannels_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int)((aiMesh const *)arg1)->GetNumColorChannels();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasBones_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasBones();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< aiAnimMesh * > *_wrap_aiMesh_mAnimMeshes_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiAnimMesh * > *result = 0 ;
  std::vector< aiAnimMesh * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiAnimMesh * > *)aiMesh_mAnimMeshes((aiMesh const *)arg1);
  *(std::vector< aiAnimMesh * > **)&_swig_go_result = (std::vector< aiAnimMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiBone * > *_wrap_aiMesh_mBones_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiBone * > *result = 0 ;
  std::vector< aiBone * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiBone * > *)aiMesh_mBones((aiMesh const *)arg1);
  *(std::vector< aiBone * > **)&_swig_go_result = (std::vector< aiBone * > *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_aiMesh_mNumUVComponents_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< unsigned int > *)aiMesh_mNumUVComponents((aiMesh const *)arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_aiMesh_mVertices_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiMesh_mVertices((aiMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_aiMesh_mNormals_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiMesh_mNormals((aiMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_aiMesh_mTangents_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiMesh_mTangents((aiMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_aiMesh_mBitangents_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiMesh_mBitangents((aiMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiFace * > *_wrap_aiMesh_mFaces_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiFace * > *result = 0 ;
  std::vector< aiFace * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiFace * > *)aiMesh_mFaces((aiMesh const *)arg1);
  *(std::vector< aiFace * > **)&_swig_go_result = (std::vector< aiFace * > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiVector3D * > > *_wrap_aiMesh_mTextureCoords_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3D * > > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiVector3D * > > *)aiMesh_mTextureCoords((aiMesh const *)arg1);
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiColor4D * > > *_wrap_aiMesh_mColors_aig_29567bba180e4e84(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4D * > > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiColor4D * > > *)aiMesh_mColors((aiMesh const *)arg1);
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


void _wrap_z_stream_next_in_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, char *_swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->next_in = arg2;
  
}


char *_wrap_z_stream_next_in_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->next_in);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_z_stream_avail_in_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->avail_in = arg2;
  
}


intgo _wrap_z_stream_avail_in_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->avail_in);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_total_in_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->total_in = arg2;
  
}


long long _wrap_z_stream_total_in_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->total_in);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_next_out_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, char *_swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->next_out = arg2;
  
}


char *_wrap_z_stream_next_out_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->next_out);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_z_stream_avail_out_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->avail_out = arg2;
  
}


intgo _wrap_z_stream_avail_out_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->avail_out);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_total_out_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->total_out = arg2;
  
}


long long _wrap_z_stream_total_out_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->total_out);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_msg_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, _gostring_ _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->msg;
    if (arg2) {
      arg1->msg = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->msg, (const char *)arg2);
    } else {
      arg1->msg = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_z_stream_msg_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (char *) ((arg1)->msg);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_z_stream_state_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, internal_state *_swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  internal_state *arg2 = (internal_state *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(internal_state **)&_swig_go_1; 
  
  if (arg1) (arg1)->state = arg2;
  
}


internal_state *_wrap_z_stream_state_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  internal_state *result = 0 ;
  internal_state *_swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (internal_state *) ((arg1)->state);
  *(internal_state **)&_swig_go_result = (internal_state *)result; 
  return _swig_go_result;
}


void _wrap_z_stream_zalloc_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, void* _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  alloc_func arg2 = (alloc_func) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(alloc_func *)&_swig_go_1; 
  
  if (arg1) (arg1)->zalloc = arg2;
  
}


void* _wrap_z_stream_zalloc_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  alloc_func result;
  void* _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (alloc_func) ((arg1)->zalloc);
  *(alloc_func *)&_swig_go_result = (alloc_func)result; 
  return _swig_go_result;
}


void _wrap_z_stream_zfree_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, void* _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  free_func arg2 = (free_func) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(free_func *)&_swig_go_1; 
  
  if (arg1) (arg1)->zfree = arg2;
  
}


void* _wrap_z_stream_zfree_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  free_func result;
  void* _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (free_func) ((arg1)->zfree);
  *(free_func *)&_swig_go_result = (free_func)result; 
  return _swig_go_result;
}


void _wrap_z_stream_opaque_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, voidpf _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  voidpf arg2 = (voidpf) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(voidpf *)&_swig_go_1; 
  
  if (arg1) (arg1)->opaque = arg2;
  
}


voidpf _wrap_z_stream_opaque_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  voidpf result;
  voidpf _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (voidpf) ((arg1)->opaque);
  *(voidpf *)&_swig_go_result = (voidpf)result; 
  return _swig_go_result;
}


void _wrap_z_stream_data_type_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  int arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->data_type = arg2;
  
}


intgo _wrap_z_stream_data_type_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->data_type);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_adler_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->adler = arg2;
  
}


long long _wrap_z_stream_adler_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->adler);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_reserved_set_aig_29567bba180e4e84(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->reserved = arg2;
  
}


long long _wrap_z_stream_reserved_get_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->reserved);
  _swig_go_result = result; 
  return _swig_go_result;
}


z_stream_s *_wrap_new_z_stream_aig_29567bba180e4e84() {
  z_stream_s *result = 0 ;
  z_stream_s *_swig_go_result;
  
  
  result = (z_stream_s *)new z_stream_s();
  *(z_stream_s **)&_swig_go_result = (z_stream_s *)result; 
  return _swig_go_result;
}


void _wrap_delete_z_stream_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_gz_header_text_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->text = arg2;
  
}


intgo _wrap_gz_header_text_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->text);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_time_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, long long _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->time = arg2;
  
}


long long _wrap_gz_header_time_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->time);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_xflags_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->xflags = arg2;
  
}


intgo _wrap_gz_header_xflags_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->xflags);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_os_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->os = arg2;
  
}


intgo _wrap_gz_header_os_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->os);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_extra_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, char *_swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->extra = arg2;
  
}


char *_wrap_gz_header_extra_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->extra);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_gz_header_extra_len_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->extra_len = arg2;
  
}


intgo _wrap_gz_header_extra_len_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->extra_len);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_extra_max_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->extra_max = arg2;
  
}


intgo _wrap_gz_header_extra_max_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->extra_max);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_name_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, char *_swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->name = arg2;
  
}


char *_wrap_gz_header_name_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->name);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_gz_header_name_max_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->name_max = arg2;
  
}


intgo _wrap_gz_header_name_max_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->name_max);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_comment_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, char *_swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->comment = arg2;
  
}


char *_wrap_gz_header_comment_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->comment);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_gz_header_comm_max_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->comm_max = arg2;
  
}


intgo _wrap_gz_header_comm_max_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->comm_max);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_hcrc_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->hcrc = arg2;
  
}


intgo _wrap_gz_header_hcrc_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->hcrc);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_done_set_aig_29567bba180e4e84(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->done = arg2;
  
}


intgo _wrap_gz_header_done_get_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->done);
  _swig_go_result = result; 
  return _swig_go_result;
}


gz_header_s *_wrap_new_gz_header_aig_29567bba180e4e84() {
  gz_header_s *result = 0 ;
  gz_header_s *_swig_go_result;
  
  
  result = (gz_header_s *)new gz_header_s();
  *(gz_header_s **)&_swig_go_result = (gz_header_s *)result; 
  return _swig_go_result;
}


void _wrap_delete_gz_header_aig_29567bba180e4e84(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_Z_ERRNO_aig_29567bba180e4e84() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-1));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_STREAM_ERROR_aig_29567bba180e4e84() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-2));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_DATA_ERROR_aig_29567bba180e4e84() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-3));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_MEM_ERROR_aig_29567bba180e4e84() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-4));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_BUF_ERROR_aig_29567bba180e4e84() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-5));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_VERSION_ERROR_aig_29567bba180e4e84() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-6));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_DEFAULT_COMPRESSION_aig_29567bba180e4e84() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-1));
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_zlibVersion_aig_29567bba180e4e84() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (char *)zlibVersion();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_deflate_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)deflate(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateEnd_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)deflateEnd(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflate_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)inflate(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateEnd_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateEnd(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateSetDictionary_aig_29567bba180e4e84(z_stream_s *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (uInt)_swig_go_2; 
  
  result = (int)deflateSetDictionary(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateGetDictionary_aig_29567bba180e4e84(z_stream_s *_swig_go_0, char *_swig_go_1, intgo *_swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt *arg3 = (uInt *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = *(uInt **)&_swig_go_2; 
  
  result = (int)deflateGetDictionary(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateCopy_aig_29567bba180e4e84(z_stream_s *_swig_go_0, z_stream_s *_swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  z_streamp arg2 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(z_streamp *)&_swig_go_1; 
  
  result = (int)deflateCopy(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateReset_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)deflateReset(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateParams_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)deflateParams(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateTune_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  result = (int)deflateTune(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_deflateBound_aig_29567bba180e4e84(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  uLong arg2 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  result = (uLong)deflateBound(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflatePending_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(unsigned int **)&_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  
  result = (int)deflatePending(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflatePrime_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)deflatePrime(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateSetHeader_aig_29567bba180e4e84(z_stream_s *_swig_go_0, gz_header_s *_swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  gz_headerp arg2 = (gz_headerp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(gz_headerp *)&_swig_go_1; 
  
  result = (int)deflateSetHeader(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateSetDictionary_aig_29567bba180e4e84(z_stream_s *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (uInt)_swig_go_2; 
  
  result = (int)inflateSetDictionary(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateGetDictionary_aig_29567bba180e4e84(z_stream_s *_swig_go_0, char *_swig_go_1, intgo *_swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt *arg3 = (uInt *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = *(uInt **)&_swig_go_2; 
  
  result = (int)inflateGetDictionary(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateSync_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateSync(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateCopy_aig_29567bba180e4e84(z_stream_s *_swig_go_0, z_stream_s *_swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  z_streamp arg2 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(z_streamp *)&_swig_go_1; 
  
  result = (int)inflateCopy(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateReset_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateReset(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateReset2_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)inflateReset2(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflatePrime_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)inflatePrime(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_inflateMark_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (long)inflateMark(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateGetHeader_aig_29567bba180e4e84(z_stream_s *_swig_go_0, gz_header_s *_swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  gz_headerp arg2 = (gz_headerp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(gz_headerp *)&_swig_go_1; 
  
  result = (int)inflateGetHeader(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateBack_aig_29567bba180e4e84(z_stream_s *_swig_go_0, void* _swig_go_1, void *_swig_go_2, void* _swig_go_3, void *_swig_go_4) {
  z_streamp arg1 = (z_streamp) 0 ;
  in_func arg2 = (in_func) 0 ;
  void *arg3 = (void *) 0 ;
  out_func arg4 = (out_func) 0 ;
  void *arg5 = (void *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(in_func *)&_swig_go_1; 
  arg3 = *(void **)&_swig_go_2; 
  arg4 = *(out_func *)&_swig_go_3; 
  arg5 = *(void **)&_swig_go_4; 
  
  result = (int)inflateBack(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateBackEnd_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateBackEnd(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_zlibCompileFlags_aig_29567bba180e4e84() {
  uLong result;
  long long _swig_go_result;
  
  
  result = (uLong)zlibCompileFlags();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_compress_aig_29567bba180e4e84(char *_swig_go_0, long long *_swig_go_1, char *_swig_go_2, long long _swig_go_3) {
  Bytef *arg1 = (Bytef *) 0 ;
  uLongf *arg2 = (uLongf *) 0 ;
  Bytef *arg3 = (Bytef *) 0 ;
  uLong arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bytef **)&_swig_go_0; 
  arg2 = *(uLongf **)&_swig_go_1; 
  arg3 = *(Bytef **)&_swig_go_2; 
  arg4 = (uLong)_swig_go_3; 
  
  result = (int)compress(arg1,arg2,(unsigned char const *)arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_compress2_aig_29567bba180e4e84(char *_swig_go_0, long long *_swig_go_1, char *_swig_go_2, long long _swig_go_3, intgo _swig_go_4) {
  Bytef *arg1 = (Bytef *) 0 ;
  uLongf *arg2 = (uLongf *) 0 ;
  Bytef *arg3 = (Bytef *) 0 ;
  uLong arg4 ;
  int arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bytef **)&_swig_go_0; 
  arg2 = *(uLongf **)&_swig_go_1; 
  arg3 = *(Bytef **)&_swig_go_2; 
  arg4 = (uLong)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  result = (int)compress2(arg1,arg2,(unsigned char const *)arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_compressBound_aig_29567bba180e4e84(long long _swig_go_0) {
  uLong arg1 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  
  result = (uLong)compressBound(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_uncompress_aig_29567bba180e4e84(char *_swig_go_0, long long *_swig_go_1, char *_swig_go_2, long long _swig_go_3) {
  Bytef *arg1 = (Bytef *) 0 ;
  uLongf *arg2 = (uLongf *) 0 ;
  Bytef *arg3 = (Bytef *) 0 ;
  uLong arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bytef **)&_swig_go_0; 
  arg2 = *(uLongf **)&_swig_go_1; 
  arg3 = *(Bytef **)&_swig_go_2; 
  arg4 = (uLong)_swig_go_3; 
  
  result = (int)uncompress(arg1,arg2,(unsigned char const *)arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_uncompress2_aig_29567bba180e4e84(char *_swig_go_0, long long *_swig_go_1, char *_swig_go_2, long long *_swig_go_3) {
  Bytef *arg1 = (Bytef *) 0 ;
  uLongf *arg2 = (uLongf *) 0 ;
  Bytef *arg3 = (Bytef *) 0 ;
  uLong *arg4 = (uLong *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bytef **)&_swig_go_0; 
  arg2 = *(uLongf **)&_swig_go_1; 
  arg3 = *(Bytef **)&_swig_go_2; 
  arg4 = *(uLong **)&_swig_go_3; 
  
  result = (int)uncompress2(arg1,arg2,(unsigned char const *)arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


gzFile_s *_wrap_gzdopen_aig_29567bba180e4e84(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  gzFile result;
  gzFile_s *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (gzFile)gzdopen(arg1,(char const *)arg2);
  *(gzFile *)&_swig_go_result = (gzFile)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_gzbuffer_aig_29567bba180e4e84(gzFile_s *_swig_go_0, intgo _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  unsigned int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (int)gzbuffer(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzsetparams_aig_29567bba180e4e84(gzFile_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)gzsetparams(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzread_aig_29567bba180e4e84(gzFile_s *_swig_go_0, voidp _swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  voidp arg2 = (voidp) 0 ;
  unsigned int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = *(voidp *)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  result = (int)gzread(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_gzfread_aig_29567bba180e4e84(voidp _swig_go_0, long long _swig_go_1, long long _swig_go_2, gzFile_s *_swig_go_3) {
  voidp arg1 = (voidp) 0 ;
  z_size_t arg2 ;
  z_size_t arg3 ;
  gzFile arg4 = (gzFile) 0 ;
  z_size_t result;
  long long _swig_go_result;
  
  arg1 = *(voidp *)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = *(gzFile *)&_swig_go_3; 
  
  result = gzfread(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzwrite_aig_29567bba180e4e84(gzFile_s *_swig_go_0, voidpc _swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  voidpc arg2 = (voidpc) 0 ;
  unsigned int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = *(voidpc *)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  result = (int)gzwrite(arg1,(void const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_gzfwrite_aig_29567bba180e4e84(voidpc _swig_go_0, long long _swig_go_1, long long _swig_go_2, gzFile_s *_swig_go_3) {
  voidpc arg1 = (voidpc) 0 ;
  z_size_t arg2 ;
  z_size_t arg3 ;
  gzFile arg4 = (gzFile) 0 ;
  z_size_t result;
  long long _swig_go_result;
  
  arg1 = *(voidpc *)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = *(gzFile *)&_swig_go_3; 
  
  result = gzfwrite((void const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzprintf_aig_29567bba180e4e84(gzFile_s *_swig_go_0, _gostring_ _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (int)gzprintf(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_gzputs_aig_29567bba180e4e84(gzFile_s *_swig_go_0, _gostring_ _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (int)gzputs(arg1,(char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


_gostring_ _wrap_gzgets_aig_29567bba180e4e84(gzFile_s *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  result = (char *)gzgets(arg1,arg2,arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_gzputc_aig_29567bba180e4e84(gzFile_s *_swig_go_0, intgo _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)gzputc(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzgetc_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzgetc(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzungetc_aig_29567bba180e4e84(intgo _swig_go_0, gzFile_s *_swig_go_1) {
  int arg1 ;
  gzFile arg2 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(gzFile *)&_swig_go_1; 
  
  result = (int)gzungetc(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzflush_aig_29567bba180e4e84(gzFile_s *_swig_go_0, intgo _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)gzflush(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzrewind_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzrewind(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzeof_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzeof(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzdirect_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzdirect(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzclose_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzclose(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzclose_r_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzclose_r(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzclose_w_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzclose_w(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_gzerror_aig_29567bba180e4e84(gzFile_s *_swig_go_0, intgo *_swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  int *arg2 = (int *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = *(int **)&_swig_go_1; 
  
  result = (char *)gzerror(arg1,arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_gzclearerr_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  gzclearerr(arg1);
  
}


long long _wrap_adler32_aig_29567bba180e4e84(long long _swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  uLong arg1 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt arg3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (uInt)_swig_go_2; 
  
  result = (uLong)adler32(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_adler32_z_aig_29567bba180e4e84(long long _swig_go_0, char *_swig_go_1, long long _swig_go_2) {
  uLong arg1 ;
  Bytef *arg2 = (Bytef *) 0 ;
  z_size_t arg3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  
  result = (uLong)adler32_z(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_crc32_aig_29567bba180e4e84(long long _swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  uLong arg1 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt arg3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (uInt)_swig_go_2; 
  
  result = (uLong)crc32(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_crc32_z_aig_29567bba180e4e84(long long _swig_go_0, char *_swig_go_1, long long _swig_go_2) {
  uLong arg1 ;
  Bytef *arg2 = (Bytef *) 0 ;
  z_size_t arg3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  
  result = (uLong)crc32_z(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateInit__aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (int)_swig_go_3; 
  
  result = (int)deflateInit_(arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_inflateInit__aig_29567bba180e4e84(z_stream_s *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  result = (int)inflateInit_(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_deflateInit2__aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, _gostring_ _swig_go_6, intgo _swig_go_7) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  
  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';
  
  arg8 = (int)_swig_go_7; 
  
  result = (int)deflateInit2_(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  _swig_go_result = result; 
  free(arg7); 
  return _swig_go_result;
}


intgo _wrap_inflateInit2__aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (int)_swig_go_3; 
  
  result = (int)inflateInit2_(arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_inflateBackInit__aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1, char *_swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(unsigned char **)&_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (int)_swig_go_4; 
  
  result = (int)inflateBackInit_(arg1,arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = result; 
  free(arg4); 
  return _swig_go_result;
}


void _wrap_gzFile_s_have_set_aig_29567bba180e4e84(gzFile_s *_swig_go_0, intgo _swig_go_1) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->have = arg2;
  
}


intgo _wrap_gzFile_s_have_get_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->have);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gzFile_s_next_set_aig_29567bba180e4e84(gzFile_s *_swig_go_0, char *_swig_go_1) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  
  if (arg1) (arg1)->next = arg2;
  
}


char *_wrap_gzFile_s_next_get_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  unsigned char *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  result = (unsigned char *) ((arg1)->next);
  *(unsigned char **)&_swig_go_result = (unsigned char *)result; 
  return _swig_go_result;
}


void _wrap_gzFile_s_pos_set_aig_29567bba180e4e84(gzFile_s *_swig_go_0, off_t *_swig_go_1) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  off_t arg2 ;
  off_t *argp2 ;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  argp2 = (off_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null off_t");
  }
  arg2 = (off_t)*argp2;
  
  
  if (arg1) (arg1)->pos = arg2;
  
}


off_t *_wrap_gzFile_s_pos_get_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  off_t result;
  off_t *_swig_go_result;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  result =  ((arg1)->pos);
  *(off_t **)&_swig_go_result = new off_t(result); 
  return _swig_go_result;
}


gzFile_s *_wrap_new_gzFile_s_aig_29567bba180e4e84() {
  gzFile_s *result = 0 ;
  gzFile_s *_swig_go_result;
  
  
  result = (gzFile_s *)new gzFile_s();
  *(gzFile_s **)&_swig_go_result = (gzFile_s *)result; 
  return _swig_go_result;
}


void _wrap_delete_gzFile_s_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_gzgetc__aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzgetc_(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


gzFile_s *_wrap_gzopen_aig_29567bba180e4e84(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  gzFile result;
  gzFile_s *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (gzFile)gzopen((char const *)arg1,(char const *)arg2);
  *(gzFile *)&_swig_go_result = (gzFile)result; 
  free(arg1); 
  free(arg2); 
  return _swig_go_result;
}


off_t *_wrap_gzseek_aig_29567bba180e4e84(gzFile_s *_swig_go_0, off_t *_swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  off_t arg2 ;
  int arg3 ;
  off_t *argp2 ;
  off_t result;
  off_t *_swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  argp2 = (off_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null off_t");
  }
  arg2 = (off_t)*argp2;
  
  arg3 = (int)_swig_go_2; 
  
  result = gzseek(arg1,arg2,arg3);
  *(off_t **)&_swig_go_result = new off_t(result); 
  return _swig_go_result;
}


off_t *_wrap_gztell_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  off_t result;
  off_t *_swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = gztell(arg1);
  *(off_t **)&_swig_go_result = new off_t(result); 
  return _swig_go_result;
}


off_t *_wrap_gzoffset_aig_29567bba180e4e84(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  off_t result;
  off_t *_swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = gzoffset(arg1);
  *(off_t **)&_swig_go_result = new off_t(result); 
  return _swig_go_result;
}


long long _wrap_adler32_combine_aig_29567bba180e4e84(long long _swig_go_0, long long _swig_go_1, off_t *_swig_go_2) {
  uLong arg1 ;
  uLong arg2 ;
  off_t arg3 ;
  off_t *argp3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  argp3 = (off_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null off_t");
  }
  arg3 = (off_t)*argp3;
  
  
  result = (uLong)adler32_combine(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_crc32_combine_aig_29567bba180e4e84(long long _swig_go_0, long long _swig_go_1, off_t *_swig_go_2) {
  uLong arg1 ;
  uLong arg2 ;
  off_t arg3 ;
  off_t *argp3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  argp3 = (off_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null off_t");
  }
  arg3 = (off_t)*argp3;
  
  
  result = (uLong)crc32_combine(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_zError_aig_29567bba180e4e84(intgo _swig_go_0) {
  int arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (char *)zError(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_inflateSyncPoint_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateSyncPoint(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long *_wrap_get_crc_table_aig_29567bba180e4e84() {
  z_crc_t *result = 0 ;
  long long *_swig_go_result;
  
  
  result = (z_crc_t *)get_crc_table();
  *(z_crc_t **)&_swig_go_result = (z_crc_t *)result; 
  return _swig_go_result;
}


intgo _wrap_inflateUndermine_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)inflateUndermine(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateValidate_aig_29567bba180e4e84(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)inflateValidate(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_inflateCodesUsed_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  unsigned long result;
  long long _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (unsigned long)inflateCodesUsed(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateResetKeep_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateResetKeep(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateResetKeep_aig_29567bba180e4e84(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)deflateResetKeep(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzvprintf_aig_29567bba180e4e84(gzFile_s *_swig_go_0, _gostring_ _swig_go_1, va_list *_swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (va_list *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg3 = (va_list)*argp3;
  
  
  result = (int)gzvprintf(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_ETF_ASCII_aig_29567bba180e4e84() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_ASCII;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF8_aig_29567bba180e4e84() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF8;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF16_BE_aig_29567bba180e4e84() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF16_BE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF16_LE_aig_29567bba180e4e84() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF16_LE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF32_BE_aig_29567bba180e4e84() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF32_BE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF32_LE_aig_29567bba180e4e84() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF32_LE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_NONE_aig_29567bba180e4e84() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_NONE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_ELEMENT_aig_29567bba180e4e84() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_ELEMENT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_ELEMENT_END_aig_29567bba180e4e84() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_ELEMENT_END;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_TEXT_aig_29567bba180e4e84() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_TEXT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_COMMENT_aig_29567bba180e4e84() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_COMMENT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_CDATA_aig_29567bba180e4e84() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_CDATA;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_UNKNOWN_aig_29567bba180e4e84() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_UNKNOWN;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_delete_IFileReadCallBack_aig_29567bba180e4e84(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_IFileReadCallBack_read_aig_29567bba180e4e84(irr::io::IFileReadCallBack *_swig_go_0, void *_swig_go_1, intgo _swig_go_2) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)(arg1)->read(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_IFileReadCallBack_getSize_aig_29567bba180e4e84(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  result = (int)(arg1)->getSize();
  _swig_go_result = result; 
  return _swig_go_result;
}


irr::io::IXMLBase *_wrap_new_IXMLBase_aig_29567bba180e4e84() {
  irr::io::IXMLBase *result = 0 ;
  irr::io::IXMLBase *_swig_go_result;
  
  
  result = (irr::io::IXMLBase *)new irr::io::IXMLBase();
  *(irr::io::IXMLBase **)&_swig_go_result = (irr::io::IXMLBase *)result; 
  return _swig_go_result;
}


void _wrap_delete_IXMLBase_aig_29567bba180e4e84(irr::io::IXMLBase *_swig_go_0) {
  irr::io::IXMLBase *arg1 = (irr::io::IXMLBase *) 0 ;
  
  arg1 = *(irr::io::IXMLBase **)&_swig_go_0; 
  
  delete arg1;
  
}


irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_wrap_createIrrXMLReader__SWIG_0_aig_29567bba180e4e84(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  irr::io::IrrXMLReader *result = 0 ;
  irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (irr::io::IrrXMLReader *)irr::io::createIrrXMLReader((char const *)arg1);
  *(irr::io::IrrXMLReader **)&_swig_go_result = (irr::io::IrrXMLReader *)result; 
  free(arg1); 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_wrap_createIrrXMLReader__SWIG_1_aig_29567bba180e4e84(FILE *_swig_go_0) {
  FILE *arg1 = (FILE *) 0 ;
  irr::io::IrrXMLReader *result = 0 ;
  irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(FILE **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReader *)irr::io::createIrrXMLReader(arg1);
  *(irr::io::IrrXMLReader **)&_swig_go_result = (irr::io::IrrXMLReader *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_wrap_createIrrXMLReader__SWIG_2_aig_29567bba180e4e84(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  irr::io::IrrXMLReader *result = 0 ;
  irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReader *)irr::io::createIrrXMLReader(arg1);
  *(irr::io::IrrXMLReader **)&_swig_go_result = (irr::io::IrrXMLReader *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF16__SWIG_0_aig_29567bba180e4e84(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  irr::io::IrrXMLReaderUTF16 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (irr::io::IrrXMLReaderUTF16 *)irr::io::createIrrXMLReaderUTF16((char const *)arg1);
  *(irr::io::IrrXMLReaderUTF16 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF16 *)result; 
  free(arg1); 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF16__SWIG_1_aig_29567bba180e4e84(FILE *_swig_go_0) {
  FILE *arg1 = (FILE *) 0 ;
  irr::io::IrrXMLReaderUTF16 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(FILE **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReaderUTF16 *)irr::io::createIrrXMLReaderUTF16(arg1);
  *(irr::io::IrrXMLReaderUTF16 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF16 *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF16__SWIG_2_aig_29567bba180e4e84(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  irr::io::IrrXMLReaderUTF16 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReaderUTF16 *)irr::io::createIrrXMLReaderUTF16(arg1);
  *(irr::io::IrrXMLReaderUTF16 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF16 *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF32__SWIG_0_aig_29567bba180e4e84(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  irr::io::IrrXMLReaderUTF32 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (irr::io::IrrXMLReaderUTF32 *)irr::io::createIrrXMLReaderUTF32((char const *)arg1);
  *(irr::io::IrrXMLReaderUTF32 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF32 *)result; 
  free(arg1); 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF32__SWIG_1_aig_29567bba180e4e84(FILE *_swig_go_0) {
  FILE *arg1 = (FILE *) 0 ;
  irr::io::IrrXMLReaderUTF32 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(FILE **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReaderUTF32 *)irr::io::createIrrXMLReaderUTF32(arg1);
  *(irr::io::IrrXMLReaderUTF32 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF32 *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF32__SWIG_2_aig_29567bba180e4e84(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  irr::io::IrrXMLReaderUTF32 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReaderUTF32 *)irr::io::createIrrXMLReaderUTF32(arg1);
  *(irr::io::IrrXMLReaderUTF32 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF32 *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_new_UintVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_new_UintVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_new_UintVector__SWIG_2_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


long long _wrap_UintVector_size_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  result = ((std::vector< unsigned int > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_UintVector_capacity_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_UintVector_reserve_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0, long long _swig_go_1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_UintVector_isEmpty_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_UintVector_clear_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_UintVector_add_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  arg2 = (std::vector< unsigned int >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
  
}


intgo _wrap_UintVector_get_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  intgo _swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (unsigned int)*result; 
  return _swig_go_result;
}


void _wrap_UintVector_set_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< unsigned int >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_UintVector_aig_29567bba180e4e84(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiAnimation * > *_wrap_new_aiAnimationVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiAnimation * > *result = 0 ;
  std::vector< aiAnimation * > *_swig_go_result;
  
  
  result = (std::vector< aiAnimation * > *)new std::vector< aiAnimation * >();
  *(std::vector< aiAnimation * > **)&_swig_go_result = (std::vector< aiAnimation * > *)result; 
  return _swig_go_result;
}


std::vector< aiAnimation * > *_wrap_new_aiAnimationVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiAnimation * >::size_type arg1 ;
  std::vector< aiAnimation * > *result = 0 ;
  std::vector< aiAnimation * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiAnimation * > *)new std::vector< aiAnimation * >(arg1);
  *(std::vector< aiAnimation * > **)&_swig_go_result = (std::vector< aiAnimation * > *)result; 
  return _swig_go_result;
}


std::vector< aiAnimation * > *_wrap_new_aiAnimationVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = 0 ;
  std::vector< aiAnimation * > *result = 0 ;
  std::vector< aiAnimation * > *_swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  result = (std::vector< aiAnimation * > *)new std::vector< aiAnimation * >((std::vector< aiAnimation * > const &)*arg1);
  *(std::vector< aiAnimation * > **)&_swig_go_result = (std::vector< aiAnimation * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiAnimationVector_size_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  std::vector< aiAnimation * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  result = ((std::vector< aiAnimation * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiAnimationVector_capacity_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  std::vector< aiAnimation * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  result = ((std::vector< aiAnimation * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimationVector_reserve_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  std::vector< aiAnimation * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiAnimationVector_isEmpty_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiAnimation * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimationVector_clear_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiAnimationVector_add_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0, aiAnimation **_swig_go_1) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  std::vector< aiAnimation * >::value_type *arg2 = 0 ;
  std::vector< aiAnimation * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiAnimation * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiAnimation * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiAnimation * >::value_type const &)*arg2);
  
}


aiAnimation **_wrap_aiAnimationVector_get_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  int arg2 ;
  std::vector< aiAnimation * >::value_type *result = 0 ;
  aiAnimation **_swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiAnimation * >::value_type *) &std_vector_Sl_aiAnimation_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiAnimation * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiAnimationVector_set_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0, intgo _swig_go_1, aiAnimation **_swig_go_2) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  int arg2 ;
  std::vector< aiAnimation * >::value_type *arg3 = 0 ;
  std::vector< aiAnimation * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiAnimation * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiAnimation * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiAnimation_Sm__Sg__set(arg1,arg2,(aiAnimation *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiAnimationVector_aig_29567bba180e4e84(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiAnimMesh * > *_wrap_new_aiAnimMeshVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiAnimMesh * > *result = 0 ;
  std::vector< aiAnimMesh * > *_swig_go_result;
  
  
  result = (std::vector< aiAnimMesh * > *)new std::vector< aiAnimMesh * >();
  *(std::vector< aiAnimMesh * > **)&_swig_go_result = (std::vector< aiAnimMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiAnimMesh * > *_wrap_new_aiAnimMeshVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiAnimMesh * >::size_type arg1 ;
  std::vector< aiAnimMesh * > *result = 0 ;
  std::vector< aiAnimMesh * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiAnimMesh * > *)new std::vector< aiAnimMesh * >(arg1);
  *(std::vector< aiAnimMesh * > **)&_swig_go_result = (std::vector< aiAnimMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiAnimMesh * > *_wrap_new_aiAnimMeshVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = 0 ;
  std::vector< aiAnimMesh * > *result = 0 ;
  std::vector< aiAnimMesh * > *_swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  result = (std::vector< aiAnimMesh * > *)new std::vector< aiAnimMesh * >((std::vector< aiAnimMesh * > const &)*arg1);
  *(std::vector< aiAnimMesh * > **)&_swig_go_result = (std::vector< aiAnimMesh * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiAnimMeshVector_size_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  std::vector< aiAnimMesh * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  result = ((std::vector< aiAnimMesh * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiAnimMeshVector_capacity_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  std::vector< aiAnimMesh * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  result = ((std::vector< aiAnimMesh * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimMeshVector_reserve_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  std::vector< aiAnimMesh * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiAnimMeshVector_isEmpty_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiAnimMesh * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimMeshVector_clear_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiAnimMeshVector_add_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0, aiAnimMesh **_swig_go_1) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  std::vector< aiAnimMesh * >::value_type *arg2 = 0 ;
  std::vector< aiAnimMesh * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiAnimMesh * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiAnimMesh * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiAnimMesh * >::value_type const &)*arg2);
  
}


aiAnimMesh **_wrap_aiAnimMeshVector_get_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  int arg2 ;
  std::vector< aiAnimMesh * >::value_type *result = 0 ;
  aiAnimMesh **_swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiAnimMesh * >::value_type *) &std_vector_Sl_aiAnimMesh_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiAnimMesh * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiAnimMeshVector_set_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0, intgo _swig_go_1, aiAnimMesh **_swig_go_2) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  int arg2 ;
  std::vector< aiAnimMesh * >::value_type *arg3 = 0 ;
  std::vector< aiAnimMesh * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiAnimMesh * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiAnimMesh * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiAnimMesh_Sm__Sg__set(arg1,arg2,(aiAnimMesh *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiAnimMeshVector_aig_29567bba180e4e84(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiBone * > *_wrap_new_aiBonesVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiBone * > *result = 0 ;
  std::vector< aiBone * > *_swig_go_result;
  
  
  result = (std::vector< aiBone * > *)new std::vector< aiBone * >();
  *(std::vector< aiBone * > **)&_swig_go_result = (std::vector< aiBone * > *)result; 
  return _swig_go_result;
}


std::vector< aiBone * > *_wrap_new_aiBonesVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiBone * >::size_type arg1 ;
  std::vector< aiBone * > *result = 0 ;
  std::vector< aiBone * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiBone * > *)new std::vector< aiBone * >(arg1);
  *(std::vector< aiBone * > **)&_swig_go_result = (std::vector< aiBone * > *)result; 
  return _swig_go_result;
}


std::vector< aiBone * > *_wrap_new_aiBonesVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = 0 ;
  std::vector< aiBone * > *result = 0 ;
  std::vector< aiBone * > *_swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  result = (std::vector< aiBone * > *)new std::vector< aiBone * >((std::vector< aiBone * > const &)*arg1);
  *(std::vector< aiBone * > **)&_swig_go_result = (std::vector< aiBone * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiBonesVector_size_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  std::vector< aiBone * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  result = ((std::vector< aiBone * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiBonesVector_capacity_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  std::vector< aiBone * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  result = ((std::vector< aiBone * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiBonesVector_reserve_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  std::vector< aiBone * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiBonesVector_isEmpty_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiBone * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiBonesVector_clear_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiBonesVector_add_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0, aiBone **_swig_go_1) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  std::vector< aiBone * >::value_type *arg2 = 0 ;
  std::vector< aiBone * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiBone * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiBone * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiBone * >::value_type const &)*arg2);
  
}


aiBone **_wrap_aiBonesVector_get_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  int arg2 ;
  std::vector< aiBone * >::value_type *result = 0 ;
  aiBone **_swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiBone * >::value_type *) &std_vector_Sl_aiBone_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiBone * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiBonesVector_set_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0, intgo _swig_go_1, aiBone **_swig_go_2) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  int arg2 ;
  std::vector< aiBone * >::value_type *arg3 = 0 ;
  std::vector< aiBone * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiBone * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiBone * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiBone_Sm__Sg__set(arg1,arg2,(aiBone *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiBonesVector_aig_29567bba180e4e84(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiCamera * > *_wrap_new_aiCameraVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiCamera * > *result = 0 ;
  std::vector< aiCamera * > *_swig_go_result;
  
  
  result = (std::vector< aiCamera * > *)new std::vector< aiCamera * >();
  *(std::vector< aiCamera * > **)&_swig_go_result = (std::vector< aiCamera * > *)result; 
  return _swig_go_result;
}


std::vector< aiCamera * > *_wrap_new_aiCameraVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiCamera * >::size_type arg1 ;
  std::vector< aiCamera * > *result = 0 ;
  std::vector< aiCamera * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiCamera * > *)new std::vector< aiCamera * >(arg1);
  *(std::vector< aiCamera * > **)&_swig_go_result = (std::vector< aiCamera * > *)result; 
  return _swig_go_result;
}


std::vector< aiCamera * > *_wrap_new_aiCameraVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = 0 ;
  std::vector< aiCamera * > *result = 0 ;
  std::vector< aiCamera * > *_swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  result = (std::vector< aiCamera * > *)new std::vector< aiCamera * >((std::vector< aiCamera * > const &)*arg1);
  *(std::vector< aiCamera * > **)&_swig_go_result = (std::vector< aiCamera * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiCameraVector_size_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  std::vector< aiCamera * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  result = ((std::vector< aiCamera * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiCameraVector_capacity_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  std::vector< aiCamera * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  result = ((std::vector< aiCamera * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiCameraVector_reserve_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  std::vector< aiCamera * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiCameraVector_isEmpty_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiCamera * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiCameraVector_clear_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiCameraVector_add_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0, aiCamera **_swig_go_1) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  std::vector< aiCamera * >::value_type *arg2 = 0 ;
  std::vector< aiCamera * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiCamera * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiCamera * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiCamera * >::value_type const &)*arg2);
  
}


aiCamera **_wrap_aiCameraVector_get_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  int arg2 ;
  std::vector< aiCamera * >::value_type *result = 0 ;
  aiCamera **_swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiCamera * >::value_type *) &std_vector_Sl_aiCamera_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiCamera * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiCameraVector_set_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0, intgo _swig_go_1, aiCamera **_swig_go_2) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  int arg2 ;
  std::vector< aiCamera * >::value_type *arg3 = 0 ;
  std::vector< aiCamera * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiCamera * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiCamera * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiCamera_Sm__Sg__set(arg1,arg2,(aiCamera *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiCameraVector_aig_29567bba180e4e84(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiColor4D * > *_wrap_new_aiColor4DVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiColor4D * > *result = 0 ;
  std::vector< aiColor4D * > *_swig_go_result;
  
  
  result = (std::vector< aiColor4D * > *)new std::vector< aiColor4D * >();
  *(std::vector< aiColor4D * > **)&_swig_go_result = (std::vector< aiColor4D * > *)result; 
  return _swig_go_result;
}


std::vector< aiColor4D * > *_wrap_new_aiColor4DVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiColor4D * >::size_type arg1 ;
  std::vector< aiColor4D * > *result = 0 ;
  std::vector< aiColor4D * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiColor4D * > *)new std::vector< aiColor4D * >(arg1);
  *(std::vector< aiColor4D * > **)&_swig_go_result = (std::vector< aiColor4D * > *)result; 
  return _swig_go_result;
}


std::vector< aiColor4D * > *_wrap_new_aiColor4DVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = 0 ;
  std::vector< aiColor4D * > *result = 0 ;
  std::vector< aiColor4D * > *_swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  result = (std::vector< aiColor4D * > *)new std::vector< aiColor4D * >((std::vector< aiColor4D * > const &)*arg1);
  *(std::vector< aiColor4D * > **)&_swig_go_result = (std::vector< aiColor4D * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiColor4DVector_size_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  std::vector< aiColor4D * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  result = ((std::vector< aiColor4D * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiColor4DVector_capacity_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  std::vector< aiColor4D * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  result = ((std::vector< aiColor4D * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVector_reserve_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  std::vector< aiColor4D * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiColor4DVector_isEmpty_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiColor4D * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVector_clear_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiColor4DVector_add_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0, aiColor4D **_swig_go_1) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  std::vector< aiColor4D * >::value_type *arg2 = 0 ;
  std::vector< aiColor4D * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiColor4D * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiColor4D * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiColor4D * >::value_type const &)*arg2);
  
}


aiColor4D **_wrap_aiColor4DVector_get_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  int arg2 ;
  std::vector< aiColor4D * >::value_type *result = 0 ;
  aiColor4D **_swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiColor4D * >::value_type *) &std_vector_Sl_aiColor4D_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiColor4D * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVector_set_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0, intgo _swig_go_1, aiColor4D **_swig_go_2) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  int arg2 ;
  std::vector< aiColor4D * >::value_type *arg3 = 0 ;
  std::vector< aiColor4D * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiColor4D * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiColor4D * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiColor4D_Sm__Sg__set(arg1,arg2,(aiColor4D *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiColor4DVector_aig_29567bba180e4e84(std::vector< aiColor4D * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::vector< aiColor4D * > > *_wrap_new_aiColor4DVectorVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4D * > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< aiColor4D * > > *)new std::vector< std::vector< aiColor4D * > >();
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiColor4D * > > *_wrap_new_aiColor4DVectorVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< std::vector< aiColor4D * > >::size_type arg1 ;
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4D * > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< aiColor4D * > > *)new std::vector< std::vector< aiColor4D * > >(arg1);
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiColor4D * > > *_wrap_new_aiColor4DVectorVector__SWIG_2_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = 0 ;
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4D * > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiColor4D * > > *)new std::vector< std::vector< aiColor4D * > >((std::vector< std::vector< aiColor4D * > > const &)*arg1);
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


long long _wrap_aiColor4DVectorVector_size_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  std::vector< std::vector< aiColor4D * > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< aiColor4D * > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiColor4DVectorVector_capacity_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  std::vector< std::vector< aiColor4D * > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< aiColor4D * > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVectorVector_reserve_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  std::vector< std::vector< aiColor4D * > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiColor4DVectorVector_isEmpty_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< aiColor4D * > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVectorVector_clear_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiColor4DVectorVector_add_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0, std::vector< aiColor4D * > *_swig_go_1) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  std::vector< std::vector< aiColor4D * > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< aiColor4D * > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< aiColor4D * > >::value_type const &)*arg2);
  
}


std::vector< aiColor4D * > *_wrap_aiColor4DVectorVector_get_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< aiColor4D * > >::value_type *result = 0 ;
  std::vector< aiColor4D * > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< aiColor4D * > >::value_type *) &std_vector_Sl_std_vector_Sl_aiColor4D_Sm__Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< aiColor4D * > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVectorVector_set_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0, intgo _swig_go_1, std::vector< aiColor4D * > *_swig_go_2) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< aiColor4D * > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< aiColor4D * > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_aiColor4D_Sm__Sg__Sg__set(arg1,arg2,(std::vector< aiColor4D * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiColor4DVectorVector_aig_29567bba180e4e84(std::vector< std::vector< aiColor4D * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiFace * > *_wrap_new_aiFaceVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiFace * > *result = 0 ;
  std::vector< aiFace * > *_swig_go_result;
  
  
  result = (std::vector< aiFace * > *)new std::vector< aiFace * >();
  *(std::vector< aiFace * > **)&_swig_go_result = (std::vector< aiFace * > *)result; 
  return _swig_go_result;
}


std::vector< aiFace * > *_wrap_new_aiFaceVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiFace * >::size_type arg1 ;
  std::vector< aiFace * > *result = 0 ;
  std::vector< aiFace * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiFace * > *)new std::vector< aiFace * >(arg1);
  *(std::vector< aiFace * > **)&_swig_go_result = (std::vector< aiFace * > *)result; 
  return _swig_go_result;
}


std::vector< aiFace * > *_wrap_new_aiFaceVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = 0 ;
  std::vector< aiFace * > *result = 0 ;
  std::vector< aiFace * > *_swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  result = (std::vector< aiFace * > *)new std::vector< aiFace * >((std::vector< aiFace * > const &)*arg1);
  *(std::vector< aiFace * > **)&_swig_go_result = (std::vector< aiFace * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiFaceVector_size_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  std::vector< aiFace * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  result = ((std::vector< aiFace * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiFaceVector_capacity_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  std::vector< aiFace * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  result = ((std::vector< aiFace * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiFaceVector_reserve_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  std::vector< aiFace * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiFaceVector_isEmpty_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiFace * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiFaceVector_clear_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiFaceVector_add_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0, aiFace **_swig_go_1) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  std::vector< aiFace * >::value_type *arg2 = 0 ;
  std::vector< aiFace * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiFace * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiFace * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiFace * >::value_type const &)*arg2);
  
}


aiFace **_wrap_aiFaceVector_get_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  int arg2 ;
  std::vector< aiFace * >::value_type *result = 0 ;
  aiFace **_swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiFace * >::value_type *) &std_vector_Sl_aiFace_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiFace * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiFaceVector_set_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0, intgo _swig_go_1, aiFace **_swig_go_2) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  int arg2 ;
  std::vector< aiFace * >::value_type *arg3 = 0 ;
  std::vector< aiFace * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiFace * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiFace * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiFace_Sm__Sg__set(arg1,arg2,(aiFace *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiFaceVector_aig_29567bba180e4e84(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiLight * > *_wrap_new_aiLightVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiLight * > *result = 0 ;
  std::vector< aiLight * > *_swig_go_result;
  
  
  result = (std::vector< aiLight * > *)new std::vector< aiLight * >();
  *(std::vector< aiLight * > **)&_swig_go_result = (std::vector< aiLight * > *)result; 
  return _swig_go_result;
}


std::vector< aiLight * > *_wrap_new_aiLightVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiLight * >::size_type arg1 ;
  std::vector< aiLight * > *result = 0 ;
  std::vector< aiLight * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiLight * > *)new std::vector< aiLight * >(arg1);
  *(std::vector< aiLight * > **)&_swig_go_result = (std::vector< aiLight * > *)result; 
  return _swig_go_result;
}


std::vector< aiLight * > *_wrap_new_aiLightVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = 0 ;
  std::vector< aiLight * > *result = 0 ;
  std::vector< aiLight * > *_swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  result = (std::vector< aiLight * > *)new std::vector< aiLight * >((std::vector< aiLight * > const &)*arg1);
  *(std::vector< aiLight * > **)&_swig_go_result = (std::vector< aiLight * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiLightVector_size_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  std::vector< aiLight * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  result = ((std::vector< aiLight * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiLightVector_capacity_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  std::vector< aiLight * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  result = ((std::vector< aiLight * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLightVector_reserve_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  std::vector< aiLight * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiLightVector_isEmpty_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiLight * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLightVector_clear_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiLightVector_add_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0, aiLight **_swig_go_1) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  std::vector< aiLight * >::value_type *arg2 = 0 ;
  std::vector< aiLight * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiLight * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiLight * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiLight * >::value_type const &)*arg2);
  
}


aiLight **_wrap_aiLightVector_get_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  int arg2 ;
  std::vector< aiLight * >::value_type *result = 0 ;
  aiLight **_swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiLight * >::value_type *) &std_vector_Sl_aiLight_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiLight * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiLightVector_set_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0, intgo _swig_go_1, aiLight **_swig_go_2) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  int arg2 ;
  std::vector< aiLight * >::value_type *arg3 = 0 ;
  std::vector< aiLight * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiLight * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiLight * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiLight_Sm__Sg__set(arg1,arg2,(aiLight *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiLightVector_aig_29567bba180e4e84(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiMaterial * > *_wrap_new_aiMaterialVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiMaterial * > *result = 0 ;
  std::vector< aiMaterial * > *_swig_go_result;
  
  
  result = (std::vector< aiMaterial * > *)new std::vector< aiMaterial * >();
  *(std::vector< aiMaterial * > **)&_swig_go_result = (std::vector< aiMaterial * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterial * > *_wrap_new_aiMaterialVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiMaterial * >::size_type arg1 ;
  std::vector< aiMaterial * > *result = 0 ;
  std::vector< aiMaterial * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiMaterial * > *)new std::vector< aiMaterial * >(arg1);
  *(std::vector< aiMaterial * > **)&_swig_go_result = (std::vector< aiMaterial * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterial * > *_wrap_new_aiMaterialVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = 0 ;
  std::vector< aiMaterial * > *result = 0 ;
  std::vector< aiMaterial * > *_swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  result = (std::vector< aiMaterial * > *)new std::vector< aiMaterial * >((std::vector< aiMaterial * > const &)*arg1);
  *(std::vector< aiMaterial * > **)&_swig_go_result = (std::vector< aiMaterial * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiMaterialVector_size_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  std::vector< aiMaterial * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMaterial * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiMaterialVector_capacity_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  std::vector< aiMaterial * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMaterial * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialVector_reserve_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  std::vector< aiMaterial * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiMaterialVector_isEmpty_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiMaterial * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialVector_clear_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiMaterialVector_add_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0, aiMaterial **_swig_go_1) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  std::vector< aiMaterial * >::value_type *arg2 = 0 ;
  std::vector< aiMaterial * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiMaterial * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiMaterial * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiMaterial * >::value_type const &)*arg2);
  
}


aiMaterial **_wrap_aiMaterialVector_get_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  int arg2 ;
  std::vector< aiMaterial * >::value_type *result = 0 ;
  aiMaterial **_swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiMaterial * >::value_type *) &std_vector_Sl_aiMaterial_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiMaterial * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiMaterialVector_set_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0, intgo _swig_go_1, aiMaterial **_swig_go_2) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  int arg2 ;
  std::vector< aiMaterial * >::value_type *arg3 = 0 ;
  std::vector< aiMaterial * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiMaterial * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiMaterial * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiMaterial_Sm__Sg__set(arg1,arg2,(aiMaterial *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiMaterialVector_aig_29567bba180e4e84(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiMaterialProperty * > *_wrap_new_aiMaterialPropertyVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiMaterialProperty * > *result = 0 ;
  std::vector< aiMaterialProperty * > *_swig_go_result;
  
  
  result = (std::vector< aiMaterialProperty * > *)new std::vector< aiMaterialProperty * >();
  *(std::vector< aiMaterialProperty * > **)&_swig_go_result = (std::vector< aiMaterialProperty * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterialProperty * > *_wrap_new_aiMaterialPropertyVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiMaterialProperty * >::size_type arg1 ;
  std::vector< aiMaterialProperty * > *result = 0 ;
  std::vector< aiMaterialProperty * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiMaterialProperty * > *)new std::vector< aiMaterialProperty * >(arg1);
  *(std::vector< aiMaterialProperty * > **)&_swig_go_result = (std::vector< aiMaterialProperty * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterialProperty * > *_wrap_new_aiMaterialPropertyVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = 0 ;
  std::vector< aiMaterialProperty * > *result = 0 ;
  std::vector< aiMaterialProperty * > *_swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  result = (std::vector< aiMaterialProperty * > *)new std::vector< aiMaterialProperty * >((std::vector< aiMaterialProperty * > const &)*arg1);
  *(std::vector< aiMaterialProperty * > **)&_swig_go_result = (std::vector< aiMaterialProperty * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiMaterialPropertyVector_size_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  std::vector< aiMaterialProperty * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMaterialProperty * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiMaterialPropertyVector_capacity_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  std::vector< aiMaterialProperty * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMaterialProperty * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialPropertyVector_reserve_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  std::vector< aiMaterialProperty * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiMaterialPropertyVector_isEmpty_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiMaterialProperty * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialPropertyVector_clear_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiMaterialPropertyVector_add_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0, aiMaterialProperty **_swig_go_1) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  std::vector< aiMaterialProperty * >::value_type *arg2 = 0 ;
  std::vector< aiMaterialProperty * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiMaterialProperty * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiMaterialProperty * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiMaterialProperty * >::value_type const &)*arg2);
  
}


aiMaterialProperty **_wrap_aiMaterialPropertyVector_get_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  int arg2 ;
  std::vector< aiMaterialProperty * >::value_type *result = 0 ;
  aiMaterialProperty **_swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiMaterialProperty * >::value_type *) &std_vector_Sl_aiMaterialProperty_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiMaterialProperty * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiMaterialPropertyVector_set_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0, intgo _swig_go_1, aiMaterialProperty **_swig_go_2) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  int arg2 ;
  std::vector< aiMaterialProperty * >::value_type *arg3 = 0 ;
  std::vector< aiMaterialProperty * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiMaterialProperty * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiMaterialProperty * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiMaterialProperty_Sm__Sg__set(arg1,arg2,(aiMaterialProperty *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiMaterialPropertyVector_aig_29567bba180e4e84(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiMeshAnim * > *_wrap_new_aiMeshAnimVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiMeshAnim * > *result = 0 ;
  std::vector< aiMeshAnim * > *_swig_go_result;
  
  
  result = (std::vector< aiMeshAnim * > *)new std::vector< aiMeshAnim * >();
  *(std::vector< aiMeshAnim * > **)&_swig_go_result = (std::vector< aiMeshAnim * > *)result; 
  return _swig_go_result;
}


std::vector< aiMeshAnim * > *_wrap_new_aiMeshAnimVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiMeshAnim * >::size_type arg1 ;
  std::vector< aiMeshAnim * > *result = 0 ;
  std::vector< aiMeshAnim * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiMeshAnim * > *)new std::vector< aiMeshAnim * >(arg1);
  *(std::vector< aiMeshAnim * > **)&_swig_go_result = (std::vector< aiMeshAnim * > *)result; 
  return _swig_go_result;
}


std::vector< aiMeshAnim * > *_wrap_new_aiMeshAnimVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = 0 ;
  std::vector< aiMeshAnim * > *result = 0 ;
  std::vector< aiMeshAnim * > *_swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  result = (std::vector< aiMeshAnim * > *)new std::vector< aiMeshAnim * >((std::vector< aiMeshAnim * > const &)*arg1);
  *(std::vector< aiMeshAnim * > **)&_swig_go_result = (std::vector< aiMeshAnim * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiMeshAnimVector_size_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  std::vector< aiMeshAnim * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMeshAnim * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiMeshAnimVector_capacity_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  std::vector< aiMeshAnim * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMeshAnim * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshAnimVector_reserve_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  std::vector< aiMeshAnim * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiMeshAnimVector_isEmpty_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiMeshAnim * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshAnimVector_clear_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiMeshAnimVector_add_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0, aiMeshAnim **_swig_go_1) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  std::vector< aiMeshAnim * >::value_type *arg2 = 0 ;
  std::vector< aiMeshAnim * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiMeshAnim * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiMeshAnim * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiMeshAnim * >::value_type const &)*arg2);
  
}


aiMeshAnim **_wrap_aiMeshAnimVector_get_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  int arg2 ;
  std::vector< aiMeshAnim * >::value_type *result = 0 ;
  aiMeshAnim **_swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiMeshAnim * >::value_type *) &std_vector_Sl_aiMeshAnim_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiMeshAnim * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiMeshAnimVector_set_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0, intgo _swig_go_1, aiMeshAnim **_swig_go_2) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  int arg2 ;
  std::vector< aiMeshAnim * >::value_type *arg3 = 0 ;
  std::vector< aiMeshAnim * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiMeshAnim * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiMeshAnim * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiMeshAnim_Sm__Sg__set(arg1,arg2,(aiMeshAnim *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiMeshAnimVector_aig_29567bba180e4e84(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiMesh * > *_wrap_new_aiMeshVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiMesh * > *result = 0 ;
  std::vector< aiMesh * > *_swig_go_result;
  
  
  result = (std::vector< aiMesh * > *)new std::vector< aiMesh * >();
  *(std::vector< aiMesh * > **)&_swig_go_result = (std::vector< aiMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiMesh * > *_wrap_new_aiMeshVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiMesh * >::size_type arg1 ;
  std::vector< aiMesh * > *result = 0 ;
  std::vector< aiMesh * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiMesh * > *)new std::vector< aiMesh * >(arg1);
  *(std::vector< aiMesh * > **)&_swig_go_result = (std::vector< aiMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiMesh * > *_wrap_new_aiMeshVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = 0 ;
  std::vector< aiMesh * > *result = 0 ;
  std::vector< aiMesh * > *_swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  result = (std::vector< aiMesh * > *)new std::vector< aiMesh * >((std::vector< aiMesh * > const &)*arg1);
  *(std::vector< aiMesh * > **)&_swig_go_result = (std::vector< aiMesh * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiMeshVector_size_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  std::vector< aiMesh * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMesh * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiMeshVector_capacity_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  std::vector< aiMesh * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMesh * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshVector_reserve_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  std::vector< aiMesh * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiMeshVector_isEmpty_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiMesh * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshVector_clear_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiMeshVector_add_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0, aiMesh **_swig_go_1) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  std::vector< aiMesh * >::value_type *arg2 = 0 ;
  std::vector< aiMesh * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiMesh * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiMesh * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiMesh * >::value_type const &)*arg2);
  
}


aiMesh **_wrap_aiMeshVector_get_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  int arg2 ;
  std::vector< aiMesh * >::value_type *result = 0 ;
  aiMesh **_swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiMesh * >::value_type *) &std_vector_Sl_aiMesh_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiMesh * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiMeshVector_set_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0, intgo _swig_go_1, aiMesh **_swig_go_2) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  int arg2 ;
  std::vector< aiMesh * >::value_type *arg3 = 0 ;
  std::vector< aiMesh * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiMesh * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiMesh * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiMesh_Sm__Sg__set(arg1,arg2,(aiMesh *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiMeshVector_aig_29567bba180e4e84(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiNode * > *_wrap_new_aiNodeVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiNode * > *result = 0 ;
  std::vector< aiNode * > *_swig_go_result;
  
  
  result = (std::vector< aiNode * > *)new std::vector< aiNode * >();
  *(std::vector< aiNode * > **)&_swig_go_result = (std::vector< aiNode * > *)result; 
  return _swig_go_result;
}


std::vector< aiNode * > *_wrap_new_aiNodeVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiNode * >::size_type arg1 ;
  std::vector< aiNode * > *result = 0 ;
  std::vector< aiNode * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiNode * > *)new std::vector< aiNode * >(arg1);
  *(std::vector< aiNode * > **)&_swig_go_result = (std::vector< aiNode * > *)result; 
  return _swig_go_result;
}


std::vector< aiNode * > *_wrap_new_aiNodeVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = 0 ;
  std::vector< aiNode * > *result = 0 ;
  std::vector< aiNode * > *_swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  result = (std::vector< aiNode * > *)new std::vector< aiNode * >((std::vector< aiNode * > const &)*arg1);
  *(std::vector< aiNode * > **)&_swig_go_result = (std::vector< aiNode * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiNodeVector_size_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  std::vector< aiNode * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  result = ((std::vector< aiNode * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiNodeVector_capacity_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  std::vector< aiNode * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  result = ((std::vector< aiNode * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeVector_reserve_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  std::vector< aiNode * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiNodeVector_isEmpty_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiNode * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeVector_clear_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiNodeVector_add_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0, aiNode **_swig_go_1) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  std::vector< aiNode * >::value_type *arg2 = 0 ;
  std::vector< aiNode * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiNode * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiNode * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiNode * >::value_type const &)*arg2);
  
}


aiNode **_wrap_aiNodeVector_get_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  int arg2 ;
  std::vector< aiNode * >::value_type *result = 0 ;
  aiNode **_swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiNode * >::value_type *) &std_vector_Sl_aiNode_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiNode * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiNodeVector_set_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0, intgo _swig_go_1, aiNode **_swig_go_2) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  int arg2 ;
  std::vector< aiNode * >::value_type *arg3 = 0 ;
  std::vector< aiNode * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiNode * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiNode * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiNode_Sm__Sg__set(arg1,arg2,(aiNode *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiNodeVector_aig_29567bba180e4e84(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiNodeAnim * > *_wrap_new_aiNodeAnimVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiNodeAnim * > *result = 0 ;
  std::vector< aiNodeAnim * > *_swig_go_result;
  
  
  result = (std::vector< aiNodeAnim * > *)new std::vector< aiNodeAnim * >();
  *(std::vector< aiNodeAnim * > **)&_swig_go_result = (std::vector< aiNodeAnim * > *)result; 
  return _swig_go_result;
}


std::vector< aiNodeAnim * > *_wrap_new_aiNodeAnimVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiNodeAnim * >::size_type arg1 ;
  std::vector< aiNodeAnim * > *result = 0 ;
  std::vector< aiNodeAnim * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiNodeAnim * > *)new std::vector< aiNodeAnim * >(arg1);
  *(std::vector< aiNodeAnim * > **)&_swig_go_result = (std::vector< aiNodeAnim * > *)result; 
  return _swig_go_result;
}


std::vector< aiNodeAnim * > *_wrap_new_aiNodeAnimVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = 0 ;
  std::vector< aiNodeAnim * > *result = 0 ;
  std::vector< aiNodeAnim * > *_swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  result = (std::vector< aiNodeAnim * > *)new std::vector< aiNodeAnim * >((std::vector< aiNodeAnim * > const &)*arg1);
  *(std::vector< aiNodeAnim * > **)&_swig_go_result = (std::vector< aiNodeAnim * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiNodeAnimVector_size_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  std::vector< aiNodeAnim * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  result = ((std::vector< aiNodeAnim * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiNodeAnimVector_capacity_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  std::vector< aiNodeAnim * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  result = ((std::vector< aiNodeAnim * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnimVector_reserve_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  std::vector< aiNodeAnim * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiNodeAnimVector_isEmpty_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiNodeAnim * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnimVector_clear_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiNodeAnimVector_add_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0, aiNodeAnim **_swig_go_1) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  std::vector< aiNodeAnim * >::value_type *arg2 = 0 ;
  std::vector< aiNodeAnim * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiNodeAnim * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiNodeAnim * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiNodeAnim * >::value_type const &)*arg2);
  
}


aiNodeAnim **_wrap_aiNodeAnimVector_get_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  int arg2 ;
  std::vector< aiNodeAnim * >::value_type *result = 0 ;
  aiNodeAnim **_swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiNodeAnim * >::value_type *) &std_vector_Sl_aiNodeAnim_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiNodeAnim * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnimVector_set_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0, intgo _swig_go_1, aiNodeAnim **_swig_go_2) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  int arg2 ;
  std::vector< aiNodeAnim * >::value_type *arg3 = 0 ;
  std::vector< aiNodeAnim * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiNodeAnim * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiNodeAnim * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiNodeAnim_Sm__Sg__set(arg1,arg2,(aiNodeAnim *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiNodeAnimVector_aig_29567bba180e4e84(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiTexture * > *_wrap_new_aiTextureVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiTexture * > *result = 0 ;
  std::vector< aiTexture * > *_swig_go_result;
  
  
  result = (std::vector< aiTexture * > *)new std::vector< aiTexture * >();
  *(std::vector< aiTexture * > **)&_swig_go_result = (std::vector< aiTexture * > *)result; 
  return _swig_go_result;
}


std::vector< aiTexture * > *_wrap_new_aiTextureVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiTexture * >::size_type arg1 ;
  std::vector< aiTexture * > *result = 0 ;
  std::vector< aiTexture * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiTexture * > *)new std::vector< aiTexture * >(arg1);
  *(std::vector< aiTexture * > **)&_swig_go_result = (std::vector< aiTexture * > *)result; 
  return _swig_go_result;
}


std::vector< aiTexture * > *_wrap_new_aiTextureVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = 0 ;
  std::vector< aiTexture * > *result = 0 ;
  std::vector< aiTexture * > *_swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  result = (std::vector< aiTexture * > *)new std::vector< aiTexture * >((std::vector< aiTexture * > const &)*arg1);
  *(std::vector< aiTexture * > **)&_swig_go_result = (std::vector< aiTexture * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiTextureVector_size_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  std::vector< aiTexture * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  result = ((std::vector< aiTexture * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiTextureVector_capacity_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  std::vector< aiTexture * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  result = ((std::vector< aiTexture * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTextureVector_reserve_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  std::vector< aiTexture * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiTextureVector_isEmpty_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiTexture * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTextureVector_clear_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiTextureVector_add_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0, aiTexture **_swig_go_1) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  std::vector< aiTexture * >::value_type *arg2 = 0 ;
  std::vector< aiTexture * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiTexture * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiTexture * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiTexture * >::value_type const &)*arg2);
  
}


aiTexture **_wrap_aiTextureVector_get_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  int arg2 ;
  std::vector< aiTexture * >::value_type *result = 0 ;
  aiTexture **_swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiTexture * >::value_type *) &std_vector_Sl_aiTexture_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiTexture * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiTextureVector_set_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0, intgo _swig_go_1, aiTexture **_swig_go_2) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  int arg2 ;
  std::vector< aiTexture * >::value_type *arg3 = 0 ;
  std::vector< aiTexture * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiTexture * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiTexture * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiTexture_Sm__Sg__set(arg1,arg2,(aiTexture *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiTextureVector_aig_29567bba180e4e84(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiVector3D * > *_wrap_new_aiVector3DVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  
  result = (std::vector< aiVector3D * > *)new std::vector< aiVector3D * >();
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_new_aiVector3DVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiVector3D * >::size_type arg1 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)new std::vector< aiVector3D * >(arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3D * > *_wrap_new_aiVector3DVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)new std::vector< aiVector3D * >((std::vector< aiVector3D * > const &)*arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiVector3DVector_size_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  std::vector< aiVector3D * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  result = ((std::vector< aiVector3D * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiVector3DVector_capacity_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  std::vector< aiVector3D * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  result = ((std::vector< aiVector3D * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVector_reserve_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  std::vector< aiVector3D * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiVector3DVector_isEmpty_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiVector3D * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVector_clear_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiVector3DVector_add_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0, aiVector3D **_swig_go_1) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  std::vector< aiVector3D * >::value_type *arg2 = 0 ;
  std::vector< aiVector3D * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiVector3D * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiVector3D * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiVector3D * >::value_type const &)*arg2);
  
}


aiVector3D **_wrap_aiVector3DVector_get_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  int arg2 ;
  std::vector< aiVector3D * >::value_type *result = 0 ;
  aiVector3D **_swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiVector3D * >::value_type *) &std_vector_Sl_aiVector3D_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiVector3D * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVector_set_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0, intgo _swig_go_1, aiVector3D **_swig_go_2) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  int arg2 ;
  std::vector< aiVector3D * >::value_type *arg3 = 0 ;
  std::vector< aiVector3D * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiVector3D * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiVector3D * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiVector3D_Sm__Sg__set(arg1,arg2,(aiVector3D *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiVector3DVector_aig_29567bba180e4e84(std::vector< aiVector3D * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::vector< aiVector3D * > > *_wrap_new_aiVector3DVectorVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3D * > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< aiVector3D * > > *)new std::vector< std::vector< aiVector3D * > >();
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiVector3D * > > *_wrap_new_aiVector3DVectorVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< std::vector< aiVector3D * > >::size_type arg1 ;
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3D * > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< aiVector3D * > > *)new std::vector< std::vector< aiVector3D * > >(arg1);
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiVector3D * > > *_wrap_new_aiVector3DVectorVector__SWIG_2_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = 0 ;
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3D * > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiVector3D * > > *)new std::vector< std::vector< aiVector3D * > >((std::vector< std::vector< aiVector3D * > > const &)*arg1);
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


long long _wrap_aiVector3DVectorVector_size_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  std::vector< std::vector< aiVector3D * > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< aiVector3D * > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiVector3DVectorVector_capacity_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  std::vector< std::vector< aiVector3D * > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< aiVector3D * > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVectorVector_reserve_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  std::vector< std::vector< aiVector3D * > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiVector3DVectorVector_isEmpty_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< aiVector3D * > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVectorVector_clear_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiVector3DVectorVector_add_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0, std::vector< aiVector3D * > *_swig_go_1) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  std::vector< std::vector< aiVector3D * > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< aiVector3D * > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< aiVector3D * > >::value_type const &)*arg2);
  
}


std::vector< aiVector3D * > *_wrap_aiVector3DVectorVector_get_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< aiVector3D * > >::value_type *result = 0 ;
  std::vector< aiVector3D * > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< aiVector3D * > >::value_type *) &std_vector_Sl_std_vector_Sl_aiVector3D_Sm__Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< aiVector3D * > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVectorVector_set_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0, intgo _swig_go_1, std::vector< aiVector3D * > *_swig_go_2) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< aiVector3D * > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< aiVector3D * > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_aiVector3D_Sm__Sg__Sg__set(arg1,arg2,(std::vector< aiVector3D * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiVector3DVectorVector_aig_29567bba180e4e84(std::vector< std::vector< aiVector3D * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiVertexWeight * > *_wrap_new_aiVertexWeightVector__SWIG_0_aig_29567bba180e4e84() {
  std::vector< aiVertexWeight * > *result = 0 ;
  std::vector< aiVertexWeight * > *_swig_go_result;
  
  
  result = (std::vector< aiVertexWeight * > *)new std::vector< aiVertexWeight * >();
  *(std::vector< aiVertexWeight * > **)&_swig_go_result = (std::vector< aiVertexWeight * > *)result; 
  return _swig_go_result;
}


std::vector< aiVertexWeight * > *_wrap_new_aiVertexWeightVector__SWIG_1_aig_29567bba180e4e84(long long _swig_go_0) {
  std::vector< aiVertexWeight * >::size_type arg1 ;
  std::vector< aiVertexWeight * > *result = 0 ;
  std::vector< aiVertexWeight * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiVertexWeight * > *)new std::vector< aiVertexWeight * >(arg1);
  *(std::vector< aiVertexWeight * > **)&_swig_go_result = (std::vector< aiVertexWeight * > *)result; 
  return _swig_go_result;
}


std::vector< aiVertexWeight * > *_wrap_new_aiVertexWeightVector__SWIG_2_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = 0 ;
  std::vector< aiVertexWeight * > *result = 0 ;
  std::vector< aiVertexWeight * > *_swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  result = (std::vector< aiVertexWeight * > *)new std::vector< aiVertexWeight * >((std::vector< aiVertexWeight * > const &)*arg1);
  *(std::vector< aiVertexWeight * > **)&_swig_go_result = (std::vector< aiVertexWeight * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiVertexWeightVector_size_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  std::vector< aiVertexWeight * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  result = ((std::vector< aiVertexWeight * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiVertexWeightVector_capacity_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  std::vector< aiVertexWeight * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  result = ((std::vector< aiVertexWeight * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeightVector_reserve_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  std::vector< aiVertexWeight * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiVertexWeightVector_isEmpty_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiVertexWeight * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeightVector_clear_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiVertexWeightVector_add_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0, aiVertexWeight **_swig_go_1) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  std::vector< aiVertexWeight * >::value_type *arg2 = 0 ;
  std::vector< aiVertexWeight * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiVertexWeight * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiVertexWeight * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiVertexWeight * >::value_type const &)*arg2);
  
}


aiVertexWeight **_wrap_aiVertexWeightVector_get_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  int arg2 ;
  std::vector< aiVertexWeight * >::value_type *result = 0 ;
  aiVertexWeight **_swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiVertexWeight * >::value_type *) &std_vector_Sl_aiVertexWeight_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiVertexWeight * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeightVector_set_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0, intgo _swig_go_1, aiVertexWeight **_swig_go_2) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  int arg2 ;
  std::vector< aiVertexWeight * >::value_type *arg3 = 0 ;
  std::vector< aiVertexWeight * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiVertexWeight * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiVertexWeight * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiVertexWeight_Sm__Sg__set(arg1,arg2,(aiVertexWeight *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiVertexWeightVector_aig_29567bba180e4e84(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

