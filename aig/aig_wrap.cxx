/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: aig\aig.i

#define SWIGMODULE aig

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <string>


#include <vector>
#include <stdexcept>


  #include "assimp/cimport.h"
  #include "assimp/scene.h"
  #include "assimp/mesh.h"
  #include "assimp/vector2.h"
  #include "assimp/vector3.h"
  #include "assimp/matrix3x3.h"
  #include "assimp/matrix4x4.h"
  #include "assimp/Defines.h"
  #include "assimp/color4.h"
  #include "assimp/postprocess.h"
  #include "assimp/types.h"
  #include "assimp/texture.h"
  #include "assimp/light.h"
  #include "assimp/camera.h"
  #include "assimp/material.h"
  #include "assimp/anim.h"
  #include "assimp/metadata.h"
  
  #include "zlib/zconf.h"
  #include "zlib/zlib.h"

  #include "irrxml/irrXML.h"


SWIGINTERN std::vector< aiNode * > *aiNode_mChildren(aiNode const *self){
    std::vector<aiNode* > *result = new std::vector<aiNode* >;
    result->reserve(self->mNumChildren);

    for (unsigned int i = 0; i < self->mNumChildren; ++i) {
      result->push_back(self->mChildren[i]);
    }

    return result;
  }
SWIGINTERN std::vector< unsigned int > *aiNode_mMeshes(aiNode const *self){
    std::vector<unsigned int > *result = new std::vector<unsigned int >;
    result->reserve(self->mNumMeshes);

    for (unsigned int i = 0; i < self->mNumMeshes; ++i) {
      result->push_back(self->mMeshes[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiAnimation * > *aiScene_mAnimations(aiScene const *self){
    std::vector<aiAnimation* > *result = new std::vector<aiAnimation* >;
    result->reserve(self->mNumAnimations);

    for (unsigned int i = 0; i < self->mNumAnimations; ++i) {
      result->push_back(self->mAnimations[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiCamera * > *aiScene_mCameras(aiScene const *self){
    std::vector<aiCamera* > *result = new std::vector<aiCamera* >;
    result->reserve(self->mNumCameras);

    for (unsigned int i = 0; i < self->mNumCameras; ++i) {
      result->push_back(self->mCameras[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiLight * > *aiScene_mLights(aiScene const *self){
    std::vector<aiLight* > *result = new std::vector<aiLight* >;
    result->reserve(self->mNumLights);

    for (unsigned int i = 0; i < self->mNumLights; ++i) {
      result->push_back(self->mLights[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiMaterial * > *aiScene_mMaterials(aiScene const *self){
    std::vector<aiMaterial* > *result = new std::vector<aiMaterial* >;
    result->reserve(self->mNumMaterials);

    for (unsigned int i = 0; i < self->mNumMaterials; ++i) {
      result->push_back(self->mMaterials[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiMesh * > *aiScene_mMeshes(aiScene const *self){
    std::vector<aiMesh* > *result = new std::vector<aiMesh* >;
    result->reserve(self->mNumMeshes);

    for (unsigned int i = 0; i < self->mNumMeshes; ++i) {
      result->push_back(self->mMeshes[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiTexture * > *aiScene_mTextures(aiScene const *self){
    std::vector<aiTexture* > *result = new std::vector<aiTexture* >;
    result->reserve(self->mNumTextures);

    for (unsigned int i = 0; i < self->mNumTextures; ++i) {
      result->push_back(self->mTextures[i]);
    }

    return result;
  }
SWIGINTERN std::vector< unsigned int > *aiFace_mIndices(aiFace const *self){
    std::vector<unsigned int > *result = new std::vector<unsigned int >;
    result->reserve(self->mNumIndices);

    for (unsigned int i = 0; i < self->mNumIndices; ++i) {
      result->push_back(self->mIndices[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiVertexWeight * > *aiBone_mWeights(aiBone const *self){
    std::vector<aiVertexWeight *> *result = new std::vector<aiVertexWeight *>;
    result->reserve(self->mNumWeights);

    aiVertexWeight *currentValue = self->mWeights;
    aiVertexWeight *valueLimit = self->mWeights + self->mNumWeights;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiAnimMesh_mVertices(aiAnimMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mVertices;
    aiVector3D *valueLimit = self->mVertices + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiAnimMesh_mNormals(aiAnimMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mNormals;
    aiVector3D *valueLimit = self->mNormals + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiAnimMesh_mTangents(aiAnimMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mTangents;
    aiVector3D *valueLimit = self->mTangents + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiAnimMesh_mBitangents(aiAnimMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mBitangents;
    aiVector3D *valueLimit = self->mBitangents + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< std::vector< aiVector3D * > > *aiAnimMesh_mTextureCoords(aiAnimMesh const *self){
    std::vector<std::vector<aiVector3D *> > *result = new std::vector<std::vector<aiVector3D *> >;
    result->reserve(AI_MAX_NUMBER_OF_TEXTURECOORDS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++i) {
      std::vector<aiVector3D *> currentElements;

      if (self->mTextureCoords[i] != 0) {
        currentElements.reserve(self->mNumVertices);

        aiVector3D *currentValue = self->mTextureCoords[i];
        aiVector3D *valueLimit = self->mTextureCoords[i] + self->mNumVertices;
        while (currentValue < valueLimit) {
          currentElements.push_back(currentValue);
          ++currentValue;
        }
      }

      result->push_back(currentElements);
    }

    return result;
  }
SWIGINTERN std::vector< std::vector< aiColor4D * > > *aiAnimMesh_mColors(aiAnimMesh const *self){
    std::vector<std::vector<aiColor4D *> > *result = new std::vector<std::vector<aiColor4D *> >;
    result->reserve(AI_MAX_NUMBER_OF_COLOR_SETS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_COLOR_SETS; ++i) {
      std::vector<aiColor4D *> currentElements;

      if (self->mColors[i] != 0) {
        currentElements.reserve(self->mNumVertices);

        aiColor4D *currentValue = self->mColors[i];
        aiColor4D *valueLimit = self->mColors[i] + self->mNumVertices;
        while (currentValue < valueLimit) {
          currentElements.push_back(currentValue);
          ++currentValue;
        }
      }

      result->push_back(currentElements);
    }

    return result;
  }
SWIGINTERN std::vector< aiAnimMesh * > *aiMesh_mAnimMeshes(aiMesh const *self){
    std::vector<aiAnimMesh* > *result = new std::vector<aiAnimMesh* >;
    result->reserve(self->mNumAnimMeshes);

    for (unsigned int i = 0; i < self->mNumAnimMeshes; ++i) {
      result->push_back(self->mAnimMeshes[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiBone * > *aiMesh_mBones(aiMesh const *self){
    std::vector<aiBone* > *result = new std::vector<aiBone* >;
    result->reserve(self->mNumBones);

    for (unsigned int i = 0; i < self->mNumBones; ++i) {
      result->push_back(self->mBones[i]);
    }

    return result;
  }
SWIGINTERN std::vector< unsigned int > *aiMesh_mNumUVComponents(aiMesh const *self){
    std::vector<unsigned int > *result = new std::vector<unsigned int >;
    result->reserve(AI_MAX_NUMBER_OF_TEXTURECOORDS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++i) {
      result->push_back(self->mNumUVComponents[i]);
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiMesh_mVertices(aiMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mVertices;
    aiVector3D *valueLimit = self->mVertices + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiMesh_mNormals(aiMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mNormals;
    aiVector3D *valueLimit = self->mNormals + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiMesh_mTangents(aiMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mTangents;
    aiVector3D *valueLimit = self->mTangents + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiVector3D * > *aiMesh_mBitangents(aiMesh const *self){
    std::vector<aiVector3D *> *result = new std::vector<aiVector3D *>;
    result->reserve(self->mNumVertices);

    aiVector3D *currentValue = self->mBitangents;
    aiVector3D *valueLimit = self->mBitangents + self->mNumVertices;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< aiFace * > *aiMesh_mFaces(aiMesh const *self){
    std::vector<aiFace *> *result = new std::vector<aiFace *>;
    result->reserve(self->mNumFaces);

    aiFace *currentValue = self->mFaces;
    aiFace *valueLimit = self->mFaces + self->mNumFaces;
    while (currentValue < valueLimit) {
      result->push_back(currentValue);
      ++currentValue;
    }

    return result;
  }
SWIGINTERN std::vector< std::vector< aiVector3D * > > *aiMesh_mTextureCoords(aiMesh const *self){
    std::vector<std::vector<aiVector3D *> > *result = new std::vector<std::vector<aiVector3D *> >;
    result->reserve(AI_MAX_NUMBER_OF_TEXTURECOORDS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++i) {
      std::vector<aiVector3D *> currentElements;

      if (self->mTextureCoords[i] != 0) {
        currentElements.reserve(self->mNumVertices);

        aiVector3D *currentValue = self->mTextureCoords[i];
        aiVector3D *valueLimit = self->mTextureCoords[i] + self->mNumVertices;
        while (currentValue < valueLimit) {
          currentElements.push_back(currentValue);
          ++currentValue;
        }
      }

      result->push_back(currentElements);
    }

    return result;
  }
SWIGINTERN std::vector< std::vector< aiColor4D * > > *aiMesh_mColors(aiMesh const *self){
    std::vector<std::vector<aiColor4D *> > *result = new std::vector<std::vector<aiColor4D *> >;
    result->reserve(AI_MAX_NUMBER_OF_COLOR_SETS);

    for (unsigned int i = 0; i < AI_MAX_NUMBER_OF_COLOR_SETS; ++i) {
      std::vector<aiColor4D *> currentElements;

      if (self->mColors[i] != 0) {
        currentElements.reserve(self->mNumVertices);

        aiColor4D *currentValue = self->mColors[i];
        aiColor4D *valueLimit = self->mColors[i] + self->mNumVertices;
        while (currentValue < valueLimit) {
          currentElements.push_back(currentValue);
          ++currentValue;
        }
      }

      result->push_back(currentElements);
    }

    return result;
  }
SWIGINTERN std::vector< aiMaterialProperty * > *aiMaterial_mProperties(aiMaterial const *self){
    std::vector<aiMaterialProperty* > *result = new std::vector<aiMaterialProperty* >;
    result->reserve(self->mNumProperties);

    for (unsigned int i = 0; i < self->mNumProperties; ++i) {
      result->push_back(self->mProperties[i]);
    }

    return result;
  }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiAnimation * >::const_reference std_vector_Sl_aiAnimation_Sm__Sg__get(std::vector< aiAnimation * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiAnimation_Sm__Sg__set(std::vector< aiAnimation * > *self,int i,std::vector< aiAnimation * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiAnimMesh * >::const_reference std_vector_Sl_aiAnimMesh_Sm__Sg__get(std::vector< aiAnimMesh * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiAnimMesh_Sm__Sg__set(std::vector< aiAnimMesh * > *self,int i,std::vector< aiAnimMesh * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiBone * >::const_reference std_vector_Sl_aiBone_Sm__Sg__get(std::vector< aiBone * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiBone_Sm__Sg__set(std::vector< aiBone * > *self,int i,std::vector< aiBone * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiCamera * >::const_reference std_vector_Sl_aiCamera_Sm__Sg__get(std::vector< aiCamera * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiCamera_Sm__Sg__set(std::vector< aiCamera * > *self,int i,std::vector< aiCamera * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiColor4t< float > * >::const_reference std_vector_Sl_aiColor4D_Sm__Sg__get(std::vector< aiColor4D * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiColor4D_Sm__Sg__set(std::vector< aiColor4D * > *self,int i,std::vector< aiColor4t< float > * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< aiColor4t< float > * > >::const_reference std_vector_Sl_std_vector_Sl_aiColor4D_Sm__Sg__Sg__get(std::vector< std::vector< aiColor4D * > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_aiColor4D_Sm__Sg__Sg__set(std::vector< std::vector< aiColor4D * > > *self,int i,std::vector< std::vector< aiColor4t< float > * > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiFace * >::const_reference std_vector_Sl_aiFace_Sm__Sg__get(std::vector< aiFace * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiFace_Sm__Sg__set(std::vector< aiFace * > *self,int i,std::vector< aiFace * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiLight * >::const_reference std_vector_Sl_aiLight_Sm__Sg__get(std::vector< aiLight * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiLight_Sm__Sg__set(std::vector< aiLight * > *self,int i,std::vector< aiLight * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiMaterial * >::const_reference std_vector_Sl_aiMaterial_Sm__Sg__get(std::vector< aiMaterial * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiMaterial_Sm__Sg__set(std::vector< aiMaterial * > *self,int i,std::vector< aiMaterial * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiMaterialProperty * >::const_reference std_vector_Sl_aiMaterialProperty_Sm__Sg__get(std::vector< aiMaterialProperty * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiMaterialProperty_Sm__Sg__set(std::vector< aiMaterialProperty * > *self,int i,std::vector< aiMaterialProperty * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiMeshAnim * >::const_reference std_vector_Sl_aiMeshAnim_Sm__Sg__get(std::vector< aiMeshAnim * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiMeshAnim_Sm__Sg__set(std::vector< aiMeshAnim * > *self,int i,std::vector< aiMeshAnim * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiMesh * >::const_reference std_vector_Sl_aiMesh_Sm__Sg__get(std::vector< aiMesh * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiMesh_Sm__Sg__set(std::vector< aiMesh * > *self,int i,std::vector< aiMesh * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiNode * >::const_reference std_vector_Sl_aiNode_Sm__Sg__get(std::vector< aiNode * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiNode_Sm__Sg__set(std::vector< aiNode * > *self,int i,std::vector< aiNode * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiNodeAnim * >::const_reference std_vector_Sl_aiNodeAnim_Sm__Sg__get(std::vector< aiNodeAnim * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiNodeAnim_Sm__Sg__set(std::vector< aiNodeAnim * > *self,int i,std::vector< aiNodeAnim * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiTexture * >::const_reference std_vector_Sl_aiTexture_Sm__Sg__get(std::vector< aiTexture * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiTexture_Sm__Sg__set(std::vector< aiTexture * > *self,int i,std::vector< aiTexture * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiVector3t< float > * >::const_reference std_vector_Sl_aiVector3D_Sm__Sg__get(std::vector< aiVector3D * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiVector3D_Sm__Sg__set(std::vector< aiVector3D * > *self,int i,std::vector< aiVector3t< float > * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< aiVector3t< float > * > >::const_reference std_vector_Sl_std_vector_Sl_aiVector3D_Sm__Sg__Sg__get(std::vector< std::vector< aiVector3D * > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_aiVector3D_Sm__Sg__Sg__set(std::vector< std::vector< aiVector3D * > > *self,int i,std::vector< std::vector< aiVector3t< float > * > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< aiVertexWeight * >::const_reference std_vector_Sl_aiVertexWeight_Sm__Sg__get(std::vector< aiVertexWeight * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_aiVertexWeight_Sm__Sg__set(std::vector< aiVertexWeight * > *self,int i,std::vector< aiVertexWeight * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_aig_324a1309ed911fbd(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_aig_324a1309ed911fbd(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_aiLogStream_callback_set_aig_324a1309ed911fbd(aiLogStream *_swig_go_0, void* _swig_go_1) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  aiLogStreamCallback arg2 = (aiLogStreamCallback) 0 ;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  arg2 = *(aiLogStreamCallback *)&_swig_go_1; 
  
  if (arg1) (arg1)->callback = arg2;
  
}


void* _wrap_aiLogStream_callback_get_aig_324a1309ed911fbd(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  aiLogStreamCallback result;
  void* _swig_go_result;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  result = (aiLogStreamCallback) ((arg1)->callback);
  *(aiLogStreamCallback *)&_swig_go_result = (aiLogStreamCallback)result; 
  return _swig_go_result;
}


void _wrap_aiLogStream_user_set_aig_324a1309ed911fbd(aiLogStream *_swig_go_0, _gostring_ _swig_go_1) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->user;
    if (arg2) {
      arg1->user = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->user, (const char *)arg2);
    } else {
      arg1->user = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_aiLogStream_user_get_aig_324a1309ed911fbd(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  result = (char *) ((arg1)->user);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


aiLogStream *_wrap_new_aiLogStream_aig_324a1309ed911fbd() {
  aiLogStream *result = 0 ;
  aiLogStream *_swig_go_result;
  
  
  result = (aiLogStream *)new aiLogStream();
  *(aiLogStream **)&_swig_go_result = (aiLogStream *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiLogStream_aig_324a1309ed911fbd(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiPropertyStore_sentinel_set_aig_324a1309ed911fbd(aiPropertyStore *_swig_go_0, char _swig_go_1) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char arg2 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  arg2 = (char)_swig_go_1; 
  
  if (arg1) (arg1)->sentinel = arg2;
  
}


char _wrap_aiPropertyStore_sentinel_get_aig_324a1309ed911fbd(aiPropertyStore *_swig_go_0) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char result;
  char _swig_go_result;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  result = (char) ((arg1)->sentinel);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiPropertyStore *_wrap_new_aiPropertyStore_aig_324a1309ed911fbd() {
  aiPropertyStore *result = 0 ;
  aiPropertyStore *_swig_go_result;
  
  
  result = (aiPropertyStore *)new aiPropertyStore();
  *(aiPropertyStore **)&_swig_go_result = (aiPropertyStore *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiPropertyStore_aig_324a1309ed911fbd(aiPropertyStore *_swig_go_0) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  delete arg1;
  
}


aiScene *_wrap_aiImportFile_aig_324a1309ed911fbd(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (aiScene *)aiImportFile((char const *)arg1,arg2);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  return _swig_go_result;
}


aiScene *_wrap_aiImportFileEx_aig_324a1309ed911fbd(_gostring_ _swig_go_0, intgo _swig_go_1, aiFileIO *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  aiFileIO *arg3 = (aiFileIO *) 0 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(aiFileIO **)&_swig_go_2; 
  
  result = (aiScene *)aiImportFileEx((char const *)arg1,arg2,arg3);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  return _swig_go_result;
}


aiScene *_wrap_aiImportFileExWithProperties_aig_324a1309ed911fbd(_gostring_ _swig_go_0, intgo _swig_go_1, aiFileIO *_swig_go_2, aiPropertyStore *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  aiFileIO *arg3 = (aiFileIO *) 0 ;
  aiPropertyStore *arg4 = (aiPropertyStore *) 0 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(aiFileIO **)&_swig_go_2; 
  arg4 = *(aiPropertyStore **)&_swig_go_3; 
  
  result = (aiScene *)aiImportFileExWithProperties((char const *)arg1,arg2,arg3,(aiPropertyStore const *)arg4);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  return _swig_go_result;
}


aiScene *_wrap_aiImportFileFromMemory_aig_324a1309ed911fbd(_gostring_ _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiScene *)aiImportFileFromMemory((char const *)arg1,arg2,arg3,(char const *)arg4);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  free(arg4); 
  return _swig_go_result;
}


aiScene *_wrap_aiImportFileFromMemoryWithProperties_aig_324a1309ed911fbd(_gostring_ _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, aiPropertyStore *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiPropertyStore *arg5 = (aiPropertyStore *) 0 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = *(aiPropertyStore **)&_swig_go_4; 
  
  result = (aiScene *)aiImportFileFromMemoryWithProperties((char const *)arg1,arg2,arg3,(char const *)arg4,(aiPropertyStore const *)arg5);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  free(arg1); 
  free(arg4); 
  return _swig_go_result;
}


aiScene *_wrap_aiApplyPostProcessing_aig_324a1309ed911fbd(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (aiScene *)aiApplyPostProcessing((aiScene const *)arg1,arg2);
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  return _swig_go_result;
}


aiLogStream *_wrap_aiGetPredefinedLogStream_aig_324a1309ed911fbd(intgo _swig_go_0, _gostring_ _swig_go_1) {
  enum aiDefaultLogStream arg1 ;
  char *arg2 = (char *) 0 ;
  aiLogStream result;
  aiLogStream *_swig_go_result;
  
  arg1 = (enum aiDefaultLogStream)_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = aiGetPredefinedLogStream(arg1,(char const *)arg2);
  *(aiLogStream **)&_swig_go_result = new aiLogStream(result); 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_aiAttachLogStream_aig_324a1309ed911fbd(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  aiAttachLogStream((aiLogStream const *)arg1);
  
}


void _wrap_aiEnableVerboseLogging_aig_324a1309ed911fbd(intgo _swig_go_0) {
  aiBool arg1 ;
  
  arg1 = (aiBool)_swig_go_0; 
  
  aiEnableVerboseLogging(arg1);
  
}


intgo _wrap_aiDetachLogStream_aig_324a1309ed911fbd(aiLogStream *_swig_go_0) {
  aiLogStream *arg1 = (aiLogStream *) 0 ;
  enum aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiLogStream **)&_swig_go_0; 
  
  result = (enum aiReturn)aiDetachLogStream((aiLogStream const *)arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiDetachAllLogStreams_aig_324a1309ed911fbd() {
  aiDetachAllLogStreams();
  
}


void _wrap_aiReleaseImport_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  aiReleaseImport((aiScene const *)arg1);
  
}


_gostring_ _wrap_aiGetErrorString_aig_324a1309ed911fbd() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (char *)aiGetErrorString();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_aiIsExtensionSupported_aig_324a1309ed911fbd(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  aiBool result;
  intgo _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (aiBool)aiIsExtensionSupported((char const *)arg1);
  _swig_go_result = result; 
  free(arg1); 
  return _swig_go_result;
}


void _wrap_aiGetExtensionList_aig_324a1309ed911fbd(aiString *_swig_go_0) {
  aiString *arg1 = (aiString *) 0 ;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  aiGetExtensionList(arg1);
  
}


void _wrap_aiGetMemoryRequirements_aig_324a1309ed911fbd(aiScene *_swig_go_0, aiMemoryInfo *_swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiMemoryInfo *arg2 = (aiMemoryInfo *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = *(aiMemoryInfo **)&_swig_go_1; 
  
  aiGetMemoryRequirements((aiScene const *)arg1,arg2);
  
}


aiPropertyStore *_wrap_aiCreatePropertyStore_aig_324a1309ed911fbd() {
  aiPropertyStore *result = 0 ;
  aiPropertyStore *_swig_go_result;
  
  
  result = (aiPropertyStore *)aiCreatePropertyStore();
  *(aiPropertyStore **)&_swig_go_result = (aiPropertyStore *)result; 
  return _swig_go_result;
}


void _wrap_aiReleasePropertyStore_aig_324a1309ed911fbd(aiPropertyStore *_swig_go_0) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  aiReleasePropertyStore(arg1);
  
}


void _wrap_aiSetImportPropertyInteger_aig_324a1309ed911fbd(aiPropertyStore *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  aiSetImportPropertyInteger(arg1,(char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_aiSetImportPropertyFloat_aig_324a1309ed911fbd(aiPropertyStore *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char *arg2 = (char *) 0 ;
  ai_real arg3 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (ai_real)_swig_go_2; 
  
  aiSetImportPropertyFloat(arg1,(char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_aiSetImportPropertyString_aig_324a1309ed911fbd(aiPropertyStore *_swig_go_0, _gostring_ _swig_go_1, aiString *_swig_go_2) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char *arg2 = (char *) 0 ;
  aiString *arg3 = (aiString *) 0 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(aiString **)&_swig_go_2; 
  
  aiSetImportPropertyString(arg1,(char const *)arg2,(aiString const *)arg3);
  
  free(arg2); 
}


void _wrap_aiSetImportPropertyMatrix_aig_324a1309ed911fbd(aiPropertyStore *_swig_go_0, _gostring_ _swig_go_1, aiMatrix4x4t< float > *_swig_go_2) {
  aiPropertyStore *arg1 = (aiPropertyStore *) 0 ;
  char *arg2 = (char *) 0 ;
  aiMatrix4x4 *arg3 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiPropertyStore **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(aiMatrix4x4 **)&_swig_go_2; 
  
  aiSetImportPropertyMatrix(arg1,(char const *)arg2,(aiMatrix4x4t< float > const *)arg3);
  
  free(arg2); 
}


void _wrap_aiCreateQuaternionFromMatrix_aig_324a1309ed911fbd(aiQuaternion *_swig_go_0, aiMatrix3x3t< float > *_swig_go_1) {
  aiQuaternion *arg1 = (aiQuaternion *) 0 ;
  aiMatrix3x3 *arg2 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiQuaternion **)&_swig_go_0; 
  arg2 = *(aiMatrix3x3 **)&_swig_go_1; 
  
  aiCreateQuaternionFromMatrix(arg1,(aiMatrix3x3t< float > const *)arg2);
  
}


void _wrap_aiDecomposeMatrix_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1, aiQuaternion *_swig_go_2, aiVector3t< float > *_swig_go_3) {
  aiMatrix4x4 *arg1 = (aiMatrix4x4 *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  aiQuaternion *arg3 = (aiQuaternion *) 0 ;
  aiVector3D *arg4 = (aiVector3D *) 0 ;
  
  arg1 = *(aiMatrix4x4 **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  arg3 = *(aiQuaternion **)&_swig_go_2; 
  arg4 = *(aiVector3D **)&_swig_go_3; 
  
  aiDecomposeMatrix((aiMatrix4x4t< float > const *)arg1,arg2,arg3,arg4);
  
}


void _wrap_aiTransposeMatrix4_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4 *arg1 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiMatrix4x4 **)&_swig_go_0; 
  
  aiTransposeMatrix4(arg1);
  
}


void _wrap_aiTransposeMatrix3_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3 *arg1 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiMatrix3x3 **)&_swig_go_0; 
  
  aiTransposeMatrix3(arg1);
  
}


void _wrap_aiTransformVecByMatrix3_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiMatrix3x3t< float > *_swig_go_1) {
  aiVector3D *arg1 = (aiVector3D *) 0 ;
  aiMatrix3x3 *arg2 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiVector3D **)&_swig_go_0; 
  arg2 = *(aiMatrix3x3 **)&_swig_go_1; 
  
  aiTransformVecByMatrix3(arg1,(aiMatrix3x3t< float > const *)arg2);
  
}


void _wrap_aiTransformVecByMatrix4_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiVector3D *arg1 = (aiVector3D *) 0 ;
  aiMatrix4x4 *arg2 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiVector3D **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4 **)&_swig_go_1; 
  
  aiTransformVecByMatrix4(arg1,(aiMatrix4x4t< float > const *)arg2);
  
}


void _wrap_aiMultiplyMatrix4_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiMatrix4x4 *arg1 = (aiMatrix4x4 *) 0 ;
  aiMatrix4x4 *arg2 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiMatrix4x4 **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4 **)&_swig_go_1; 
  
  aiMultiplyMatrix4(arg1,(aiMatrix4x4t< float > const *)arg2);
  
}


void _wrap_aiMultiplyMatrix3_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, aiMatrix3x3t< float > *_swig_go_1) {
  aiMatrix3x3 *arg1 = (aiMatrix3x3 *) 0 ;
  aiMatrix3x3 *arg2 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiMatrix3x3 **)&_swig_go_0; 
  arg2 = *(aiMatrix3x3 **)&_swig_go_1; 
  
  aiMultiplyMatrix3(arg1,(aiMatrix3x3t< float > const *)arg2);
  
}


void _wrap_aiIdentityMatrix3_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3 *arg1 = (aiMatrix3x3 *) 0 ;
  
  arg1 = *(aiMatrix3x3 **)&_swig_go_0; 
  
  aiIdentityMatrix3(arg1);
  
}


void _wrap_aiIdentityMatrix4_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4 *arg1 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiMatrix4x4 **)&_swig_go_0; 
  
  aiIdentityMatrix4(arg1);
  
}


long long _wrap_aiGetImportFormatCount_aig_324a1309ed911fbd() {
  size_t result;
  long long _swig_go_result;
  
  
  result = aiGetImportFormatCount();
  _swig_go_result = result; 
  return _swig_go_result;
}


aiImporterDesc *_wrap_aiGetImportFormatDescription_aig_324a1309ed911fbd(long long _swig_go_0) {
  size_t arg1 ;
  aiImporterDesc *result = 0 ;
  aiImporterDesc *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (aiImporterDesc *)aiGetImportFormatDescription(arg1);
  *(aiImporterDesc **)&_swig_go_result = (aiImporterDesc *)result; 
  return _swig_go_result;
}


void _wrap_aiNode_mName_set_aig_324a1309ed911fbd(aiNode *_swig_go_0, aiString *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiNode_mName_get_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiNode_mTransformation_set_aig_324a1309ed911fbd(aiNode *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiMatrix4x4 *arg2 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4 **)&_swig_go_1; 
  
  if (arg1) (arg1)->mTransformation = *arg2;
  
}


aiMatrix4x4t< float > *_wrap_aiNode_mTransformation_get_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiMatrix4x4 *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (aiMatrix4x4 *)& ((arg1)->mTransformation);
  *(aiMatrix4x4 **)&_swig_go_result = (aiMatrix4x4 *)result; 
  return _swig_go_result;
}


void _wrap_aiNode_mParent_set_aig_324a1309ed911fbd(aiNode *_swig_go_0, aiNode *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiNode *arg2 = (aiNode *) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiNode **)&_swig_go_1; 
  
  if (arg1) (arg1)->mParent = arg2;
  
}


aiNode *_wrap_aiNode_mParent_get_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (aiNode *) ((arg1)->mParent);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


void _wrap_aiNode_mNumChildren_set_aig_324a1309ed911fbd(aiNode *_swig_go_0, intgo _swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumChildren = arg2;
  
}


intgo _wrap_aiNode_mNumChildren_get_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumChildren);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNode_mNumMeshes_set_aig_324a1309ed911fbd(aiNode *_swig_go_0, intgo _swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumMeshes = arg2;
  
}


intgo _wrap_aiNode_mNumMeshes_get_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumMeshes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNode_mMetaData_set_aig_324a1309ed911fbd(aiNode *_swig_go_0, aiMetadata *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiMetadata *arg2 = (aiMetadata *) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiMetadata **)&_swig_go_1; 
  
  if (arg1) (arg1)->mMetaData = arg2;
  
}


aiMetadata *_wrap_aiNode_mMetaData_get_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiMetadata *result = 0 ;
  aiMetadata *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (aiMetadata *) ((arg1)->mMetaData);
  *(aiMetadata **)&_swig_go_result = (aiMetadata *)result; 
  return _swig_go_result;
}


aiNode *_wrap_new_aiNode__SWIG_0_aig_324a1309ed911fbd() {
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  
  result = (aiNode *)new aiNode();
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


aiNode *_wrap_new_aiNode__SWIG_1_aig_324a1309ed911fbd(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  result = (aiNode *)new aiNode((std::string const &)*arg1);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiNode_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  delete arg1;
  
}


aiNode *_wrap_aiNode_FindNode__SWIG_0_aig_324a1309ed911fbd(aiNode *_swig_go_0, aiString *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiString *arg2 = 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  result = (aiNode *)((aiNode const *)arg1)->FindNode((aiString const &)*arg2);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


aiNode *_wrap_aiNode_FindNode__SWIG_1_aig_324a1309ed911fbd(aiNode *_swig_go_0, aiString *_swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  aiString *arg2 = 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  result = (aiNode *)(arg1)->FindNode((aiString const &)*arg2);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


aiNode *_wrap_aiNode_FindNode__SWIG_2_aig_324a1309ed911fbd(aiNode *_swig_go_0, _gostring_ _swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  char *arg2 = (char *) 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (aiNode *)((aiNode const *)arg1)->FindNode((char const *)arg2);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  free(arg2); 
  return _swig_go_result;
}


aiNode *_wrap_aiNode_FindNode__SWIG_3_aig_324a1309ed911fbd(aiNode *_swig_go_0, _gostring_ _swig_go_1) {
  aiNode *arg1 = (aiNode *) 0 ;
  char *arg2 = (char *) 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (aiNode *)(arg1)->FindNode((char const *)arg2);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_aiNode_addChildren_aig_324a1309ed911fbd(aiNode *_swig_go_0, intgo _swig_go_1, aiNode **_swig_go_2) {
  aiNode *arg1 = (aiNode *) 0 ;
  unsigned int arg2 ;
  aiNode **arg3 = (aiNode **) 0 ;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(aiNode ***)&_swig_go_2; 
  
  (arg1)->addChildren(arg2,arg3);
  
}


std::vector< aiNode * > *_wrap_aiNode_mChildren_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  std::vector< aiNode * > *result = 0 ;
  std::vector< aiNode * > *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (std::vector< aiNode * > *)aiNode_mChildren((aiNode const *)arg1);
  *(std::vector< aiNode * > **)&_swig_go_result = (std::vector< aiNode * > *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_aiNode_mMeshes_aig_324a1309ed911fbd(aiNode *_swig_go_0) {
  aiNode *arg1 = (aiNode *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = *(aiNode **)&_swig_go_0; 
  
  result = (std::vector< unsigned int > *)aiNode_mMeshes((aiNode const *)arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


void _wrap_aiScene_mFlags_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mFlags = arg2;
  
}


intgo _wrap_aiScene_mFlags_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mFlags);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mRootNode_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, aiNode *_swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiNode *arg2 = (aiNode *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = *(aiNode **)&_swig_go_1; 
  
  if (arg1) (arg1)->mRootNode = arg2;
  
}


aiNode *_wrap_aiScene_mRootNode_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiNode *result = 0 ;
  aiNode *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (aiNode *) ((arg1)->mRootNode);
  *(aiNode **)&_swig_go_result = (aiNode *)result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumMeshes_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumMeshes = arg2;
  
}


intgo _wrap_aiScene_mNumMeshes_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumMeshes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumMaterials_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumMaterials = arg2;
  
}


intgo _wrap_aiScene_mNumMaterials_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumMaterials);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumAnimations_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumAnimations = arg2;
  
}


intgo _wrap_aiScene_mNumAnimations_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumAnimations);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumTextures_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumTextures = arg2;
  
}


intgo _wrap_aiScene_mNumTextures_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumTextures);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumLights_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumLights = arg2;
  
}


intgo _wrap_aiScene_mNumLights_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumLights);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mNumCameras_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, intgo _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumCameras = arg2;
  
}


intgo _wrap_aiScene_mNumCameras_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumCameras);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiScene_mMetaData_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, aiMetadata *_swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiMetadata *arg2 = (aiMetadata *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = *(aiMetadata **)&_swig_go_1; 
  
  if (arg1) (arg1)->mMetaData = arg2;
  
}


aiMetadata *_wrap_aiScene_mMetaData_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  aiMetadata *result = 0 ;
  aiMetadata *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (aiMetadata *) ((arg1)->mMetaData);
  *(aiMetadata **)&_swig_go_result = (aiMetadata *)result; 
  return _swig_go_result;
}


aiScene *_wrap_new_aiScene_aig_324a1309ed911fbd() {
  aiScene *result = 0 ;
  aiScene *_swig_go_result;
  
  
  result = (aiScene *)new aiScene();
  *(aiScene **)&_swig_go_result = (aiScene *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiScene_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_aiScene_HasMeshes_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasMeshes();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasMaterials_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasMaterials();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasLights_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasLights();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasTextures_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasTextures();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasCameras_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasCameras();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiScene_HasAnimations_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (bool)((aiScene const *)arg1)->HasAnimations();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_aiScene_GetShortFilename_aig_324a1309ed911fbd(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (char *)aiScene::GetShortFilename((char const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  free(arg1); 
  return _swig_go_result;
}


aiTexture *_wrap_aiScene_GetEmbeddedTexture_aig_324a1309ed911fbd(aiScene *_swig_go_0, _gostring_ _swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  char *arg2 = (char *) 0 ;
  aiTexture *result = 0 ;
  aiTexture *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (aiTexture *)((aiScene const *)arg1)->GetEmbeddedTexture((char const *)arg2);
  *(aiTexture **)&_swig_go_result = (aiTexture *)result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_aiScene_mPrivate_set_aig_324a1309ed911fbd(aiScene *_swig_go_0, void *_swig_go_1) {
  aiScene *arg1 = (aiScene *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  
  if (arg1) (arg1)->mPrivate = arg2;
  
}


void *_wrap_aiScene_mPrivate_get_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (void *) ((arg1)->mPrivate);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< aiAnimation * > *_wrap_aiScene_mAnimations_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiAnimation * > *result = 0 ;
  std::vector< aiAnimation * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiAnimation * > *)aiScene_mAnimations((aiScene const *)arg1);
  *(std::vector< aiAnimation * > **)&_swig_go_result = (std::vector< aiAnimation * > *)result; 
  return _swig_go_result;
}


std::vector< aiCamera * > *_wrap_aiScene_mCameras_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiCamera * > *result = 0 ;
  std::vector< aiCamera * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiCamera * > *)aiScene_mCameras((aiScene const *)arg1);
  *(std::vector< aiCamera * > **)&_swig_go_result = (std::vector< aiCamera * > *)result; 
  return _swig_go_result;
}


std::vector< aiLight * > *_wrap_aiScene_mLights_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiLight * > *result = 0 ;
  std::vector< aiLight * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiLight * > *)aiScene_mLights((aiScene const *)arg1);
  *(std::vector< aiLight * > **)&_swig_go_result = (std::vector< aiLight * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterial * > *_wrap_aiScene_mMaterials_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiMaterial * > *result = 0 ;
  std::vector< aiMaterial * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiMaterial * > *)aiScene_mMaterials((aiScene const *)arg1);
  *(std::vector< aiMaterial * > **)&_swig_go_result = (std::vector< aiMaterial * > *)result; 
  return _swig_go_result;
}


std::vector< aiMesh * > *_wrap_aiScene_mMeshes_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiMesh * > *result = 0 ;
  std::vector< aiMesh * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiMesh * > *)aiScene_mMeshes((aiScene const *)arg1);
  *(std::vector< aiMesh * > **)&_swig_go_result = (std::vector< aiMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiTexture * > *_wrap_aiScene_mTextures_aig_324a1309ed911fbd(aiScene *_swig_go_0) {
  aiScene *arg1 = (aiScene *) 0 ;
  std::vector< aiTexture * > *result = 0 ;
  std::vector< aiTexture * > *_swig_go_result;
  
  arg1 = *(aiScene **)&_swig_go_0; 
  
  result = (std::vector< aiTexture * > *)aiScene_mTextures((aiScene const *)arg1);
  *(std::vector< aiTexture * > **)&_swig_go_result = (std::vector< aiTexture * > *)result; 
  return _swig_go_result;
}


void _wrap_aiFace_mNumIndices_set_aig_324a1309ed911fbd(aiFace *_swig_go_0, intgo _swig_go_1) {
  aiFace *arg1 = (aiFace *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumIndices = arg2;
  
}


intgo _wrap_aiFace_mNumIndices_get_aig_324a1309ed911fbd(aiFace *_swig_go_0) {
  aiFace *arg1 = (aiFace *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumIndices);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiFace *_wrap_new_aiFace__SWIG_0_aig_324a1309ed911fbd() {
  aiFace *result = 0 ;
  aiFace *_swig_go_result;
  
  
  result = (aiFace *)new aiFace();
  *(aiFace **)&_swig_go_result = (aiFace *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiFace_aig_324a1309ed911fbd(aiFace *_swig_go_0) {
  aiFace *arg1 = (aiFace *) 0 ;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  
  delete arg1;
  
}


aiFace *_wrap_new_aiFace__SWIG_1_aig_324a1309ed911fbd(aiFace *_swig_go_0) {
  aiFace *arg1 = 0 ;
  aiFace *result = 0 ;
  aiFace *_swig_go_result;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  
  result = (aiFace *)new aiFace((aiFace const &)*arg1);
  *(aiFace **)&_swig_go_result = (aiFace *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_aiFace_mIndices_aig_324a1309ed911fbd(aiFace *_swig_go_0) {
  aiFace *arg1 = (aiFace *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = *(aiFace **)&_swig_go_0; 
  
  result = (std::vector< unsigned int > *)aiFace_mIndices((aiFace const *)arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeight_mVertexId_set_aig_324a1309ed911fbd(aiVertexWeight *_swig_go_0, intgo _swig_go_1) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mVertexId = arg2;
  
}


intgo _wrap_aiVertexWeight_mVertexId_get_aig_324a1309ed911fbd(aiVertexWeight *_swig_go_0) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mVertexId);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeight_mWeight_set_aig_324a1309ed911fbd(aiVertexWeight *_swig_go_0, float _swig_go_1) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  float arg2 ;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mWeight = arg2;
  
}


float _wrap_aiVertexWeight_mWeight_get_aig_324a1309ed911fbd(aiVertexWeight *_swig_go_0) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  
  result = (float) ((arg1)->mWeight);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiVertexWeight *_wrap_new_aiVertexWeight__SWIG_0_aig_324a1309ed911fbd() {
  aiVertexWeight *result = 0 ;
  aiVertexWeight *_swig_go_result;
  
  
  result = (aiVertexWeight *)new aiVertexWeight();
  *(aiVertexWeight **)&_swig_go_result = (aiVertexWeight *)result; 
  return _swig_go_result;
}


aiVertexWeight *_wrap_new_aiVertexWeight__SWIG_1_aig_324a1309ed911fbd(intgo _swig_go_0, float _swig_go_1) {
  unsigned int arg1 ;
  float arg2 ;
  aiVertexWeight *result = 0 ;
  aiVertexWeight *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  result = (aiVertexWeight *)new aiVertexWeight(arg1,arg2);
  *(aiVertexWeight **)&_swig_go_result = (aiVertexWeight *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiVertexWeight_aig_324a1309ed911fbd(aiVertexWeight *_swig_go_0) {
  aiVertexWeight *arg1 = (aiVertexWeight *) 0 ;
  
  arg1 = *(aiVertexWeight **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiBone_mName_set_aig_324a1309ed911fbd(aiBone *_swig_go_0, aiString *_swig_go_1) {
  aiBone *arg1 = (aiBone *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiBone_mName_get_aig_324a1309ed911fbd(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiBone_mNumWeights_set_aig_324a1309ed911fbd(aiBone *_swig_go_0, intgo _swig_go_1) {
  aiBone *arg1 = (aiBone *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumWeights = arg2;
  
}


intgo _wrap_aiBone_mNumWeights_get_aig_324a1309ed911fbd(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumWeights);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiBone_mOffsetMatrix_set_aig_324a1309ed911fbd(aiBone *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiBone *arg1 = (aiBone *) 0 ;
  aiMatrix4x4 *arg2 = (aiMatrix4x4 *) 0 ;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4 **)&_swig_go_1; 
  
  if (arg1) (arg1)->mOffsetMatrix = *arg2;
  
}


aiMatrix4x4t< float > *_wrap_aiBone_mOffsetMatrix_get_aig_324a1309ed911fbd(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  aiMatrix4x4 *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result = (aiMatrix4x4 *)& ((arg1)->mOffsetMatrix);
  *(aiMatrix4x4 **)&_swig_go_result = (aiMatrix4x4 *)result; 
  return _swig_go_result;
}


aiBone *_wrap_new_aiBone__SWIG_0_aig_324a1309ed911fbd() {
  aiBone *result = 0 ;
  aiBone *_swig_go_result;
  
  
  result = (aiBone *)new aiBone();
  *(aiBone **)&_swig_go_result = (aiBone *)result; 
  return _swig_go_result;
}


aiBone *_wrap_new_aiBone__SWIG_1_aig_324a1309ed911fbd(aiBone *_swig_go_0) {
  aiBone *arg1 = 0 ;
  aiBone *result = 0 ;
  aiBone *_swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result = (aiBone *)new aiBone((aiBone const &)*arg1);
  *(aiBone **)&_swig_go_result = (aiBone *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiBone_aig_324a1309ed911fbd(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiVertexWeight * > *_wrap_aiBone_mWeights_aig_324a1309ed911fbd(aiBone *_swig_go_0) {
  aiBone *arg1 = (aiBone *) 0 ;
  std::vector< aiVertexWeight * > *result = 0 ;
  std::vector< aiVertexWeight * > *_swig_go_result;
  
  arg1 = *(aiBone **)&_swig_go_0; 
  
  result = (std::vector< aiVertexWeight * > *)aiBone_mWeights((aiBone const *)arg1);
  *(std::vector< aiVertexWeight * > **)&_swig_go_result = (std::vector< aiVertexWeight * > *)result; 
  return _swig_go_result;
}


intgo _wrap_aiPrimitiveType_POINT_aig_324a1309ed911fbd() {
  aiPrimitiveType result;
  intgo _swig_go_result;
  
  
  result = aiPrimitiveType_POINT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPrimitiveType_LINE_aig_324a1309ed911fbd() {
  aiPrimitiveType result;
  intgo _swig_go_result;
  
  
  result = aiPrimitiveType_LINE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPrimitiveType_TRIANGLE_aig_324a1309ed911fbd() {
  aiPrimitiveType result;
  intgo _swig_go_result;
  
  
  result = aiPrimitiveType_TRIANGLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPrimitiveType_POLYGON_aig_324a1309ed911fbd() {
  aiPrimitiveType result;
  intgo _swig_go_result;
  
  
  result = aiPrimitiveType_POLYGON;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiAnimMesh_mName_set_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0, aiString *_swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiAnimMesh_mName_get_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiAnimMesh_mNumVertices_set_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0, intgo _swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumVertices = arg2;
  
}


intgo _wrap_aiAnimMesh_mNumVertices_get_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumVertices);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimMesh_mWeight_set_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0, float _swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  float arg2 ;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mWeight = arg2;
  
}


float _wrap_aiAnimMesh_mWeight_get_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (float) ((arg1)->mWeight);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiAnimMesh *_wrap_new_aiAnimMesh_aig_324a1309ed911fbd() {
  aiAnimMesh *result = 0 ;
  aiAnimMesh *_swig_go_result;
  
  
  result = (aiAnimMesh *)new aiAnimMesh();
  *(aiAnimMesh **)&_swig_go_result = (aiAnimMesh *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiAnimMesh_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_aiAnimMesh_HasPositions_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasPositions();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiAnimMesh_HasNormals_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasNormals();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiAnimMesh_HasTangentsAndBitangents_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasTangentsAndBitangents();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiAnimMesh_HasVertexColors_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0, intgo _swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasVertexColors(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiAnimMesh_HasTextureCoords_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0, intgo _swig_go_1) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (bool)((aiAnimMesh const *)arg1)->HasTextureCoords(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_aiAnimMesh_mVertices_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiAnimMesh_mVertices((aiAnimMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_aiAnimMesh_mNormals_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiAnimMesh_mNormals((aiAnimMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_aiAnimMesh_mTangents_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiAnimMesh_mTangents((aiAnimMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_aiAnimMesh_mBitangents_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiAnimMesh_mBitangents((aiAnimMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiVector3t< float > * > > *_wrap_aiAnimMesh_mTextureCoords_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3t< float > * > > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiVector3D * > > *)aiAnimMesh_mTextureCoords((aiAnimMesh const *)arg1);
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiColor4t< float > * > > *_wrap_aiAnimMesh_mColors_aig_324a1309ed911fbd(aiAnimMesh *_swig_go_0) {
  aiAnimMesh *arg1 = (aiAnimMesh *) 0 ;
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4t< float > * > > *_swig_go_result;
  
  arg1 = *(aiAnimMesh **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiColor4D * > > *)aiAnimMesh_mColors((aiAnimMesh const *)arg1);
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


intgo _wrap_aiMorphingMethod_VERTEX_BLEND_aig_324a1309ed911fbd() {
  aiMorphingMethod result;
  intgo _swig_go_result;
  
  
  result = aiMorphingMethod_VERTEX_BLEND;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiMorphingMethod_MORPH_NORMALIZED_aig_324a1309ed911fbd() {
  aiMorphingMethod result;
  intgo _swig_go_result;
  
  
  result = aiMorphingMethod_MORPH_NORMALIZED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiMorphingMethod_MORPH_RELATIVE_aig_324a1309ed911fbd() {
  aiMorphingMethod result;
  intgo _swig_go_result;
  
  
  result = aiMorphingMethod_MORPH_RELATIVE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mPrimitiveTypes_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mPrimitiveTypes = arg2;
  
}


intgo _wrap_aiMesh_mPrimitiveTypes_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mPrimitiveTypes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mNumVertices_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumVertices = arg2;
  
}


intgo _wrap_aiMesh_mNumVertices_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumVertices);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mNumFaces_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumFaces = arg2;
  
}


intgo _wrap_aiMesh_mNumFaces_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumFaces);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mNumBones_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumBones = arg2;
  
}


intgo _wrap_aiMesh_mNumBones_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumBones);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mMaterialIndex_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mMaterialIndex = arg2;
  
}


intgo _wrap_aiMesh_mMaterialIndex_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mMaterialIndex);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mName_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, aiString *_swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiMesh_mName_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mNumAnimMeshes_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumAnimMeshes = arg2;
  
}


intgo _wrap_aiMesh_mNumAnimMeshes_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumAnimMeshes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mMethod_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mMethod = arg2;
  
}


intgo _wrap_aiMesh_mMethod_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mMethod);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMesh_mAABB_set_aig_324a1309ed911fbd(aiMesh *_swig_go_0, aiAABB *_swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  aiAABB arg2 ;
  aiAABB *argp2 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  argp2 = (aiAABB *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiAABB");
  }
  arg2 = (aiAABB)*argp2;
  
  
  if (arg1) (arg1)->mAABB = arg2;
  
}


aiAABB *_wrap_aiMesh_mAABB_get_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  aiAABB result;
  aiAABB *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result =  ((arg1)->mAABB);
  *(aiAABB **)&_swig_go_result = new aiAABB(result); 
  return _swig_go_result;
}


aiMesh *_wrap_new_aiMesh_aig_324a1309ed911fbd() {
  aiMesh *result = 0 ;
  aiMesh *_swig_go_result;
  
  
  result = (aiMesh *)new aiMesh();
  *(aiMesh **)&_swig_go_result = (aiMesh *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMesh_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_aiMesh_HasPositions_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasPositions();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasFaces_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasFaces();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasNormals_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasNormals();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasTangentsAndBitangents_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasTangentsAndBitangents();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasVertexColors_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (bool)((aiMesh const *)arg1)->HasVertexColors(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasTextureCoords_aig_324a1309ed911fbd(aiMesh *_swig_go_0, intgo _swig_go_1) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (bool)((aiMesh const *)arg1)->HasTextureCoords(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_aiMesh_GetNumUVChannels_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int)((aiMesh const *)arg1)->GetNumUVChannels();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_aiMesh_GetNumColorChannels_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (unsigned int)((aiMesh const *)arg1)->GetNumColorChannels();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMesh_HasBones_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (bool)((aiMesh const *)arg1)->HasBones();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< aiAnimMesh * > *_wrap_aiMesh_mAnimMeshes_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiAnimMesh * > *result = 0 ;
  std::vector< aiAnimMesh * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiAnimMesh * > *)aiMesh_mAnimMeshes((aiMesh const *)arg1);
  *(std::vector< aiAnimMesh * > **)&_swig_go_result = (std::vector< aiAnimMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiBone * > *_wrap_aiMesh_mBones_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiBone * > *result = 0 ;
  std::vector< aiBone * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiBone * > *)aiMesh_mBones((aiMesh const *)arg1);
  *(std::vector< aiBone * > **)&_swig_go_result = (std::vector< aiBone * > *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_aiMesh_mNumUVComponents_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< unsigned int > *)aiMesh_mNumUVComponents((aiMesh const *)arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_aiMesh_mVertices_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiMesh_mVertices((aiMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_aiMesh_mNormals_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiMesh_mNormals((aiMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_aiMesh_mTangents_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiMesh_mTangents((aiMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_aiMesh_mBitangents_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)aiMesh_mBitangents((aiMesh const *)arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiFace * > *_wrap_aiMesh_mFaces_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< aiFace * > *result = 0 ;
  std::vector< aiFace * > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< aiFace * > *)aiMesh_mFaces((aiMesh const *)arg1);
  *(std::vector< aiFace * > **)&_swig_go_result = (std::vector< aiFace * > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiVector3t< float > * > > *_wrap_aiMesh_mTextureCoords_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3t< float > * > > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiVector3D * > > *)aiMesh_mTextureCoords((aiMesh const *)arg1);
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiColor4t< float > * > > *_wrap_aiMesh_mColors_aig_324a1309ed911fbd(aiMesh *_swig_go_0) {
  aiMesh *arg1 = (aiMesh *) 0 ;
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4t< float > * > > *_swig_go_result;
  
  arg1 = *(aiMesh **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiColor4D * > > *)aiMesh_mColors((aiMesh const *)arg1);
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


long long _wrap_MAXLEN_get_aig_324a1309ed911fbd() {
  size_t result;
  long long _swig_go_result;
  
  
  result = (size_t)MAXLEN;
  _swig_go_result = result; 
  return _swig_go_result;
}


aiPlane *_wrap_new_aiPlane__SWIG_0_aig_324a1309ed911fbd() {
  aiPlane *result = 0 ;
  aiPlane *_swig_go_result;
  
  
  result = (aiPlane *)new aiPlane();
  *(aiPlane **)&_swig_go_result = (aiPlane *)result; 
  return _swig_go_result;
}


aiPlane *_wrap_new_aiPlane__SWIG_1_aig_324a1309ed911fbd(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  ai_real arg1 ;
  ai_real arg2 ;
  ai_real arg3 ;
  ai_real arg4 ;
  aiPlane *result = 0 ;
  aiPlane *_swig_go_result;
  
  arg1 = (ai_real)_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  arg3 = (ai_real)_swig_go_2; 
  arg4 = (ai_real)_swig_go_3; 
  
  result = (aiPlane *)new aiPlane(arg1,arg2,arg3,arg4);
  *(aiPlane **)&_swig_go_result = (aiPlane *)result; 
  return _swig_go_result;
}


aiPlane *_wrap_new_aiPlane__SWIG_2_aig_324a1309ed911fbd(aiPlane *_swig_go_0) {
  aiPlane *arg1 = 0 ;
  aiPlane *result = 0 ;
  aiPlane *_swig_go_result;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  
  result = (aiPlane *)new aiPlane((aiPlane const &)*arg1);
  *(aiPlane **)&_swig_go_result = (aiPlane *)result; 
  return _swig_go_result;
}


void _wrap_aiPlane_a_set_aig_324a1309ed911fbd(aiPlane *_swig_go_0, float _swig_go_1) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  ai_real arg2 ;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  
  if (arg1) (arg1)->a = arg2;
  
}


float _wrap_aiPlane_a_get_aig_324a1309ed911fbd(aiPlane *_swig_go_0) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  ai_real result;
  float _swig_go_result;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  
  result = (ai_real) ((arg1)->a);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiPlane_b_set_aig_324a1309ed911fbd(aiPlane *_swig_go_0, float _swig_go_1) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  ai_real arg2 ;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  
  if (arg1) (arg1)->b = arg2;
  
}


float _wrap_aiPlane_b_get_aig_324a1309ed911fbd(aiPlane *_swig_go_0) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  ai_real result;
  float _swig_go_result;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  
  result = (ai_real) ((arg1)->b);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiPlane_c_set_aig_324a1309ed911fbd(aiPlane *_swig_go_0, float _swig_go_1) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  ai_real arg2 ;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  
  if (arg1) (arg1)->c = arg2;
  
}


float _wrap_aiPlane_c_get_aig_324a1309ed911fbd(aiPlane *_swig_go_0) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  ai_real result;
  float _swig_go_result;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  
  result = (ai_real) ((arg1)->c);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiPlane_d_set_aig_324a1309ed911fbd(aiPlane *_swig_go_0, float _swig_go_1) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  ai_real arg2 ;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  
  if (arg1) (arg1)->d = arg2;
  
}


float _wrap_aiPlane_d_get_aig_324a1309ed911fbd(aiPlane *_swig_go_0) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  ai_real result;
  float _swig_go_result;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  
  result = (ai_real) ((arg1)->d);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_aiPlane_aig_324a1309ed911fbd(aiPlane *_swig_go_0) {
  aiPlane *arg1 = (aiPlane *) 0 ;
  
  arg1 = *(aiPlane **)&_swig_go_0; 
  
  delete arg1;
  
}


aiRay *_wrap_new_aiRay__SWIG_0_aig_324a1309ed911fbd() {
  aiRay *result = 0 ;
  aiRay *_swig_go_result;
  
  
  result = (aiRay *)new aiRay();
  *(aiRay **)&_swig_go_result = (aiRay *)result; 
  return _swig_go_result;
}


aiRay *_wrap_new_aiRay__SWIG_1_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiVector3D *arg1 = 0 ;
  aiVector3D *arg2 = 0 ;
  aiRay *result = 0 ;
  aiRay *_swig_go_result;
  
  arg1 = *(aiVector3D **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  result = (aiRay *)new aiRay((aiVector3D const &)*arg1,(aiVector3D const &)*arg2);
  *(aiRay **)&_swig_go_result = (aiRay *)result; 
  return _swig_go_result;
}


aiRay *_wrap_new_aiRay__SWIG_2_aig_324a1309ed911fbd(aiRay *_swig_go_0) {
  aiRay *arg1 = 0 ;
  aiRay *result = 0 ;
  aiRay *_swig_go_result;
  
  arg1 = *(aiRay **)&_swig_go_0; 
  
  result = (aiRay *)new aiRay((aiRay const &)*arg1);
  *(aiRay **)&_swig_go_result = (aiRay *)result; 
  return _swig_go_result;
}


void _wrap_aiRay_pos_set_aig_324a1309ed911fbd(aiRay *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiRay *arg1 = (aiRay *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiRay **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->pos = *arg2;
  
}


aiVector3t< float > *_wrap_aiRay_pos_get_aig_324a1309ed911fbd(aiRay *_swig_go_0) {
  aiRay *arg1 = (aiRay *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiRay **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->pos);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


void _wrap_aiRay_dir_set_aig_324a1309ed911fbd(aiRay *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiRay *arg1 = (aiRay *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiRay **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->dir = *arg2;
  
}


aiVector3t< float > *_wrap_aiRay_dir_get_aig_324a1309ed911fbd(aiRay *_swig_go_0) {
  aiRay *arg1 = (aiRay *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiRay **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->dir);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiRay_aig_324a1309ed911fbd(aiRay *_swig_go_0) {
  aiRay *arg1 = (aiRay *) 0 ;
  
  arg1 = *(aiRay **)&_swig_go_0; 
  
  delete arg1;
  
}


aiColor3D *_wrap_new_aiColor3D__SWIG_0_aig_324a1309ed911fbd() {
  aiColor3D *result = 0 ;
  aiColor3D *_swig_go_result;
  
  
  result = (aiColor3D *)new aiColor3D();
  *(aiColor3D **)&_swig_go_result = (aiColor3D *)result; 
  return _swig_go_result;
}


aiColor3D *_wrap_new_aiColor3D__SWIG_1_aig_324a1309ed911fbd(float _swig_go_0, float _swig_go_1, float _swig_go_2) {
  ai_real arg1 ;
  ai_real arg2 ;
  ai_real arg3 ;
  aiColor3D *result = 0 ;
  aiColor3D *_swig_go_result;
  
  arg1 = (ai_real)_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  arg3 = (ai_real)_swig_go_2; 
  
  result = (aiColor3D *)new aiColor3D(arg1,arg2,arg3);
  *(aiColor3D **)&_swig_go_result = (aiColor3D *)result; 
  return _swig_go_result;
}


aiColor3D *_wrap_new_aiColor3D__SWIG_2_aig_324a1309ed911fbd(float _swig_go_0) {
  ai_real arg1 ;
  aiColor3D *result = 0 ;
  aiColor3D *_swig_go_result;
  
  arg1 = (ai_real)_swig_go_0; 
  
  result = (aiColor3D *)new aiColor3D(arg1);
  *(aiColor3D **)&_swig_go_result = (aiColor3D *)result; 
  return _swig_go_result;
}


aiColor3D *_wrap_new_aiColor3D__SWIG_3_aig_324a1309ed911fbd(aiColor3D *_swig_go_0) {
  aiColor3D *arg1 = 0 ;
  aiColor3D *result = 0 ;
  aiColor3D *_swig_go_result;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  
  result = (aiColor3D *)new aiColor3D((aiColor3D const &)*arg1);
  *(aiColor3D **)&_swig_go_result = (aiColor3D *)result; 
  return _swig_go_result;
}


bool _wrap_aiColor3D_IsBlack_aig_324a1309ed911fbd(aiColor3D *_swig_go_0) {
  aiColor3D *arg1 = (aiColor3D *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  
  result = (bool)((aiColor3D const *)arg1)->IsBlack();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor3D_r_set_aig_324a1309ed911fbd(aiColor3D *_swig_go_0, float _swig_go_1) {
  aiColor3D *arg1 = (aiColor3D *) 0 ;
  ai_real arg2 ;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  
  if (arg1) (arg1)->r = arg2;
  
}


float _wrap_aiColor3D_r_get_aig_324a1309ed911fbd(aiColor3D *_swig_go_0) {
  aiColor3D *arg1 = (aiColor3D *) 0 ;
  ai_real result;
  float _swig_go_result;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  
  result = (ai_real) ((arg1)->r);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor3D_g_set_aig_324a1309ed911fbd(aiColor3D *_swig_go_0, float _swig_go_1) {
  aiColor3D *arg1 = (aiColor3D *) 0 ;
  ai_real arg2 ;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  
  if (arg1) (arg1)->g = arg2;
  
}


float _wrap_aiColor3D_g_get_aig_324a1309ed911fbd(aiColor3D *_swig_go_0) {
  aiColor3D *arg1 = (aiColor3D *) 0 ;
  ai_real result;
  float _swig_go_result;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  
  result = (ai_real) ((arg1)->g);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor3D_b_set_aig_324a1309ed911fbd(aiColor3D *_swig_go_0, float _swig_go_1) {
  aiColor3D *arg1 = (aiColor3D *) 0 ;
  ai_real arg2 ;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  
  if (arg1) (arg1)->b = arg2;
  
}


float _wrap_aiColor3D_b_get_aig_324a1309ed911fbd(aiColor3D *_swig_go_0) {
  aiColor3D *arg1 = (aiColor3D *) 0 ;
  ai_real result;
  float _swig_go_result;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  
  result = (ai_real) ((arg1)->b);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_aiColor3D_aig_324a1309ed911fbd(aiColor3D *_swig_go_0) {
  aiColor3D *arg1 = (aiColor3D *) 0 ;
  
  arg1 = *(aiColor3D **)&_swig_go_0; 
  
  delete arg1;
  
}


aiString *_wrap_new_aiString__SWIG_0_aig_324a1309ed911fbd() {
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  
  result = (aiString *)new aiString();
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


aiString *_wrap_new_aiString__SWIG_1_aig_324a1309ed911fbd(aiString *_swig_go_0) {
  aiString *arg1 = 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  result = (aiString *)new aiString((aiString const &)*arg1);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


aiString *_wrap_new_aiString__SWIG_2_aig_324a1309ed911fbd(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  result = (aiString *)new aiString((std::string const &)*arg1);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiString_Set_aig_324a1309ed911fbd(aiString *_swig_go_0, _gostring_ _swig_go_1) {
  aiString *arg1 = (aiString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  (arg1)->Set((char const *)arg2);
  
  free(arg2); 
}


void _wrap_aiString_Append_aig_324a1309ed911fbd(aiString *_swig_go_0, _gostring_ _swig_go_1) {
  aiString *arg1 = (aiString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  (arg1)->Append((char const *)arg2);
  
  free(arg2); 
}


void _wrap_aiString_Clear_aig_324a1309ed911fbd(aiString *_swig_go_0) {
  aiString *arg1 = (aiString *) 0 ;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  (arg1)->Clear();
  
}


_gostring_ _wrap_aiString_C_Str_aig_324a1309ed911fbd(aiString *_swig_go_0) {
  aiString *arg1 = (aiString *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  result = (char *)((aiString const *)arg1)->C_Str();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_aiString_length_set_aig_324a1309ed911fbd(aiString *_swig_go_0, uint32_t *_swig_go_1) {
  aiString *arg1 = (aiString *) 0 ;
  ai_uint32 arg2 ;
  ai_uint32 *argp2 ;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  argp2 = (ai_uint32 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ai_uint32");
  }
  arg2 = (ai_uint32)*argp2;
  
  
  if (arg1) (arg1)->length = arg2;
  
}


uint32_t *_wrap_aiString_length_get_aig_324a1309ed911fbd(aiString *_swig_go_0) {
  aiString *arg1 = (aiString *) 0 ;
  ai_uint32 result;
  uint32_t *_swig_go_result;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  result =  ((arg1)->length);
  *(ai_uint32 **)&_swig_go_result = new ai_uint32(result); 
  return _swig_go_result;
}


void _wrap_aiString_data_set_aig_324a1309ed911fbd(aiString *_swig_go_0, _gostring_ _swig_go_1) {
  aiString *arg1 = (aiString *) 0 ;
  char *arg2 ;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->data, (const char *)arg2, MAXLEN-1);
      arg1->data[MAXLEN-1] = 0;
    } else {
      arg1->data[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_aiString_data_get_aig_324a1309ed911fbd(aiString *_swig_go_0) {
  aiString *arg1 = (aiString *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->data);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_delete_aiString_aig_324a1309ed911fbd(aiString *_swig_go_0) {
  aiString *arg1 = (aiString *) 0 ;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_aiReturn_SUCCESS_aig_324a1309ed911fbd() {
  aiReturn result;
  intgo _swig_go_result;
  
  
  result = aiReturn_SUCCESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiReturn_FAILURE_aig_324a1309ed911fbd() {
  aiReturn result;
  intgo _swig_go_result;
  
  
  result = aiReturn_FAILURE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiReturn_OUTOFMEMORY_aig_324a1309ed911fbd() {
  aiReturn result;
  intgo _swig_go_result;
  
  
  result = aiReturn_OUTOFMEMORY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap__AI_ENFORCE_ENUM_SIZE_aig_324a1309ed911fbd() {
  aiReturn result;
  intgo _swig_go_result;
  
  
  result = _AI_ENFORCE_ENUM_SIZE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiOrigin_SET_aig_324a1309ed911fbd() {
  aiOrigin result;
  intgo _swig_go_result;
  
  
  result = aiOrigin_SET;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiOrigin_CUR_aig_324a1309ed911fbd() {
  aiOrigin result;
  intgo _swig_go_result;
  
  
  result = aiOrigin_CUR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiOrigin_END_aig_324a1309ed911fbd() {
  aiOrigin result;
  intgo _swig_go_result;
  
  
  result = aiOrigin_END;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap__AI_ORIGIN_ENFORCE_ENUM_SIZE_aig_324a1309ed911fbd() {
  aiOrigin result;
  intgo _swig_go_result;
  
  
  result = _AI_ORIGIN_ENFORCE_ENUM_SIZE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiDefaultLogStream_FILE_aig_324a1309ed911fbd() {
  aiDefaultLogStream result;
  intgo _swig_go_result;
  
  
  result = aiDefaultLogStream_FILE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiDefaultLogStream_STDOUT_aig_324a1309ed911fbd() {
  aiDefaultLogStream result;
  intgo _swig_go_result;
  
  
  result = aiDefaultLogStream_STDOUT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiDefaultLogStream_STDERR_aig_324a1309ed911fbd() {
  aiDefaultLogStream result;
  intgo _swig_go_result;
  
  
  result = aiDefaultLogStream_STDERR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiDefaultLogStream_DEBUGGER_aig_324a1309ed911fbd() {
  aiDefaultLogStream result;
  intgo _swig_go_result;
  
  
  result = aiDefaultLogStream_DEBUGGER;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap__AI_DLS_ENFORCE_ENUM_SIZE_aig_324a1309ed911fbd() {
  aiDefaultLogStream result;
  intgo _swig_go_result;
  
  
  result = _AI_DLS_ENFORCE_ENUM_SIZE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


aiMemoryInfo *_wrap_new_aiMemoryInfo_aig_324a1309ed911fbd() {
  aiMemoryInfo *result = 0 ;
  aiMemoryInfo *_swig_go_result;
  
  
  result = (aiMemoryInfo *)new aiMemoryInfo();
  *(aiMemoryInfo **)&_swig_go_result = (aiMemoryInfo *)result; 
  return _swig_go_result;
}


void _wrap_aiMemoryInfo_textures_set_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0, intgo _swig_go_1) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->textures = arg2;
  
}


intgo _wrap_aiMemoryInfo_textures_get_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->textures);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMemoryInfo_materials_set_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0, intgo _swig_go_1) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->materials = arg2;
  
}


intgo _wrap_aiMemoryInfo_materials_get_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->materials);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMemoryInfo_meshes_set_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0, intgo _swig_go_1) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->meshes = arg2;
  
}


intgo _wrap_aiMemoryInfo_meshes_get_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->meshes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMemoryInfo_nodes_set_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0, intgo _swig_go_1) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->nodes = arg2;
  
}


intgo _wrap_aiMemoryInfo_nodes_get_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->nodes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMemoryInfo_animations_set_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0, intgo _swig_go_1) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->animations = arg2;
  
}


intgo _wrap_aiMemoryInfo_animations_get_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->animations);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMemoryInfo_cameras_set_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0, intgo _swig_go_1) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->cameras = arg2;
  
}


intgo _wrap_aiMemoryInfo_cameras_get_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->cameras);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMemoryInfo_lights_set_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0, intgo _swig_go_1) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->lights = arg2;
  
}


intgo _wrap_aiMemoryInfo_lights_get_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->lights);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMemoryInfo_total_set_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0, intgo _swig_go_1) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->total = arg2;
  
}


intgo _wrap_aiMemoryInfo_total_get_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->total);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_aiMemoryInfo_aig_324a1309ed911fbd(aiMemoryInfo *_swig_go_0) {
  aiMemoryInfo *arg1 = (aiMemoryInfo *) 0 ;
  
  arg1 = *(aiMemoryInfo **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiTexel_b_set_aig_324a1309ed911fbd(aiTexel *_swig_go_0, char _swig_go_1) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  if (arg1) (arg1)->b = arg2;
  
}


char _wrap_aiTexel_b_get_aig_324a1309ed911fbd(aiTexel *_swig_go_0) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  
  result = (unsigned char) ((arg1)->b);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTexel_g_set_aig_324a1309ed911fbd(aiTexel *_swig_go_0, char _swig_go_1) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  if (arg1) (arg1)->g = arg2;
  
}


char _wrap_aiTexel_g_get_aig_324a1309ed911fbd(aiTexel *_swig_go_0) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  
  result = (unsigned char) ((arg1)->g);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTexel_r_set_aig_324a1309ed911fbd(aiTexel *_swig_go_0, char _swig_go_1) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  if (arg1) (arg1)->r = arg2;
  
}


char _wrap_aiTexel_r_get_aig_324a1309ed911fbd(aiTexel *_swig_go_0) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  
  result = (unsigned char) ((arg1)->r);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTexel_a_set_aig_324a1309ed911fbd(aiTexel *_swig_go_0, char _swig_go_1) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  if (arg1) (arg1)->a = arg2;
  
}


char _wrap_aiTexel_a_get_aig_324a1309ed911fbd(aiTexel *_swig_go_0) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  
  result = (unsigned char) ((arg1)->a);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiTexel *_wrap_new_aiTexel_aig_324a1309ed911fbd() {
  aiTexel *result = 0 ;
  aiTexel *_swig_go_result;
  
  
  result = (aiTexel *)new aiTexel();
  *(aiTexel **)&_swig_go_result = (aiTexel *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiTexel_aig_324a1309ed911fbd(aiTexel *_swig_go_0) {
  aiTexel *arg1 = (aiTexel *) 0 ;
  
  arg1 = *(aiTexel **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiTexture_mWidth_set_aig_324a1309ed911fbd(aiTexture *_swig_go_0, intgo _swig_go_1) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mWidth = arg2;
  
}


intgo _wrap_aiTexture_mWidth_get_aig_324a1309ed911fbd(aiTexture *_swig_go_0) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mWidth);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTexture_mHeight_set_aig_324a1309ed911fbd(aiTexture *_swig_go_0, intgo _swig_go_1) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mHeight = arg2;
  
}


intgo _wrap_aiTexture_mHeight_get_aig_324a1309ed911fbd(aiTexture *_swig_go_0) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mHeight);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTexture_achFormatHint_set_aig_324a1309ed911fbd(aiTexture *_swig_go_0, _gostring_ _swig_go_1) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  char *arg2 ;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->achFormatHint, (const char *)arg2, 9-1);
      arg1->achFormatHint[9-1] = 0;
    } else {
      arg1->achFormatHint[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_aiTexture_achFormatHint_get_aig_324a1309ed911fbd(aiTexture *_swig_go_0) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->achFormatHint);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_aiTexture_pcData_set_aig_324a1309ed911fbd(aiTexture *_swig_go_0, aiTexel *_swig_go_1) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  aiTexel *arg2 = (aiTexel *) 0 ;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  arg2 = *(aiTexel **)&_swig_go_1; 
  
  if (arg1) (arg1)->pcData = arg2;
  
}


aiTexel *_wrap_aiTexture_pcData_get_aig_324a1309ed911fbd(aiTexture *_swig_go_0) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  aiTexel *result = 0 ;
  aiTexel *_swig_go_result;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  
  result = (aiTexel *) ((arg1)->pcData);
  *(aiTexel **)&_swig_go_result = (aiTexel *)result; 
  return _swig_go_result;
}


void _wrap_aiTexture_mFilename_set_aig_324a1309ed911fbd(aiTexture *_swig_go_0, aiString *_swig_go_1) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mFilename = *arg2;
  
}


aiString *_wrap_aiTexture_mFilename_get_aig_324a1309ed911fbd(aiTexture *_swig_go_0) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mFilename);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


bool _wrap_aiTexture_CheckFormat_aig_324a1309ed911fbd(aiTexture *_swig_go_0, _gostring_ _swig_go_1) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (bool)((aiTexture const *)arg1)->CheckFormat((char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


aiTexture *_wrap_new_aiTexture_aig_324a1309ed911fbd() {
  aiTexture *result = 0 ;
  aiTexture *_swig_go_result;
  
  
  result = (aiTexture *)new aiTexture();
  *(aiTexture **)&_swig_go_result = (aiTexture *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiTexture_aig_324a1309ed911fbd(aiTexture *_swig_go_0) {
  aiTexture *arg1 = (aiTexture *) 0 ;
  
  arg1 = *(aiTexture **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_aiLightSource_UNDEFINED_aig_324a1309ed911fbd() {
  aiLightSourceType result;
  intgo _swig_go_result;
  
  
  result = aiLightSource_UNDEFINED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiLightSource_DIRECTIONAL_aig_324a1309ed911fbd() {
  aiLightSourceType result;
  intgo _swig_go_result;
  
  
  result = aiLightSource_DIRECTIONAL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiLightSource_POINT_aig_324a1309ed911fbd() {
  aiLightSourceType result;
  intgo _swig_go_result;
  
  
  result = aiLightSource_POINT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiLightSource_SPOT_aig_324a1309ed911fbd() {
  aiLightSourceType result;
  intgo _swig_go_result;
  
  
  result = aiLightSource_SPOT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiLightSource_AMBIENT_aig_324a1309ed911fbd() {
  aiLightSourceType result;
  intgo _swig_go_result;
  
  
  result = aiLightSource_AMBIENT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiLightSource_AREA_aig_324a1309ed911fbd() {
  aiLightSourceType result;
  intgo _swig_go_result;
  
  
  result = aiLightSource_AREA;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mName_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, aiString *_swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiLight_mName_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mType_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, intgo _swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  enum aiLightSourceType arg2 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = (enum aiLightSourceType)_swig_go_1; 
  
  if (arg1) (arg1)->mType = arg2;
  
}


intgo _wrap_aiLight_mType_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  enum aiLightSourceType result;
  intgo _swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (enum aiLightSourceType) ((arg1)->mType);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mPosition_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mPosition = *arg2;
  
}


aiVector3t< float > *_wrap_aiLight_mPosition_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->mPosition);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mDirection_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mDirection = *arg2;
  
}


aiVector3t< float > *_wrap_aiLight_mDirection_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->mDirection);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mUp_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mUp = *arg2;
  
}


aiVector3t< float > *_wrap_aiLight_mUp_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->mUp);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mAttenuationConstant_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, float _swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  float arg2 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mAttenuationConstant = arg2;
  
}


float _wrap_aiLight_mAttenuationConstant_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (float) ((arg1)->mAttenuationConstant);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLight_mAttenuationLinear_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, float _swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  float arg2 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mAttenuationLinear = arg2;
  
}


float _wrap_aiLight_mAttenuationLinear_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (float) ((arg1)->mAttenuationLinear);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLight_mAttenuationQuadratic_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, float _swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  float arg2 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mAttenuationQuadratic = arg2;
  
}


float _wrap_aiLight_mAttenuationQuadratic_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (float) ((arg1)->mAttenuationQuadratic);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLight_mColorDiffuse_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, aiColor3D *_swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiColor3D *arg2 = (aiColor3D *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = *(aiColor3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mColorDiffuse = *arg2;
  
}


aiColor3D *_wrap_aiLight_mColorDiffuse_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiColor3D *result = 0 ;
  aiColor3D *_swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (aiColor3D *)& ((arg1)->mColorDiffuse);
  *(aiColor3D **)&_swig_go_result = (aiColor3D *)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mColorSpecular_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, aiColor3D *_swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiColor3D *arg2 = (aiColor3D *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = *(aiColor3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mColorSpecular = *arg2;
  
}


aiColor3D *_wrap_aiLight_mColorSpecular_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiColor3D *result = 0 ;
  aiColor3D *_swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (aiColor3D *)& ((arg1)->mColorSpecular);
  *(aiColor3D **)&_swig_go_result = (aiColor3D *)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mColorAmbient_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, aiColor3D *_swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiColor3D *arg2 = (aiColor3D *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = *(aiColor3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mColorAmbient = *arg2;
  
}


aiColor3D *_wrap_aiLight_mColorAmbient_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiColor3D *result = 0 ;
  aiColor3D *_swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (aiColor3D *)& ((arg1)->mColorAmbient);
  *(aiColor3D **)&_swig_go_result = (aiColor3D *)result; 
  return _swig_go_result;
}


void _wrap_aiLight_mAngleInnerCone_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, float _swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  float arg2 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mAngleInnerCone = arg2;
  
}


float _wrap_aiLight_mAngleInnerCone_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (float) ((arg1)->mAngleInnerCone);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLight_mAngleOuterCone_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, float _swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  float arg2 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mAngleOuterCone = arg2;
  
}


float _wrap_aiLight_mAngleOuterCone_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (float) ((arg1)->mAngleOuterCone);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLight_mSize_set_aig_324a1309ed911fbd(aiLight *_swig_go_0, aiVector2t< float > *_swig_go_1) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiVector2D *arg2 = (aiVector2D *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  arg2 = *(aiVector2D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mSize = *arg2;
  
}


aiVector2t< float > *_wrap_aiLight_mSize_get_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  aiVector2D *result = 0 ;
  aiVector2t< float > *_swig_go_result;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  result = (aiVector2D *)& ((arg1)->mSize);
  *(aiVector2D **)&_swig_go_result = (aiVector2D *)result; 
  return _swig_go_result;
}


aiLight *_wrap_new_aiLight_aig_324a1309ed911fbd() {
  aiLight *result = 0 ;
  aiLight *_swig_go_result;
  
  
  result = (aiLight *)new aiLight();
  *(aiLight **)&_swig_go_result = (aiLight *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiLight_aig_324a1309ed911fbd(aiLight *_swig_go_0) {
  aiLight *arg1 = (aiLight *) 0 ;
  
  arg1 = *(aiLight **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiCamera_mName_set_aig_324a1309ed911fbd(aiCamera *_swig_go_0, aiString *_swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiCamera_mName_get_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiCamera_mPosition_set_aig_324a1309ed911fbd(aiCamera *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mPosition = *arg2;
  
}


aiVector3t< float > *_wrap_aiCamera_mPosition_get_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->mPosition);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


void _wrap_aiCamera_mUp_set_aig_324a1309ed911fbd(aiCamera *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mUp = *arg2;
  
}


aiVector3t< float > *_wrap_aiCamera_mUp_get_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->mUp);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


void _wrap_aiCamera_mLookAt_set_aig_324a1309ed911fbd(aiCamera *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mLookAt = *arg2;
  
}


aiVector3t< float > *_wrap_aiCamera_mLookAt_get_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->mLookAt);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


void _wrap_aiCamera_mHorizontalFOV_set_aig_324a1309ed911fbd(aiCamera *_swig_go_0, float _swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  float arg2 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mHorizontalFOV = arg2;
  
}


float _wrap_aiCamera_mHorizontalFOV_get_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  result = (float) ((arg1)->mHorizontalFOV);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiCamera_mClipPlaneNear_set_aig_324a1309ed911fbd(aiCamera *_swig_go_0, float _swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  float arg2 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mClipPlaneNear = arg2;
  
}


float _wrap_aiCamera_mClipPlaneNear_get_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  result = (float) ((arg1)->mClipPlaneNear);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiCamera_mClipPlaneFar_set_aig_324a1309ed911fbd(aiCamera *_swig_go_0, float _swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  float arg2 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mClipPlaneFar = arg2;
  
}


float _wrap_aiCamera_mClipPlaneFar_get_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  result = (float) ((arg1)->mClipPlaneFar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiCamera_mAspect_set_aig_324a1309ed911fbd(aiCamera *_swig_go_0, float _swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  float arg2 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->mAspect = arg2;
  
}


float _wrap_aiCamera_mAspect_get_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  result = (float) ((arg1)->mAspect);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiCamera *_wrap_new_aiCamera_aig_324a1309ed911fbd() {
  aiCamera *result = 0 ;
  aiCamera *_swig_go_result;
  
  
  result = (aiCamera *)new aiCamera();
  *(aiCamera **)&_swig_go_result = (aiCamera *)result; 
  return _swig_go_result;
}


void _wrap_aiCamera_GetCameraMatrix_aig_324a1309ed911fbd(aiCamera *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  aiMatrix4x4 *arg2 = 0 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4 **)&_swig_go_1; 
  
  ((aiCamera const *)arg1)->GetCameraMatrix(*arg2);
  
}


void _wrap_delete_aiCamera_aig_324a1309ed911fbd(aiCamera *_swig_go_0) {
  aiCamera *arg1 = (aiCamera *) 0 ;
  
  arg1 = *(aiCamera **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_aiTextureOp_Multiply_aig_324a1309ed911fbd() {
  aiTextureOp result;
  intgo _swig_go_result;
  
  
  result = aiTextureOp_Multiply;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureOp_Add_aig_324a1309ed911fbd() {
  aiTextureOp result;
  intgo _swig_go_result;
  
  
  result = aiTextureOp_Add;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureOp_Subtract_aig_324a1309ed911fbd() {
  aiTextureOp result;
  intgo _swig_go_result;
  
  
  result = aiTextureOp_Subtract;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureOp_Divide_aig_324a1309ed911fbd() {
  aiTextureOp result;
  intgo _swig_go_result;
  
  
  result = aiTextureOp_Divide;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureOp_SmoothAdd_aig_324a1309ed911fbd() {
  aiTextureOp result;
  intgo _swig_go_result;
  
  
  result = aiTextureOp_SmoothAdd;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureOp_SignedAdd_aig_324a1309ed911fbd() {
  aiTextureOp result;
  intgo _swig_go_result;
  
  
  result = aiTextureOp_SignedAdd;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapMode_Wrap_aig_324a1309ed911fbd() {
  aiTextureMapMode result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapMode_Wrap;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapMode_Clamp_aig_324a1309ed911fbd() {
  aiTextureMapMode result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapMode_Clamp;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapMode_Decal_aig_324a1309ed911fbd() {
  aiTextureMapMode result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapMode_Decal;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapMode_Mirror_aig_324a1309ed911fbd() {
  aiTextureMapMode result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapMode_Mirror;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapping_UV_aig_324a1309ed911fbd() {
  aiTextureMapping result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapping_UV;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapping_SPHERE_aig_324a1309ed911fbd() {
  aiTextureMapping result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapping_SPHERE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapping_CYLINDER_aig_324a1309ed911fbd() {
  aiTextureMapping result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapping_CYLINDER;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapping_BOX_aig_324a1309ed911fbd() {
  aiTextureMapping result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapping_BOX;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapping_PLANE_aig_324a1309ed911fbd() {
  aiTextureMapping result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapping_PLANE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureMapping_OTHER_aig_324a1309ed911fbd() {
  aiTextureMapping result;
  intgo _swig_go_result;
  
  
  result = aiTextureMapping_OTHER;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_NONE_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_NONE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_DIFFUSE_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_DIFFUSE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_SPECULAR_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_SPECULAR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_AMBIENT_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_AMBIENT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_EMISSIVE_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_EMISSIVE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_HEIGHT_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_HEIGHT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_NORMALS_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_NORMALS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_SHININESS_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_SHININESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_OPACITY_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_OPACITY;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_DISPLACEMENT_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_DISPLACEMENT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_LIGHTMAP_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_LIGHTMAP;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_REFLECTION_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_REFLECTION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_BASE_COLOR_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_BASE_COLOR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_NORMAL_CAMERA_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_NORMAL_CAMERA;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_EMISSION_COLOR_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_EMISSION_COLOR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_METALNESS_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_METALNESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_DIFFUSE_ROUGHNESS_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_DIFFUSE_ROUGHNESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_AMBIENT_OCCLUSION_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_AMBIENT_OCCLUSION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureType_UNKNOWN_aig_324a1309ed911fbd() {
  aiTextureType result;
  intgo _swig_go_result;
  
  
  result = aiTextureType_UNKNOWN;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_Flat_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_Flat;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_Gouraud_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_Gouraud;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_Phong_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_Phong;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_Blinn_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_Blinn;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_Toon_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_Toon;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_OrenNayar_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_OrenNayar;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_Minnaert_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_Minnaert;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_CookTorrance_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_CookTorrance;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_NoShading_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_NoShading;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiShadingMode_Fresnel_aig_324a1309ed911fbd() {
  aiShadingMode result;
  intgo _swig_go_result;
  
  
  result = aiShadingMode_Fresnel;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureFlags_Invert_aig_324a1309ed911fbd() {
  aiTextureFlags result;
  intgo _swig_go_result;
  
  
  result = aiTextureFlags_Invert;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureFlags_UseAlpha_aig_324a1309ed911fbd() {
  aiTextureFlags result;
  intgo _swig_go_result;
  
  
  result = aiTextureFlags_UseAlpha;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiTextureFlags_IgnoreAlpha_aig_324a1309ed911fbd() {
  aiTextureFlags result;
  intgo _swig_go_result;
  
  
  result = aiTextureFlags_IgnoreAlpha;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiBlendMode_Default_aig_324a1309ed911fbd() {
  aiBlendMode result;
  intgo _swig_go_result;
  
  
  result = aiBlendMode_Default;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiBlendMode_Additive_aig_324a1309ed911fbd() {
  aiBlendMode result;
  intgo _swig_go_result;
  
  
  result = aiBlendMode_Additive;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiUVTransform_mTranslation_set_aig_324a1309ed911fbd(aiUVTransform *_swig_go_0, aiVector2t< float > *_swig_go_1) {
  aiUVTransform *arg1 = (aiUVTransform *) 0 ;
  aiVector2D *arg2 = (aiVector2D *) 0 ;
  
  arg1 = *(aiUVTransform **)&_swig_go_0; 
  arg2 = *(aiVector2D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mTranslation = *arg2;
  
}


aiVector2t< float > *_wrap_aiUVTransform_mTranslation_get_aig_324a1309ed911fbd(aiUVTransform *_swig_go_0) {
  aiUVTransform *arg1 = (aiUVTransform *) 0 ;
  aiVector2D *result = 0 ;
  aiVector2t< float > *_swig_go_result;
  
  arg1 = *(aiUVTransform **)&_swig_go_0; 
  
  result = (aiVector2D *)& ((arg1)->mTranslation);
  *(aiVector2D **)&_swig_go_result = (aiVector2D *)result; 
  return _swig_go_result;
}


void _wrap_aiUVTransform_mScaling_set_aig_324a1309ed911fbd(aiUVTransform *_swig_go_0, aiVector2t< float > *_swig_go_1) {
  aiUVTransform *arg1 = (aiUVTransform *) 0 ;
  aiVector2D *arg2 = (aiVector2D *) 0 ;
  
  arg1 = *(aiUVTransform **)&_swig_go_0; 
  arg2 = *(aiVector2D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mScaling = *arg2;
  
}


aiVector2t< float > *_wrap_aiUVTransform_mScaling_get_aig_324a1309ed911fbd(aiUVTransform *_swig_go_0) {
  aiUVTransform *arg1 = (aiUVTransform *) 0 ;
  aiVector2D *result = 0 ;
  aiVector2t< float > *_swig_go_result;
  
  arg1 = *(aiUVTransform **)&_swig_go_0; 
  
  result = (aiVector2D *)& ((arg1)->mScaling);
  *(aiVector2D **)&_swig_go_result = (aiVector2D *)result; 
  return _swig_go_result;
}


void _wrap_aiUVTransform_mRotation_set_aig_324a1309ed911fbd(aiUVTransform *_swig_go_0, float _swig_go_1) {
  aiUVTransform *arg1 = (aiUVTransform *) 0 ;
  ai_real arg2 ;
  
  arg1 = *(aiUVTransform **)&_swig_go_0; 
  arg2 = (ai_real)_swig_go_1; 
  
  if (arg1) (arg1)->mRotation = arg2;
  
}


float _wrap_aiUVTransform_mRotation_get_aig_324a1309ed911fbd(aiUVTransform *_swig_go_0) {
  aiUVTransform *arg1 = (aiUVTransform *) 0 ;
  ai_real result;
  float _swig_go_result;
  
  arg1 = *(aiUVTransform **)&_swig_go_0; 
  
  result = (ai_real) ((arg1)->mRotation);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiUVTransform *_wrap_new_aiUVTransform_aig_324a1309ed911fbd() {
  aiUVTransform *result = 0 ;
  aiUVTransform *_swig_go_result;
  
  
  result = (aiUVTransform *)new aiUVTransform();
  *(aiUVTransform **)&_swig_go_result = (aiUVTransform *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiUVTransform_aig_324a1309ed911fbd(aiUVTransform *_swig_go_0) {
  aiUVTransform *arg1 = (aiUVTransform *) 0 ;
  
  arg1 = *(aiUVTransform **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_aiPTI_Float_aig_324a1309ed911fbd() {
  aiPropertyTypeInfo result;
  intgo _swig_go_result;
  
  
  result = aiPTI_Float;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPTI_Double_aig_324a1309ed911fbd() {
  aiPropertyTypeInfo result;
  intgo _swig_go_result;
  
  
  result = aiPTI_Double;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPTI_String_aig_324a1309ed911fbd() {
  aiPropertyTypeInfo result;
  intgo _swig_go_result;
  
  
  result = aiPTI_String;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPTI_Integer_aig_324a1309ed911fbd() {
  aiPropertyTypeInfo result;
  intgo _swig_go_result;
  
  
  result = aiPTI_Integer;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiPTI_Buffer_aig_324a1309ed911fbd() {
  aiPropertyTypeInfo result;
  intgo _swig_go_result;
  
  
  result = aiPTI_Buffer;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiMaterialProperty_mKey_set_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0, aiString *_swig_go_1) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mKey = *arg2;
  
}


aiString *_wrap_aiMaterialProperty_mKey_get_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mKey);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiMaterialProperty_mSemantic_set_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0, intgo _swig_go_1) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mSemantic = arg2;
  
}


intgo _wrap_aiMaterialProperty_mSemantic_get_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mSemantic);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialProperty_mIndex_set_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0, intgo _swig_go_1) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mIndex = arg2;
  
}


intgo _wrap_aiMaterialProperty_mIndex_get_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mIndex);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialProperty_mDataLength_set_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0, intgo _swig_go_1) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mDataLength = arg2;
  
}


intgo _wrap_aiMaterialProperty_mDataLength_get_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mDataLength);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialProperty_mType_set_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0, intgo _swig_go_1) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  enum aiPropertyTypeInfo arg2 ;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  arg2 = (enum aiPropertyTypeInfo)_swig_go_1; 
  
  if (arg1) (arg1)->mType = arg2;
  
}


intgo _wrap_aiMaterialProperty_mType_get_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  enum aiPropertyTypeInfo result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  
  result = (enum aiPropertyTypeInfo) ((arg1)->mType);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiMaterialProperty_mData_set_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0, _gostring_ _swig_go_1) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->mData;
    if (arg2) {
      arg1->mData = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->mData, (const char *)arg2);
    } else {
      arg1->mData = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_aiMaterialProperty_mData_get_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  
  result = (char *) ((arg1)->mData);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


aiMaterialProperty *_wrap_new_aiMaterialProperty_aig_324a1309ed911fbd() {
  aiMaterialProperty *result = 0 ;
  aiMaterialProperty *_swig_go_result;
  
  
  result = (aiMaterialProperty *)new aiMaterialProperty();
  *(aiMaterialProperty **)&_swig_go_result = (aiMaterialProperty *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMaterialProperty_aig_324a1309ed911fbd(aiMaterialProperty *_swig_go_0) {
  aiMaterialProperty *arg1 = (aiMaterialProperty *) 0 ;
  
  arg1 = *(aiMaterialProperty **)&_swig_go_0; 
  
  delete arg1;
  
}


aiMaterial *_wrap_new_aiMaterial_aig_324a1309ed911fbd() {
  aiMaterial *result = 0 ;
  aiMaterial *_swig_go_result;
  
  
  result = (aiMaterial *)new aiMaterial();
  *(aiMaterial **)&_swig_go_result = (aiMaterial *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMaterial_aig_324a1309ed911fbd(aiMaterial *_swig_go_0) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  delete arg1;
  
}


aiString *_wrap_aiMaterial_GetName_aig_324a1309ed911fbd(aiMaterial *_swig_go_0) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiString result;
  aiString *_swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  result = (arg1)->GetName();
  *(aiString **)&_swig_go_result = new aiString(result); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_Get__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int *arg5 = (int *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(int **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->Get((char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_Get__SWIG_2_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, float *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  ai_real *arg5 = (ai_real *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(ai_real **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->Get((char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_Get__SWIG_4_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, int *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(int **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->Get((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_Get__SWIG_5_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, ai_real *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  ai_real *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(ai_real **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->Get((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_Get__SWIG_6_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiString *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiString *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiString **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->Get((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_Get__SWIG_7_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiColor3D *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiColor3D *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiColor3D **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->Get((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_Get__SWIG_8_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiColor4t< float > *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiColor4D *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiColor4D **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->Get((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_Get__SWIG_9_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiUVTransform *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiUVTransform *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiUVTransform **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->Get((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetTextureCount_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiTextureType arg2 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (aiTextureType)_swig_go_1; 
  
  result = (unsigned int)((aiMaterial const *)arg1)->GetTextureCount(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetTexture__SWIG_0_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, aiString *_swig_go_3, aiTextureMapping *_swig_go_4, _goslice_ _swig_go_5, _goslice_ _swig_go_6, aiTextureOp *_swig_go_7, aiTextureMapMode *_swig_go_8) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiTextureType arg2 ;
  unsigned int arg3 ;
  aiString *arg4 = (aiString *) 0 ;
  aiTextureMapping *arg5 = (aiTextureMapping *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  ai_real *arg7 = (ai_real *) 0 ;
  aiTextureOp *arg8 = (aiTextureOp *) 0 ;
  aiTextureMapMode *arg9 = (aiTextureMapMode *) 0 ;
  unsigned int temp6 ;
  ai_real temp7 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (aiTextureType)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = *(aiString **)&_swig_go_3; 
  arg5 = *(aiTextureMapping **)&_swig_go_4; 
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = &temp6;
  }
  {
    if (_swig_go_6.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg7 = &temp7;
  }
  arg8 = *(aiTextureOp **)&_swig_go_7; 
  arg9 = *(aiTextureMapMode **)&_swig_go_8; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->GetTexture(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  _swig_go_result = (intgo)result; 
  {
    unsigned int* a = (unsigned int *) _swig_go_5.array;
    a[0] = temp6;
  }
  {
    float* a = (float *) _swig_go_6.array;
    a[0] = temp7;
  }
  
  
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetTexture__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, aiString *_swig_go_3, aiTextureMapping *_swig_go_4, _goslice_ _swig_go_5, _goslice_ _swig_go_6, aiTextureOp *_swig_go_7) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiTextureType arg2 ;
  unsigned int arg3 ;
  aiString *arg4 = (aiString *) 0 ;
  aiTextureMapping *arg5 = (aiTextureMapping *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  ai_real *arg7 = (ai_real *) 0 ;
  aiTextureOp *arg8 = (aiTextureOp *) 0 ;
  unsigned int temp6 ;
  ai_real temp7 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (aiTextureType)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = *(aiString **)&_swig_go_3; 
  arg5 = *(aiTextureMapping **)&_swig_go_4; 
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = &temp6;
  }
  {
    if (_swig_go_6.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg7 = &temp7;
  }
  arg8 = *(aiTextureOp **)&_swig_go_7; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->GetTexture(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _swig_go_result = (intgo)result; 
  {
    unsigned int* a = (unsigned int *) _swig_go_5.array;
    a[0] = temp6;
  }
  {
    float* a = (float *) _swig_go_6.array;
    a[0] = temp7;
  }
  
  
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetTexture__SWIG_2_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, aiString *_swig_go_3, aiTextureMapping *_swig_go_4, _goslice_ _swig_go_5, _goslice_ _swig_go_6) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiTextureType arg2 ;
  unsigned int arg3 ;
  aiString *arg4 = (aiString *) 0 ;
  aiTextureMapping *arg5 = (aiTextureMapping *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  ai_real *arg7 = (ai_real *) 0 ;
  unsigned int temp6 ;
  ai_real temp7 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (aiTextureType)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = *(aiString **)&_swig_go_3; 
  arg5 = *(aiTextureMapping **)&_swig_go_4; 
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = &temp6;
  }
  {
    if (_swig_go_6.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg7 = &temp7;
  }
  
  result = (aiReturn)((aiMaterial const *)arg1)->GetTexture(arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = (intgo)result; 
  {
    unsigned int* a = (unsigned int *) _swig_go_5.array;
    a[0] = temp6;
  }
  {
    float* a = (float *) _swig_go_6.array;
    a[0] = temp7;
  }
  
  
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetTexture__SWIG_3_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, aiString *_swig_go_3, aiTextureMapping *_swig_go_4, _goslice_ _swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiTextureType arg2 ;
  unsigned int arg3 ;
  aiString *arg4 = (aiString *) 0 ;
  aiTextureMapping *arg5 = (aiTextureMapping *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  unsigned int temp6 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (aiTextureType)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = *(aiString **)&_swig_go_3; 
  arg5 = *(aiTextureMapping **)&_swig_go_4; 
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = &temp6;
  }
  
  result = (aiReturn)((aiMaterial const *)arg1)->GetTexture(arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  {
    unsigned int* a = (unsigned int *) _swig_go_5.array;
    a[0] = temp6;
  }
  
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetTexture__SWIG_4_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, aiString *_swig_go_3, aiTextureMapping *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiTextureType arg2 ;
  unsigned int arg3 ;
  aiString *arg4 = (aiString *) 0 ;
  aiTextureMapping *arg5 = (aiTextureMapping *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (aiTextureType)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = *(aiString **)&_swig_go_3; 
  arg5 = *(aiTextureMapping **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->GetTexture(arg2,arg3,arg4,arg5);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetTexture__SWIG_5_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, aiString *_swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiTextureType arg2 ;
  unsigned int arg3 ;
  aiString *arg4 = (aiString *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (aiTextureType)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = *(aiString **)&_swig_go_3; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->GetTexture(arg2,arg3,arg4);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddBinaryProperty_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  aiPropertyTypeInfo arg7 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  arg7 = (aiPropertyTypeInfo)_swig_go_6; 
  
  result = (aiReturn)(arg1)->AddBinaryProperty((void const *)arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_0_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiString *_swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = (unsigned int)_swig_go_4; 
  
  result = (aiReturn)(arg1)->AddProperty((aiString const *)arg2,(char const *)arg3,arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiString *_swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (aiReturn)(arg1)->AddProperty((aiString const *)arg2,(char const *)arg3,arg4);
  _swig_go_result = (intgo)result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_2_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiString *_swig_go_1, _gostring_ _swig_go_2) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  char *arg3 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (aiReturn)(arg1)->AddProperty((aiString const *)arg2,(char const *)arg3);
  _swig_go_result = (intgo)result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_6_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiVector3t< float > *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  
  result = (aiReturn)(arg1)->AddProperty((aiVector3D const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_7_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiVector3t< float > *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  
  result = (aiReturn)(arg1)->AddProperty((aiVector3D const *)arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_8_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiVector3t< float > *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiReturn)(arg1)->AddProperty((aiVector3D const *)arg2,arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_9_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiColor3D *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiColor3D *arg2 = (aiColor3D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiColor3D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  
  result = (aiReturn)(arg1)->AddProperty((aiColor3D const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_10_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiColor3D *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiColor3D *arg2 = (aiColor3D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiColor3D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  
  result = (aiReturn)(arg1)->AddProperty((aiColor3D const *)arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_11_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiColor3D *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiColor3D *arg2 = (aiColor3D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiColor3D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiReturn)(arg1)->AddProperty((aiColor3D const *)arg2,arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_12_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiColor4t< float > *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiColor4D *arg2 = (aiColor4D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiColor4D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  
  result = (aiReturn)(arg1)->AddProperty((aiColor4D const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_13_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiColor4t< float > *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiColor4D *arg2 = (aiColor4D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiColor4D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  
  result = (aiReturn)(arg1)->AddProperty((aiColor4D const *)arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_14_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiColor4t< float > *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiColor4D *arg2 = (aiColor4D *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiColor4D **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiReturn)(arg1)->AddProperty((aiColor4D const *)arg2,arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_15_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(int **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  
  result = (aiReturn)(arg1)->AddProperty((int const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_16_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(int **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  
  result = (aiReturn)(arg1)->AddProperty((int const *)arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_17_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(int **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiReturn)(arg1)->AddProperty((int const *)arg2,arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_18_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, float *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(float **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  
  result = (aiReturn)(arg1)->AddProperty((float const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_19_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, float *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(float **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  
  result = (aiReturn)(arg1)->AddProperty((float const *)arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_20_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, float *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(float **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiReturn)(arg1)->AddProperty((float const *)arg2,arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_21_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, double *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  
  result = (aiReturn)(arg1)->AddProperty((double const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_22_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, double *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  
  result = (aiReturn)(arg1)->AddProperty((double const *)arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_23_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, double *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiReturn)(arg1)->AddProperty((double const *)arg2,arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_24_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiUVTransform *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiUVTransform *arg2 = (aiUVTransform *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiUVTransform **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  
  result = (aiReturn)(arg1)->AddProperty((aiUVTransform const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_25_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiUVTransform *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiUVTransform *arg2 = (aiUVTransform *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiUVTransform **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (unsigned int)_swig_go_4; 
  
  result = (aiReturn)(arg1)->AddProperty((aiUVTransform const *)arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_AddProperty__SWIG_26_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiUVTransform *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiUVTransform *arg2 = (aiUVTransform *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiUVTransform **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (aiReturn)(arg1)->AddProperty((aiUVTransform const *)arg2,arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_RemoveProperty__SWIG_0_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (aiReturn)(arg1)->RemoveProperty((char const *)arg2,arg3,arg4);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_RemoveProperty__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  
  result = (aiReturn)(arg1)->RemoveProperty((char const *)arg2,arg3);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_RemoveProperty__SWIG_2_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (aiReturn)(arg1)->RemoveProperty((char const *)arg2);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_aiMaterial_Clear_aig_324a1309ed911fbd(aiMaterial *_swig_go_0) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  (arg1)->Clear();
  
}


void _wrap_aiMaterial_CopyPropertyList_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, aiMaterial *_swig_go_1) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiMaterial *arg2 = (aiMaterial *) 0 ;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = *(aiMaterial **)&_swig_go_1; 
  
  aiMaterial::CopyPropertyList(arg1,(aiMaterial const *)arg2);
  
}


void _wrap_aiMaterial_mNumProperties_set_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumProperties = arg2;
  
}


intgo _wrap_aiMaterial_mNumProperties_get_aig_324a1309ed911fbd(aiMaterial *_swig_go_0) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumProperties);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterial_mNumAllocated_set_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumAllocated = arg2;
  
}


intgo _wrap_aiMaterial_mNumAllocated_get_aig_324a1309ed911fbd(aiMaterial *_swig_go_0) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumAllocated);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< aiMaterialProperty * > *_wrap_aiMaterial_mProperties_aig_324a1309ed911fbd(aiMaterial *_swig_go_0) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  std::vector< aiMaterialProperty * > *result = 0 ;
  std::vector< aiMaterialProperty * > *_swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  result = (std::vector< aiMaterialProperty * > *)aiMaterial_mProperties((aiMaterial const *)arg1);
  *(std::vector< aiMaterialProperty * > **)&_swig_go_result = (std::vector< aiMaterialProperty * > *)result; 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetInteger__SWIG_0_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int *arg5 = (int *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(int **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< int >((char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetInteger__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, int *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(int **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< int >((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetFloat__SWIG_0_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, float *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  float *arg5 = (float *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(float **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< float >((char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetFloat__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, float *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  float *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(float **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< float >((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetColor4D__SWIG_0_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiColor4t< float > *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiColor4t< float > *arg5 = (aiColor4t< float > *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiColor4t< float > **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< aiColor4D >((char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetColor4D__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiColor4t< float > *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiColor4t< float > *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiColor4t< float > **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< aiColor4D >((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetColor3D__SWIG_0_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiColor3D *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiColor3D *arg5 = (aiColor3D *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiColor3D **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< aiColor3D >((char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetColor3D__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiColor3D *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiColor3D *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiColor3D **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< aiColor3D >((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetString__SWIG_0_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiString *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiString *arg5 = (aiString *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiString **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< aiString >((char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiMaterial_GetString__SWIG_1_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiString *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiString *arg5 = 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiString **)&_swig_go_4; 
  
  result = (aiReturn)((aiMaterial const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< aiString >((char const *)arg2,arg3,arg4,*arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialProperty_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiMaterialProperty **_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiMaterialProperty **arg5 = (aiMaterialProperty **) 0 ;
  enum aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiMaterialProperty ***)&_swig_go_4; 
  
  result = (enum aiReturn)aiGetMaterialProperty((aiMaterial const *)arg1,(char const *)arg2,arg3,arg4,(aiMaterialProperty const **)arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialFloatArray_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, float *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  ai_real *arg5 = (ai_real *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  enum aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(ai_real **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (enum aiReturn)aiGetMaterialFloatArray((aiMaterial const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialFloat_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, float *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  ai_real *arg5 = (ai_real *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(ai_real **)&_swig_go_4; 
  
  result = (aiReturn)aiGetMaterialFloat((aiMaterial const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialIntegerArray_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo *_swig_go_4, intgo *_swig_go_5) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int *arg5 = (int *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  enum aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(int **)&_swig_go_4; 
  arg6 = *(unsigned int **)&_swig_go_5; 
  
  result = (enum aiReturn)aiGetMaterialIntegerArray((aiMaterial const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialInteger_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int *arg5 = (int *) 0 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(int **)&_swig_go_4; 
  
  result = (aiReturn)aiGetMaterialInteger((aiMaterial const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialColor_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiColor4t< float > *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiColor4D *arg5 = (aiColor4D *) 0 ;
  enum aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiColor4D **)&_swig_go_4; 
  
  result = (enum aiReturn)aiGetMaterialColor((aiMaterial const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialUVTransform_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiUVTransform *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiUVTransform *arg5 = (aiUVTransform *) 0 ;
  enum aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiUVTransform **)&_swig_go_4; 
  
  result = (enum aiReturn)aiGetMaterialUVTransform((aiMaterial const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialString_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, aiString *_swig_go_4) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  aiString *arg5 = (aiString *) 0 ;
  enum aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = *(aiString **)&_swig_go_4; 
  
  result = (enum aiReturn)aiGetMaterialString((aiMaterial const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  _swig_go_result = (intgo)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialTextureCount_aig_324a1309ed911fbd(aiMaterial *_swig_go_0, intgo _swig_go_1) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  enum aiTextureType arg2 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (enum aiTextureType)_swig_go_1; 
  
  result = (unsigned int)aiGetMaterialTextureCount((aiMaterial const *)arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_aiGetMaterialTexture_aig_324a1309ed911fbd(intgo _swig_optargc, aiMaterial *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, aiString *_swig_go_3, aiTextureMapping *_swig_go_4, _goslice_ _swig_go_5, _goslice_ _swig_go_6, aiTextureOp *_swig_go_7, aiTextureMapMode *_swig_go_8, _goslice_ _swig_go_9) {
  aiMaterial *arg1 = (aiMaterial *) 0 ;
  aiTextureType arg2 ;
  unsigned int arg3 ;
  aiString *arg4 = (aiString *) 0 ;
  aiTextureMapping *arg5 = (aiTextureMapping *) NULL ;
  unsigned int *arg6 = (unsigned int *) NULL ;
  ai_real *arg7 = (ai_real *) NULL ;
  aiTextureOp *arg8 = (aiTextureOp *) NULL ;
  aiTextureMapMode *arg9 = (aiTextureMapMode *) NULL ;
  unsigned int *arg10 = (unsigned int *) NULL ;
  unsigned int temp6 ;
  ai_real temp7 ;
  unsigned int temp10 ;
  aiReturn result;
  intgo _swig_go_result;
  
  arg1 = *(aiMaterial **)&_swig_go_0; 
  arg2 = (aiTextureType)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = *(aiString **)&_swig_go_3; 
  if (_swig_optargc > 0) {
    arg5 = *(aiTextureMapping **)&_swig_go_4; 
  }
  if (_swig_optargc > 1) {
    {
      if (_swig_go_5.len == 0) {
        _swig_gopanic("array must contain at least 1 element");
      }
      arg6 = &temp6;
    }
  }
  if (_swig_optargc > 2) {
    {
      if (_swig_go_6.len == 0) {
        _swig_gopanic("array must contain at least 1 element");
      }
      arg7 = &temp7;
    }
  }
  if (_swig_optargc > 3) {
    arg8 = *(aiTextureOp **)&_swig_go_7; 
  }
  if (_swig_optargc > 4) {
    arg9 = *(aiTextureMapMode **)&_swig_go_8; 
  }
  if (_swig_optargc > 5) {
    {
      if (_swig_go_9.len == 0) {
        _swig_gopanic("array must contain at least 1 element");
      }
      arg10 = &temp10;
    }
  }
  
  result = (aiReturn)aiGetMaterialTexture((aiMaterial const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  _swig_go_result = (intgo)result; 
  {
    unsigned int* a = (unsigned int *) _swig_go_5.array;
    a[0] = temp6;
  }
  {
    float* a = (float *) _swig_go_6.array;
    a[0] = temp7;
  }
  {
    unsigned int* a = (unsigned int *) _swig_go_9.array;
    a[0] = temp10;
  }
  
  
  
  return _swig_go_result;
}


void _wrap_aiVectorKey_mTime_set_aig_324a1309ed911fbd(aiVectorKey *_swig_go_0, double _swig_go_1) {
  aiVectorKey *arg1 = (aiVectorKey *) 0 ;
  double arg2 ;
  
  arg1 = *(aiVectorKey **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->mTime = arg2;
  
}


double _wrap_aiVectorKey_mTime_get_aig_324a1309ed911fbd(aiVectorKey *_swig_go_0) {
  aiVectorKey *arg1 = (aiVectorKey *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(aiVectorKey **)&_swig_go_0; 
  
  result = (double) ((arg1)->mTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVectorKey_mValue_set_aig_324a1309ed911fbd(aiVectorKey *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiVectorKey *arg1 = (aiVectorKey *) 0 ;
  aiVector3D *arg2 = (aiVector3D *) 0 ;
  
  arg1 = *(aiVectorKey **)&_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  if (arg1) (arg1)->mValue = *arg2;
  
}


aiVector3t< float > *_wrap_aiVectorKey_mValue_get_aig_324a1309ed911fbd(aiVectorKey *_swig_go_0) {
  aiVectorKey *arg1 = (aiVectorKey *) 0 ;
  aiVector3D *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiVectorKey **)&_swig_go_0; 
  
  result = (aiVector3D *)& ((arg1)->mValue);
  *(aiVector3D **)&_swig_go_result = (aiVector3D *)result; 
  return _swig_go_result;
}


aiVectorKey *_wrap_new_aiVectorKey__SWIG_0_aig_324a1309ed911fbd() {
  aiVectorKey *result = 0 ;
  aiVectorKey *_swig_go_result;
  
  
  result = (aiVectorKey *)new aiVectorKey();
  *(aiVectorKey **)&_swig_go_result = (aiVectorKey *)result; 
  return _swig_go_result;
}


aiVectorKey *_wrap_new_aiVectorKey__SWIG_1_aig_324a1309ed911fbd(double _swig_go_0, aiVector3t< float > *_swig_go_1) {
  double arg1 ;
  aiVector3D *arg2 = 0 ;
  aiVectorKey *result = 0 ;
  aiVectorKey *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = *(aiVector3D **)&_swig_go_1; 
  
  result = (aiVectorKey *)new aiVectorKey(arg1,(aiVector3D const &)*arg2);
  *(aiVectorKey **)&_swig_go_result = (aiVectorKey *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiVectorKey_aig_324a1309ed911fbd(aiVectorKey *_swig_go_0) {
  aiVectorKey *arg1 = (aiVectorKey *) 0 ;
  
  arg1 = *(aiVectorKey **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiQuatKey_mTime_set_aig_324a1309ed911fbd(aiQuatKey *_swig_go_0, double _swig_go_1) {
  aiQuatKey *arg1 = (aiQuatKey *) 0 ;
  double arg2 ;
  
  arg1 = *(aiQuatKey **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->mTime = arg2;
  
}


double _wrap_aiQuatKey_mTime_get_aig_324a1309ed911fbd(aiQuatKey *_swig_go_0) {
  aiQuatKey *arg1 = (aiQuatKey *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(aiQuatKey **)&_swig_go_0; 
  
  result = (double) ((arg1)->mTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiQuatKey_mValue_set_aig_324a1309ed911fbd(aiQuatKey *_swig_go_0, aiQuaternion *_swig_go_1) {
  aiQuatKey *arg1 = (aiQuatKey *) 0 ;
  aiQuaternion arg2 ;
  aiQuaternion *argp2 ;
  
  arg1 = *(aiQuatKey **)&_swig_go_0; 
  
  argp2 = (aiQuaternion *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null aiQuaternion");
  }
  arg2 = (aiQuaternion)*argp2;
  
  
  if (arg1) (arg1)->mValue = arg2;
  
}


aiQuaternion *_wrap_aiQuatKey_mValue_get_aig_324a1309ed911fbd(aiQuatKey *_swig_go_0) {
  aiQuatKey *arg1 = (aiQuatKey *) 0 ;
  aiQuaternion result;
  aiQuaternion *_swig_go_result;
  
  arg1 = *(aiQuatKey **)&_swig_go_0; 
  
  result =  ((arg1)->mValue);
  *(aiQuaternion **)&_swig_go_result = new aiQuaternion(result); 
  return _swig_go_result;
}


aiQuatKey *_wrap_new_aiQuatKey__SWIG_0_aig_324a1309ed911fbd() {
  aiQuatKey *result = 0 ;
  aiQuatKey *_swig_go_result;
  
  
  result = (aiQuatKey *)new aiQuatKey();
  *(aiQuatKey **)&_swig_go_result = (aiQuatKey *)result; 
  return _swig_go_result;
}


aiQuatKey *_wrap_new_aiQuatKey__SWIG_1_aig_324a1309ed911fbd(double _swig_go_0, aiQuaternion *_swig_go_1) {
  double arg1 ;
  aiQuaternion *arg2 = 0 ;
  aiQuatKey *result = 0 ;
  aiQuatKey *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = *(aiQuaternion **)&_swig_go_1; 
  
  result = (aiQuatKey *)new aiQuatKey(arg1,(aiQuaternion const &)*arg2);
  *(aiQuatKey **)&_swig_go_result = (aiQuatKey *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiQuatKey_aig_324a1309ed911fbd(aiQuatKey *_swig_go_0) {
  aiQuatKey *arg1 = (aiQuatKey *) 0 ;
  
  arg1 = *(aiQuatKey **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiMeshKey_mTime_set_aig_324a1309ed911fbd(aiMeshKey *_swig_go_0, double _swig_go_1) {
  aiMeshKey *arg1 = (aiMeshKey *) 0 ;
  double arg2 ;
  
  arg1 = *(aiMeshKey **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->mTime = arg2;
  
}


double _wrap_aiMeshKey_mTime_get_aig_324a1309ed911fbd(aiMeshKey *_swig_go_0) {
  aiMeshKey *arg1 = (aiMeshKey *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(aiMeshKey **)&_swig_go_0; 
  
  result = (double) ((arg1)->mTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshKey_mValue_set_aig_324a1309ed911fbd(aiMeshKey *_swig_go_0, intgo _swig_go_1) {
  aiMeshKey *arg1 = (aiMeshKey *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMeshKey **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mValue = arg2;
  
}


intgo _wrap_aiMeshKey_mValue_get_aig_324a1309ed911fbd(aiMeshKey *_swig_go_0) {
  aiMeshKey *arg1 = (aiMeshKey *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMeshKey **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mValue);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiMeshKey *_wrap_new_aiMeshKey__SWIG_0_aig_324a1309ed911fbd() {
  aiMeshKey *result = 0 ;
  aiMeshKey *_swig_go_result;
  
  
  result = (aiMeshKey *)new aiMeshKey();
  *(aiMeshKey **)&_swig_go_result = (aiMeshKey *)result; 
  return _swig_go_result;
}


aiMeshKey *_wrap_new_aiMeshKey__SWIG_1_aig_324a1309ed911fbd(double _swig_go_0, intgo _swig_go_1) {
  double arg1 ;
  unsigned int arg2 ;
  aiMeshKey *result = 0 ;
  aiMeshKey *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (aiMeshKey *)new aiMeshKey(arg1,arg2);
  *(aiMeshKey **)&_swig_go_result = (aiMeshKey *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMeshKey_aig_324a1309ed911fbd(aiMeshKey *_swig_go_0) {
  aiMeshKey *arg1 = (aiMeshKey *) 0 ;
  
  arg1 = *(aiMeshKey **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiMeshMorphKey_mTime_set_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0, double _swig_go_1) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  double arg2 ;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->mTime = arg2;
  
}


double _wrap_aiMeshMorphKey_mTime_get_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  
  result = (double) ((arg1)->mTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshMorphKey_mValues_set_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0, intgo *_swig_go_1) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  arg2 = *(unsigned int **)&_swig_go_1; 
  
  if (arg1) (arg1)->mValues = arg2;
  
}


intgo *_wrap_aiMeshMorphKey_mValues_get_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  unsigned int *result = 0 ;
  intgo *_swig_go_result;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  
  result = (unsigned int *) ((arg1)->mValues);
  *(unsigned int **)&_swig_go_result = (unsigned int *)result; 
  return _swig_go_result;
}


void _wrap_aiMeshMorphKey_mWeights_set_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0, double *_swig_go_1) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  
  if (arg1) (arg1)->mWeights = arg2;
  
}


double *_wrap_aiMeshMorphKey_mWeights_get_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  double *result = 0 ;
  double *_swig_go_result;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  
  result = (double *) ((arg1)->mWeights);
  *(double **)&_swig_go_result = (double *)result; 
  return _swig_go_result;
}


void _wrap_aiMeshMorphKey_mNumValuesAndWeights_set_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0, intgo _swig_go_1) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumValuesAndWeights = arg2;
  
}


intgo _wrap_aiMeshMorphKey_mNumValuesAndWeights_get_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumValuesAndWeights);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiMeshMorphKey *_wrap_new_aiMeshMorphKey_aig_324a1309ed911fbd() {
  aiMeshMorphKey *result = 0 ;
  aiMeshMorphKey *_swig_go_result;
  
  
  result = (aiMeshMorphKey *)new aiMeshMorphKey();
  *(aiMeshMorphKey **)&_swig_go_result = (aiMeshMorphKey *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMeshMorphKey_aig_324a1309ed911fbd(aiMeshMorphKey *_swig_go_0) {
  aiMeshMorphKey *arg1 = (aiMeshMorphKey *) 0 ;
  
  arg1 = *(aiMeshMorphKey **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_aiAnimBehaviour_DEFAULT_aig_324a1309ed911fbd() {
  aiAnimBehaviour result;
  intgo _swig_go_result;
  
  
  result = aiAnimBehaviour_DEFAULT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiAnimBehaviour_CONSTANT_aig_324a1309ed911fbd() {
  aiAnimBehaviour result;
  intgo _swig_go_result;
  
  
  result = aiAnimBehaviour_CONSTANT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiAnimBehaviour_LINEAR_aig_324a1309ed911fbd() {
  aiAnimBehaviour result;
  intgo _swig_go_result;
  
  
  result = aiAnimBehaviour_LINEAR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiAnimBehaviour_REPEAT_aig_324a1309ed911fbd() {
  aiAnimBehaviour result;
  intgo _swig_go_result;
  
  
  result = aiAnimBehaviour_REPEAT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mNodeName_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, aiString *_swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mNodeName = *arg2;
  
}


aiString *_wrap_aiNodeAnim_mNodeName_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mNodeName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mNumPositionKeys_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, intgo _swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumPositionKeys = arg2;
  
}


intgo _wrap_aiNodeAnim_mNumPositionKeys_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumPositionKeys);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mPositionKeys_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, aiVectorKey *_swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  aiVectorKey *arg2 = (aiVectorKey *) 0 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = *(aiVectorKey **)&_swig_go_1; 
  
  if (arg1) (arg1)->mPositionKeys = arg2;
  
}


aiVectorKey *_wrap_aiNodeAnim_mPositionKeys_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  aiVectorKey *result = 0 ;
  aiVectorKey *_swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (aiVectorKey *) ((arg1)->mPositionKeys);
  *(aiVectorKey **)&_swig_go_result = (aiVectorKey *)result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mNumRotationKeys_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, intgo _swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumRotationKeys = arg2;
  
}


intgo _wrap_aiNodeAnim_mNumRotationKeys_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumRotationKeys);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mRotationKeys_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, aiQuatKey *_swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  aiQuatKey *arg2 = (aiQuatKey *) 0 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = *(aiQuatKey **)&_swig_go_1; 
  
  if (arg1) (arg1)->mRotationKeys = arg2;
  
}


aiQuatKey *_wrap_aiNodeAnim_mRotationKeys_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  aiQuatKey *result = 0 ;
  aiQuatKey *_swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (aiQuatKey *) ((arg1)->mRotationKeys);
  *(aiQuatKey **)&_swig_go_result = (aiQuatKey *)result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mNumScalingKeys_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, intgo _swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumScalingKeys = arg2;
  
}


intgo _wrap_aiNodeAnim_mNumScalingKeys_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumScalingKeys);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mScalingKeys_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, aiVectorKey *_swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  aiVectorKey *arg2 = (aiVectorKey *) 0 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = *(aiVectorKey **)&_swig_go_1; 
  
  if (arg1) (arg1)->mScalingKeys = arg2;
  
}


aiVectorKey *_wrap_aiNodeAnim_mScalingKeys_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  aiVectorKey *result = 0 ;
  aiVectorKey *_swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (aiVectorKey *) ((arg1)->mScalingKeys);
  *(aiVectorKey **)&_swig_go_result = (aiVectorKey *)result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mPreState_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, intgo _swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  enum aiAnimBehaviour arg2 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = (enum aiAnimBehaviour)_swig_go_1; 
  
  if (arg1) (arg1)->mPreState = arg2;
  
}


intgo _wrap_aiNodeAnim_mPreState_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  enum aiAnimBehaviour result;
  intgo _swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (enum aiAnimBehaviour) ((arg1)->mPreState);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnim_mPostState_set_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0, intgo _swig_go_1) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  enum aiAnimBehaviour arg2 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  arg2 = (enum aiAnimBehaviour)_swig_go_1; 
  
  if (arg1) (arg1)->mPostState = arg2;
  
}


intgo _wrap_aiNodeAnim_mPostState_get_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  enum aiAnimBehaviour result;
  intgo _swig_go_result;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  result = (enum aiAnimBehaviour) ((arg1)->mPostState);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


aiNodeAnim *_wrap_new_aiNodeAnim_aig_324a1309ed911fbd() {
  aiNodeAnim *result = 0 ;
  aiNodeAnim *_swig_go_result;
  
  
  result = (aiNodeAnim *)new aiNodeAnim();
  *(aiNodeAnim **)&_swig_go_result = (aiNodeAnim *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiNodeAnim_aig_324a1309ed911fbd(aiNodeAnim *_swig_go_0) {
  aiNodeAnim *arg1 = (aiNodeAnim *) 0 ;
  
  arg1 = *(aiNodeAnim **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiMeshAnim_mName_set_aig_324a1309ed911fbd(aiMeshAnim *_swig_go_0, aiString *_swig_go_1) {
  aiMeshAnim *arg1 = (aiMeshAnim *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiMeshAnim **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiMeshAnim_mName_get_aig_324a1309ed911fbd(aiMeshAnim *_swig_go_0) {
  aiMeshAnim *arg1 = (aiMeshAnim *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiMeshAnim **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiMeshAnim_mNumKeys_set_aig_324a1309ed911fbd(aiMeshAnim *_swig_go_0, intgo _swig_go_1) {
  aiMeshAnim *arg1 = (aiMeshAnim *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMeshAnim **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumKeys = arg2;
  
}


intgo _wrap_aiMeshAnim_mNumKeys_get_aig_324a1309ed911fbd(aiMeshAnim *_swig_go_0) {
  aiMeshAnim *arg1 = (aiMeshAnim *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMeshAnim **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumKeys);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshAnim_mKeys_set_aig_324a1309ed911fbd(aiMeshAnim *_swig_go_0, aiMeshKey *_swig_go_1) {
  aiMeshAnim *arg1 = (aiMeshAnim *) 0 ;
  aiMeshKey *arg2 = (aiMeshKey *) 0 ;
  
  arg1 = *(aiMeshAnim **)&_swig_go_0; 
  arg2 = *(aiMeshKey **)&_swig_go_1; 
  
  if (arg1) (arg1)->mKeys = arg2;
  
}


aiMeshKey *_wrap_aiMeshAnim_mKeys_get_aig_324a1309ed911fbd(aiMeshAnim *_swig_go_0) {
  aiMeshAnim *arg1 = (aiMeshAnim *) 0 ;
  aiMeshKey *result = 0 ;
  aiMeshKey *_swig_go_result;
  
  arg1 = *(aiMeshAnim **)&_swig_go_0; 
  
  result = (aiMeshKey *) ((arg1)->mKeys);
  *(aiMeshKey **)&_swig_go_result = (aiMeshKey *)result; 
  return _swig_go_result;
}


aiMeshAnim *_wrap_new_aiMeshAnim_aig_324a1309ed911fbd() {
  aiMeshAnim *result = 0 ;
  aiMeshAnim *_swig_go_result;
  
  
  result = (aiMeshAnim *)new aiMeshAnim();
  *(aiMeshAnim **)&_swig_go_result = (aiMeshAnim *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMeshAnim_aig_324a1309ed911fbd(aiMeshAnim *_swig_go_0) {
  aiMeshAnim *arg1 = (aiMeshAnim *) 0 ;
  
  arg1 = *(aiMeshAnim **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiMeshMorphAnim_mName_set_aig_324a1309ed911fbd(aiMeshMorphAnim *_swig_go_0, aiString *_swig_go_1) {
  aiMeshMorphAnim *arg1 = (aiMeshMorphAnim *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiMeshMorphAnim **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiMeshMorphAnim_mName_get_aig_324a1309ed911fbd(aiMeshMorphAnim *_swig_go_0) {
  aiMeshMorphAnim *arg1 = (aiMeshMorphAnim *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiMeshMorphAnim **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiMeshMorphAnim_mNumKeys_set_aig_324a1309ed911fbd(aiMeshMorphAnim *_swig_go_0, intgo _swig_go_1) {
  aiMeshMorphAnim *arg1 = (aiMeshMorphAnim *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMeshMorphAnim **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumKeys = arg2;
  
}


intgo _wrap_aiMeshMorphAnim_mNumKeys_get_aig_324a1309ed911fbd(aiMeshMorphAnim *_swig_go_0) {
  aiMeshMorphAnim *arg1 = (aiMeshMorphAnim *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMeshMorphAnim **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumKeys);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshMorphAnim_mKeys_set_aig_324a1309ed911fbd(aiMeshMorphAnim *_swig_go_0, aiMeshMorphKey *_swig_go_1) {
  aiMeshMorphAnim *arg1 = (aiMeshMorphAnim *) 0 ;
  aiMeshMorphKey *arg2 = (aiMeshMorphKey *) 0 ;
  
  arg1 = *(aiMeshMorphAnim **)&_swig_go_0; 
  arg2 = *(aiMeshMorphKey **)&_swig_go_1; 
  
  if (arg1) (arg1)->mKeys = arg2;
  
}


aiMeshMorphKey *_wrap_aiMeshMorphAnim_mKeys_get_aig_324a1309ed911fbd(aiMeshMorphAnim *_swig_go_0) {
  aiMeshMorphAnim *arg1 = (aiMeshMorphAnim *) 0 ;
  aiMeshMorphKey *result = 0 ;
  aiMeshMorphKey *_swig_go_result;
  
  arg1 = *(aiMeshMorphAnim **)&_swig_go_0; 
  
  result = (aiMeshMorphKey *) ((arg1)->mKeys);
  *(aiMeshMorphKey **)&_swig_go_result = (aiMeshMorphKey *)result; 
  return _swig_go_result;
}


aiMeshMorphAnim *_wrap_new_aiMeshMorphAnim_aig_324a1309ed911fbd() {
  aiMeshMorphAnim *result = 0 ;
  aiMeshMorphAnim *_swig_go_result;
  
  
  result = (aiMeshMorphAnim *)new aiMeshMorphAnim();
  *(aiMeshMorphAnim **)&_swig_go_result = (aiMeshMorphAnim *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMeshMorphAnim_aig_324a1309ed911fbd(aiMeshMorphAnim *_swig_go_0) {
  aiMeshMorphAnim *arg1 = (aiMeshMorphAnim *) 0 ;
  
  arg1 = *(aiMeshMorphAnim **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_aiAnimation_mName_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, aiString *_swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mName = *arg2;
  
}


aiString *_wrap_aiAnimation_mName_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (aiString *)& ((arg1)->mName);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiAnimation_mDuration_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, double _swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  double arg2 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->mDuration = arg2;
  
}


double _wrap_aiAnimation_mDuration_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (double) ((arg1)->mDuration);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimation_mTicksPerSecond_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, double _swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  double arg2 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->mTicksPerSecond = arg2;
  
}


double _wrap_aiAnimation_mTicksPerSecond_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (double) ((arg1)->mTicksPerSecond);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimation_mNumChannels_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, intgo _swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumChannels = arg2;
  
}


intgo _wrap_aiAnimation_mNumChannels_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumChannels);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimation_mChannels_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, aiNodeAnim **_swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  aiNodeAnim **arg2 = (aiNodeAnim **) 0 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = *(aiNodeAnim ***)&_swig_go_1; 
  
  if (arg1) (arg1)->mChannels = arg2;
  
}


aiNodeAnim **_wrap_aiAnimation_mChannels_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  aiNodeAnim **result = 0 ;
  aiNodeAnim **_swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (aiNodeAnim **) ((arg1)->mChannels);
  *(aiNodeAnim ***)&_swig_go_result = (aiNodeAnim **)result; 
  return _swig_go_result;
}


void _wrap_aiAnimation_mNumMeshChannels_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, intgo _swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumMeshChannels = arg2;
  
}


intgo _wrap_aiAnimation_mNumMeshChannels_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumMeshChannels);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimation_mMeshChannels_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, aiMeshAnim **_swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  aiMeshAnim **arg2 = (aiMeshAnim **) 0 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = *(aiMeshAnim ***)&_swig_go_1; 
  
  if (arg1) (arg1)->mMeshChannels = arg2;
  
}


aiMeshAnim **_wrap_aiAnimation_mMeshChannels_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  aiMeshAnim **result = 0 ;
  aiMeshAnim **_swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (aiMeshAnim **) ((arg1)->mMeshChannels);
  *(aiMeshAnim ***)&_swig_go_result = (aiMeshAnim **)result; 
  return _swig_go_result;
}


void _wrap_aiAnimation_mNumMorphMeshChannels_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, intgo _swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumMorphMeshChannels = arg2;
  
}


intgo _wrap_aiAnimation_mNumMorphMeshChannels_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumMorphMeshChannels);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimation_mMorphMeshChannels_set_aig_324a1309ed911fbd(aiAnimation *_swig_go_0, aiMeshMorphAnim **_swig_go_1) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  aiMeshMorphAnim **arg2 = (aiMeshMorphAnim **) 0 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  arg2 = *(aiMeshMorphAnim ***)&_swig_go_1; 
  
  if (arg1) (arg1)->mMorphMeshChannels = arg2;
  
}


aiMeshMorphAnim **_wrap_aiAnimation_mMorphMeshChannels_get_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  aiMeshMorphAnim **result = 0 ;
  aiMeshMorphAnim **_swig_go_result;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  result = (aiMeshMorphAnim **) ((arg1)->mMorphMeshChannels);
  *(aiMeshMorphAnim ***)&_swig_go_result = (aiMeshMorphAnim **)result; 
  return _swig_go_result;
}


aiAnimation *_wrap_new_aiAnimation_aig_324a1309ed911fbd() {
  aiAnimation *result = 0 ;
  aiAnimation *_swig_go_result;
  
  
  result = (aiAnimation *)new aiAnimation();
  *(aiAnimation **)&_swig_go_result = (aiAnimation *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiAnimation_aig_324a1309ed911fbd(aiAnimation *_swig_go_0) {
  aiAnimation *arg1 = (aiAnimation *) 0 ;
  
  arg1 = *(aiAnimation **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_AI_BOOL_aig_324a1309ed911fbd() {
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  result = AI_BOOL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AI_INT32_aig_324a1309ed911fbd() {
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  result = AI_INT32;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AI_UINT64_aig_324a1309ed911fbd() {
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  result = AI_UINT64;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AI_FLOAT_aig_324a1309ed911fbd() {
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  result = AI_FLOAT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AI_DOUBLE_aig_324a1309ed911fbd() {
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  result = AI_DOUBLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AI_AISTRING_aig_324a1309ed911fbd() {
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  result = AI_AISTRING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AI_AIVECTOR3D_aig_324a1309ed911fbd() {
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  result = AI_AIVECTOR3D;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_AI_META_MAX_aig_324a1309ed911fbd() {
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  result = AI_META_MAX;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiMetadataEntry_mType_set_aig_324a1309ed911fbd(aiMetadataEntry *_swig_go_0, intgo _swig_go_1) {
  aiMetadataEntry *arg1 = (aiMetadataEntry *) 0 ;
  aiMetadataType arg2 ;
  
  arg1 = *(aiMetadataEntry **)&_swig_go_0; 
  arg2 = (aiMetadataType)_swig_go_1; 
  
  if (arg1) (arg1)->mType = arg2;
  
}


intgo _wrap_aiMetadataEntry_mType_get_aig_324a1309ed911fbd(aiMetadataEntry *_swig_go_0) {
  aiMetadataEntry *arg1 = (aiMetadataEntry *) 0 ;
  aiMetadataType result;
  intgo _swig_go_result;
  
  arg1 = *(aiMetadataEntry **)&_swig_go_0; 
  
  result = (aiMetadataType) ((arg1)->mType);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiMetadataEntry_mData_set_aig_324a1309ed911fbd(aiMetadataEntry *_swig_go_0, void *_swig_go_1) {
  aiMetadataEntry *arg1 = (aiMetadataEntry *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = *(aiMetadataEntry **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  
  if (arg1) (arg1)->mData = arg2;
  
}


void *_wrap_aiMetadataEntry_mData_get_aig_324a1309ed911fbd(aiMetadataEntry *_swig_go_0) {
  aiMetadataEntry *arg1 = (aiMetadataEntry *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = *(aiMetadataEntry **)&_swig_go_0; 
  
  result = (void *) ((arg1)->mData);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


aiMetadataEntry *_wrap_new_aiMetadataEntry_aig_324a1309ed911fbd() {
  aiMetadataEntry *result = 0 ;
  aiMetadataEntry *_swig_go_result;
  
  
  result = (aiMetadataEntry *)new aiMetadataEntry();
  *(aiMetadataEntry **)&_swig_go_result = (aiMetadataEntry *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMetadataEntry_aig_324a1309ed911fbd(aiMetadataEntry *_swig_go_0) {
  aiMetadataEntry *arg1 = (aiMetadataEntry *) 0 ;
  
  arg1 = *(aiMetadataEntry **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_GetAiType__SWIG_0_aig_324a1309ed911fbd(bool _swig_go_0) {
  bool arg1 ;
  aiMetadataType result;
  intgo _swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  result = (aiMetadataType)GetAiType(arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_GetAiType__SWIG_1_aig_324a1309ed911fbd(int32_t *_swig_go_0) {
  int32_t arg1 ;
  int32_t *argp1 ;
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  argp1 = (int32_t *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null int32_t");
  }
  arg1 = (int32_t)*argp1;
  
  
  result = (aiMetadataType)GetAiType(arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_GetAiType__SWIG_2_aig_324a1309ed911fbd(uint64_t *_swig_go_0) {
  uint64_t arg1 ;
  uint64_t *argp1 ;
  aiMetadataType result;
  intgo _swig_go_result;
  
  
  argp1 = (uint64_t *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null uint64_t");
  }
  arg1 = (uint64_t)*argp1;
  
  
  result = (aiMetadataType)GetAiType(arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_GetAiType__SWIG_3_aig_324a1309ed911fbd(float _swig_go_0) {
  float arg1 ;
  aiMetadataType result;
  intgo _swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  
  result = (aiMetadataType)GetAiType(arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_GetAiType__SWIG_4_aig_324a1309ed911fbd(double _swig_go_0) {
  double arg1 ;
  aiMetadataType result;
  intgo _swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  
  result = (aiMetadataType)GetAiType(arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_GetAiType__SWIG_5_aig_324a1309ed911fbd(aiString *_swig_go_0) {
  aiString *arg1 = 0 ;
  aiMetadataType result;
  intgo _swig_go_result;
  
  arg1 = *(aiString **)&_swig_go_0; 
  
  result = (aiMetadataType)GetAiType((aiString const &)*arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_GetAiType__SWIG_6_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3D *arg1 = 0 ;
  aiMetadataType result;
  intgo _swig_go_result;
  
  arg1 = *(aiVector3D **)&_swig_go_0; 
  
  result = (aiMetadataType)GetAiType((aiVector3t< float > const &)*arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_aiMetadata_mNumProperties_set_aig_324a1309ed911fbd(aiMetadata *_swig_go_0, intgo _swig_go_1) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->mNumProperties = arg2;
  
}


intgo _wrap_aiMetadata_mNumProperties_get_aig_324a1309ed911fbd(aiMetadata *_swig_go_0) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->mNumProperties);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMetadata_mKeys_set_aig_324a1309ed911fbd(aiMetadata *_swig_go_0, aiString *_swig_go_1) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  aiString *arg2 = (aiString *) 0 ;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  arg2 = *(aiString **)&_swig_go_1; 
  
  if (arg1) (arg1)->mKeys = arg2;
  
}


aiString *_wrap_aiMetadata_mKeys_get_aig_324a1309ed911fbd(aiMetadata *_swig_go_0) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  aiString *result = 0 ;
  aiString *_swig_go_result;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  
  result = (aiString *) ((arg1)->mKeys);
  *(aiString **)&_swig_go_result = (aiString *)result; 
  return _swig_go_result;
}


void _wrap_aiMetadata_mValues_set_aig_324a1309ed911fbd(aiMetadata *_swig_go_0, aiMetadataEntry *_swig_go_1) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  aiMetadataEntry *arg2 = (aiMetadataEntry *) 0 ;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  arg2 = *(aiMetadataEntry **)&_swig_go_1; 
  
  if (arg1) (arg1)->mValues = arg2;
  
}


aiMetadataEntry *_wrap_aiMetadata_mValues_get_aig_324a1309ed911fbd(aiMetadata *_swig_go_0) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  aiMetadataEntry *result = 0 ;
  aiMetadataEntry *_swig_go_result;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  
  result = (aiMetadataEntry *) ((arg1)->mValues);
  *(aiMetadataEntry **)&_swig_go_result = (aiMetadataEntry *)result; 
  return _swig_go_result;
}


aiMetadata *_wrap_new_aiMetadata__SWIG_0_aig_324a1309ed911fbd() {
  aiMetadata *result = 0 ;
  aiMetadata *_swig_go_result;
  
  
  result = (aiMetadata *)new aiMetadata();
  *(aiMetadata **)&_swig_go_result = (aiMetadata *)result; 
  return _swig_go_result;
}


aiMetadata *_wrap_new_aiMetadata__SWIG_1_aig_324a1309ed911fbd(aiMetadata *_swig_go_0) {
  aiMetadata *arg1 = 0 ;
  aiMetadata *result = 0 ;
  aiMetadata *_swig_go_result;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  
  result = (aiMetadata *)new aiMetadata((aiMetadata const &)*arg1);
  *(aiMetadata **)&_swig_go_result = (aiMetadata *)result; 
  return _swig_go_result;
}


void _wrap_delete_aiMetadata_aig_324a1309ed911fbd(aiMetadata *_swig_go_0) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  
  delete arg1;
  
}


aiMetadata *_wrap_aiMetadata_Alloc_aig_324a1309ed911fbd(intgo _swig_go_0) {
  unsigned int arg1 ;
  aiMetadata *result = 0 ;
  aiMetadata *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  
  result = (aiMetadata *)aiMetadata::Alloc(arg1);
  *(aiMetadata **)&_swig_go_result = (aiMetadata *)result; 
  return _swig_go_result;
}


void _wrap_aiMetadata_Dealloc_aig_324a1309ed911fbd(aiMetadata *_swig_go_0) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  
  aiMetadata::Dealloc(arg1);
  
}


bool _wrap_aiMetadata_Get_aig_324a1309ed911fbd(aiMetadata *_swig_go_0, long long _swig_go_1, aiString **_swig_go_2, aiMetadataEntry **_swig_go_3) {
  aiMetadata *arg1 = (aiMetadata *) 0 ;
  size_t arg2 ;
  aiString **arg3 = 0 ;
  aiMetadataEntry **arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMetadata **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = *(aiString ***)&_swig_go_2; 
  arg4 = *(aiMetadataEntry ***)&_swig_go_3; 
  
  result = (bool)((aiMetadata const *)arg1)->Get(arg2,(aiString const *&)*arg3,(aiMetadataEntry const *&)*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_CalcTangentSpace_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_CalcTangentSpace;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_JoinIdenticalVertices_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_JoinIdenticalVertices;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_MakeLeftHanded_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_MakeLeftHanded;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_Triangulate_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_Triangulate;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_RemoveComponent_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_RemoveComponent;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_GenNormals_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_GenNormals;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_GenSmoothNormals_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_GenSmoothNormals;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_SplitLargeMeshes_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_SplitLargeMeshes;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_PreTransformVertices_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_PreTransformVertices;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_LimitBoneWeights_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_LimitBoneWeights;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_ValidateDataStructure_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_ValidateDataStructure;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_ImproveCacheLocality_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_ImproveCacheLocality;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_RemoveRedundantMaterials_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_RemoveRedundantMaterials;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_FixInfacingNormals_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_FixInfacingNormals;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_SortByPType_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_SortByPType;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_FindDegenerates_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_FindDegenerates;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_FindInvalidData_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_FindInvalidData;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_GenUVCoords_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_GenUVCoords;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_TransformUVCoords_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_TransformUVCoords;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_FindInstances_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_FindInstances;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_OptimizeMeshes_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_OptimizeMeshes;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_OptimizeGraph_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_OptimizeGraph;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_FlipUVs_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_FlipUVs;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_FlipWindingOrder_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_FlipWindingOrder;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_SplitByBoneCount_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_SplitByBoneCount;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_Debone_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_Debone;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_GlobalScale_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_GlobalScale;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_EmbedTextures_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_EmbedTextures;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_ForceGenNormals_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_ForceGenNormals;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_DropNormals_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_DropNormals;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_aiProcess_GenBoundingBoxes_aig_324a1309ed911fbd() {
  aiPostProcessSteps result;
  intgo _swig_go_result;
  
  
  result = aiProcess_GenBoundingBoxes;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_z_stream_next_in_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, char *_swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->next_in = arg2;
  
}


char *_wrap_z_stream_next_in_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->next_in);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_z_stream_avail_in_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->avail_in = arg2;
  
}


intgo _wrap_z_stream_avail_in_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->avail_in);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_total_in_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->total_in = arg2;
  
}


long long _wrap_z_stream_total_in_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->total_in);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_next_out_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, char *_swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->next_out = arg2;
  
}


char *_wrap_z_stream_next_out_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->next_out);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_z_stream_avail_out_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->avail_out = arg2;
  
}


intgo _wrap_z_stream_avail_out_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->avail_out);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_total_out_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->total_out = arg2;
  
}


long long _wrap_z_stream_total_out_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->total_out);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_msg_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, _gostring_ _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->msg;
    if (arg2) {
      arg1->msg = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->msg, (const char *)arg2);
    } else {
      arg1->msg = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_z_stream_msg_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (char *) ((arg1)->msg);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_z_stream_state_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, internal_state *_swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  internal_state *arg2 = (internal_state *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(internal_state **)&_swig_go_1; 
  
  if (arg1) (arg1)->state = arg2;
  
}


internal_state *_wrap_z_stream_state_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  internal_state *result = 0 ;
  internal_state *_swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (internal_state *) ((arg1)->state);
  *(internal_state **)&_swig_go_result = (internal_state *)result; 
  return _swig_go_result;
}


void _wrap_z_stream_zalloc_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, void* _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  alloc_func arg2 = (alloc_func) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(alloc_func *)&_swig_go_1; 
  
  if (arg1) (arg1)->zalloc = arg2;
  
}


void* _wrap_z_stream_zalloc_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  alloc_func result;
  void* _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (alloc_func) ((arg1)->zalloc);
  *(alloc_func *)&_swig_go_result = (alloc_func)result; 
  return _swig_go_result;
}


void _wrap_z_stream_zfree_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, void* _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  free_func arg2 = (free_func) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(free_func *)&_swig_go_1; 
  
  if (arg1) (arg1)->zfree = arg2;
  
}


void* _wrap_z_stream_zfree_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  free_func result;
  void* _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (free_func) ((arg1)->zfree);
  *(free_func *)&_swig_go_result = (free_func)result; 
  return _swig_go_result;
}


void _wrap_z_stream_opaque_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, voidpf _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  voidpf arg2 = (voidpf) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = *(voidpf *)&_swig_go_1; 
  
  if (arg1) (arg1)->opaque = arg2;
  
}


voidpf _wrap_z_stream_opaque_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  voidpf result;
  voidpf _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (voidpf) ((arg1)->opaque);
  *(voidpf *)&_swig_go_result = (voidpf)result; 
  return _swig_go_result;
}


void _wrap_z_stream_data_type_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  int arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->data_type = arg2;
  
}


intgo _wrap_z_stream_data_type_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->data_type);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_adler_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->adler = arg2;
  
}


long long _wrap_z_stream_adler_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->adler);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_z_stream_reserved_set_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->reserved = arg2;
  
}


long long _wrap_z_stream_reserved_get_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->reserved);
  _swig_go_result = result; 
  return _swig_go_result;
}


z_stream_s *_wrap_new_z_stream_aig_324a1309ed911fbd() {
  z_stream_s *result = 0 ;
  z_stream_s *_swig_go_result;
  
  
  result = (z_stream_s *)new z_stream_s();
  *(z_stream_s **)&_swig_go_result = (z_stream_s *)result; 
  return _swig_go_result;
}


void _wrap_delete_z_stream_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_stream_s *arg1 = (z_stream_s *) 0 ;
  
  arg1 = *(z_stream_s **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_gz_header_text_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->text = arg2;
  
}


intgo _wrap_gz_header_text_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->text);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_time_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, long long _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uLong arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  if (arg1) (arg1)->time = arg2;
  
}


long long _wrap_gz_header_time_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uLong) ((arg1)->time);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_xflags_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->xflags = arg2;
  
}


intgo _wrap_gz_header_xflags_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->xflags);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_os_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->os = arg2;
  
}


intgo _wrap_gz_header_os_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->os);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_extra_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, char *_swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->extra = arg2;
  
}


char *_wrap_gz_header_extra_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->extra);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_gz_header_extra_len_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->extra_len = arg2;
  
}


intgo _wrap_gz_header_extra_len_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->extra_len);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_extra_max_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->extra_max = arg2;
  
}


intgo _wrap_gz_header_extra_max_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->extra_max);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_name_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, char *_swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->name = arg2;
  
}


char *_wrap_gz_header_name_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->name);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_gz_header_name_max_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->name_max = arg2;
  
}


intgo _wrap_gz_header_name_max_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->name_max);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_comment_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, char *_swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  
  if (arg1) (arg1)->comment = arg2;
  
}


char *_wrap_gz_header_comment_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  Bytef *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (Bytef *) ((arg1)->comment);
  *(Bytef **)&_swig_go_result = (Bytef *)result; 
  return _swig_go_result;
}


void _wrap_gz_header_comm_max_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (uInt)_swig_go_1; 
  
  if (arg1) (arg1)->comm_max = arg2;
  
}


intgo _wrap_gz_header_comm_max_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  uInt result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (uInt) ((arg1)->comm_max);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_hcrc_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->hcrc = arg2;
  
}


intgo _wrap_gz_header_hcrc_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->hcrc);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gz_header_done_set_aig_324a1309ed911fbd(gz_header_s *_swig_go_0, intgo _swig_go_1) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int arg2 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->done = arg2;
  
}


intgo _wrap_gz_header_done_get_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  result = (int) ((arg1)->done);
  _swig_go_result = result; 
  return _swig_go_result;
}


gz_header_s *_wrap_new_gz_header_aig_324a1309ed911fbd() {
  gz_header_s *result = 0 ;
  gz_header_s *_swig_go_result;
  
  
  result = (gz_header_s *)new gz_header_s();
  *(gz_header_s **)&_swig_go_result = (gz_header_s *)result; 
  return _swig_go_result;
}


void _wrap_delete_gz_header_aig_324a1309ed911fbd(gz_header_s *_swig_go_0) {
  gz_header_s *arg1 = (gz_header_s *) 0 ;
  
  arg1 = *(gz_header_s **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_Z_ERRNO_aig_324a1309ed911fbd() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-1));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_STREAM_ERROR_aig_324a1309ed911fbd() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-2));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_DATA_ERROR_aig_324a1309ed911fbd() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-3));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_MEM_ERROR_aig_324a1309ed911fbd() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-4));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_BUF_ERROR_aig_324a1309ed911fbd() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-5));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_VERSION_ERROR_aig_324a1309ed911fbd() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-6));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Z_DEFAULT_COMPRESSION_aig_324a1309ed911fbd() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((-1));
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_zlibVersion_aig_324a1309ed911fbd() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (char *)zlibVersion();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_deflate_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)deflate(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateEnd_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)deflateEnd(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflate_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)inflate(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateEnd_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateEnd(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateSetDictionary_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (uInt)_swig_go_2; 
  
  result = (int)deflateSetDictionary(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateGetDictionary_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, char *_swig_go_1, intgo *_swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt *arg3 = (uInt *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = *(uInt **)&_swig_go_2; 
  
  result = (int)deflateGetDictionary(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateCopy_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, z_stream_s *_swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  z_streamp arg2 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(z_streamp *)&_swig_go_1; 
  
  result = (int)deflateCopy(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateReset_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)deflateReset(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateParams_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)deflateParams(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateTune_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  result = (int)deflateTune(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_deflateBound_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, long long _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  uLong arg2 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  result = (uLong)deflateBound(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflatePending_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(unsigned int **)&_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  
  result = (int)deflatePending(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflatePrime_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)deflatePrime(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateSetHeader_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, gz_header_s *_swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  gz_headerp arg2 = (gz_headerp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(gz_headerp *)&_swig_go_1; 
  
  result = (int)deflateSetHeader(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateSetDictionary_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (uInt)_swig_go_2; 
  
  result = (int)inflateSetDictionary(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateGetDictionary_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, char *_swig_go_1, intgo *_swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt *arg3 = (uInt *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = *(uInt **)&_swig_go_2; 
  
  result = (int)inflateGetDictionary(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateSync_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateSync(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateCopy_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, z_stream_s *_swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  z_streamp arg2 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(z_streamp *)&_swig_go_1; 
  
  result = (int)inflateCopy(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateReset_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateReset(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateReset2_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)inflateReset2(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflatePrime_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)inflatePrime(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_inflateMark_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (long)inflateMark(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateGetHeader_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, gz_header_s *_swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  gz_headerp arg2 = (gz_headerp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(gz_headerp *)&_swig_go_1; 
  
  result = (int)inflateGetHeader(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateBack_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, void* _swig_go_1, void *_swig_go_2, void* _swig_go_3, void *_swig_go_4) {
  z_streamp arg1 = (z_streamp) 0 ;
  in_func arg2 = (in_func) 0 ;
  void *arg3 = (void *) 0 ;
  out_func arg4 = (out_func) 0 ;
  void *arg5 = (void *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = *(in_func *)&_swig_go_1; 
  arg3 = *(void **)&_swig_go_2; 
  arg4 = *(out_func *)&_swig_go_3; 
  arg5 = *(void **)&_swig_go_4; 
  
  result = (int)inflateBack(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateBackEnd_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateBackEnd(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_zlibCompileFlags_aig_324a1309ed911fbd() {
  uLong result;
  long long _swig_go_result;
  
  
  result = (uLong)zlibCompileFlags();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_compress_aig_324a1309ed911fbd(char *_swig_go_0, long long *_swig_go_1, char *_swig_go_2, long long _swig_go_3) {
  Bytef *arg1 = (Bytef *) 0 ;
  uLongf *arg2 = (uLongf *) 0 ;
  Bytef *arg3 = (Bytef *) 0 ;
  uLong arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bytef **)&_swig_go_0; 
  arg2 = *(uLongf **)&_swig_go_1; 
  arg3 = *(Bytef **)&_swig_go_2; 
  arg4 = (uLong)_swig_go_3; 
  
  result = (int)compress(arg1,arg2,(unsigned char const *)arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_compress2_aig_324a1309ed911fbd(char *_swig_go_0, long long *_swig_go_1, char *_swig_go_2, long long _swig_go_3, intgo _swig_go_4) {
  Bytef *arg1 = (Bytef *) 0 ;
  uLongf *arg2 = (uLongf *) 0 ;
  Bytef *arg3 = (Bytef *) 0 ;
  uLong arg4 ;
  int arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bytef **)&_swig_go_0; 
  arg2 = *(uLongf **)&_swig_go_1; 
  arg3 = *(Bytef **)&_swig_go_2; 
  arg4 = (uLong)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  result = (int)compress2(arg1,arg2,(unsigned char const *)arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_compressBound_aig_324a1309ed911fbd(long long _swig_go_0) {
  uLong arg1 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  
  result = (uLong)compressBound(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_uncompress_aig_324a1309ed911fbd(char *_swig_go_0, long long *_swig_go_1, char *_swig_go_2, long long _swig_go_3) {
  Bytef *arg1 = (Bytef *) 0 ;
  uLongf *arg2 = (uLongf *) 0 ;
  Bytef *arg3 = (Bytef *) 0 ;
  uLong arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bytef **)&_swig_go_0; 
  arg2 = *(uLongf **)&_swig_go_1; 
  arg3 = *(Bytef **)&_swig_go_2; 
  arg4 = (uLong)_swig_go_3; 
  
  result = (int)uncompress(arg1,arg2,(unsigned char const *)arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_uncompress2_aig_324a1309ed911fbd(char *_swig_go_0, long long *_swig_go_1, char *_swig_go_2, long long *_swig_go_3) {
  Bytef *arg1 = (Bytef *) 0 ;
  uLongf *arg2 = (uLongf *) 0 ;
  Bytef *arg3 = (Bytef *) 0 ;
  uLong *arg4 = (uLong *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Bytef **)&_swig_go_0; 
  arg2 = *(uLongf **)&_swig_go_1; 
  arg3 = *(Bytef **)&_swig_go_2; 
  arg4 = *(uLong **)&_swig_go_3; 
  
  result = (int)uncompress2(arg1,arg2,(unsigned char const *)arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


gzFile_s *_wrap_gzdopen_aig_324a1309ed911fbd(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  gzFile result;
  gzFile_s *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (gzFile)gzdopen(arg1,(char const *)arg2);
  *(gzFile *)&_swig_go_result = (gzFile)result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_gzbuffer_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, intgo _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  unsigned int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (int)gzbuffer(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzsetparams_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)gzsetparams(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzread_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, voidp _swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  voidp arg2 = (voidp) 0 ;
  unsigned int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = *(voidp *)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  result = (int)gzread(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_gzfread_aig_324a1309ed911fbd(voidp _swig_go_0, long long _swig_go_1, long long _swig_go_2, gzFile_s *_swig_go_3) {
  voidp arg1 = (voidp) 0 ;
  z_size_t arg2 ;
  z_size_t arg3 ;
  gzFile arg4 = (gzFile) 0 ;
  z_size_t result;
  long long _swig_go_result;
  
  arg1 = *(voidp *)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = *(gzFile *)&_swig_go_3; 
  
  result = gzfread(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzwrite_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, voidpc _swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  voidpc arg2 = (voidpc) 0 ;
  unsigned int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = *(voidpc *)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  result = (int)gzwrite(arg1,(void const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_gzfwrite_aig_324a1309ed911fbd(voidpc _swig_go_0, long long _swig_go_1, long long _swig_go_2, gzFile_s *_swig_go_3) {
  voidpc arg1 = (voidpc) 0 ;
  z_size_t arg2 ;
  z_size_t arg3 ;
  gzFile arg4 = (gzFile) 0 ;
  z_size_t result;
  long long _swig_go_result;
  
  arg1 = *(voidpc *)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = *(gzFile *)&_swig_go_3; 
  
  result = gzfwrite((void const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzprintf_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, _gostring_ _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (int)gzprintf(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_gzputs_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, _gostring_ _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (int)gzputs(arg1,(char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


_gostring_ _wrap_gzgets_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  result = (char *)gzgets(arg1,arg2,arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_gzputc_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, intgo _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)gzputc(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzgetc_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzgetc(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzungetc_aig_324a1309ed911fbd(intgo _swig_go_0, gzFile_s *_swig_go_1) {
  int arg1 ;
  gzFile arg2 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(gzFile *)&_swig_go_1; 
  
  result = (int)gzungetc(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzflush_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, intgo _swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)gzflush(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzrewind_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzrewind(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzeof_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzeof(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzdirect_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzdirect(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzclose_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzclose(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzclose_r_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzclose_r(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzclose_w_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzclose_w(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_gzerror_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, intgo *_swig_go_1) {
  gzFile arg1 = (gzFile) 0 ;
  int *arg2 = (int *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  arg2 = *(int **)&_swig_go_1; 
  
  result = (char *)gzerror(arg1,arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_gzclearerr_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  gzclearerr(arg1);
  
}


long long _wrap_adler32_aig_324a1309ed911fbd(long long _swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  uLong arg1 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt arg3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (uInt)_swig_go_2; 
  
  result = (uLong)adler32(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_adler32_z_aig_324a1309ed911fbd(long long _swig_go_0, char *_swig_go_1, long long _swig_go_2) {
  uLong arg1 ;
  Bytef *arg2 = (Bytef *) 0 ;
  z_size_t arg3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  
  result = (uLong)adler32_z(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_crc32_aig_324a1309ed911fbd(long long _swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  uLong arg1 ;
  Bytef *arg2 = (Bytef *) 0 ;
  uInt arg3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (uInt)_swig_go_2; 
  
  result = (uLong)crc32(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_crc32_z_aig_324a1309ed911fbd(long long _swig_go_0, char *_swig_go_1, long long _swig_go_2) {
  uLong arg1 ;
  Bytef *arg2 = (Bytef *) 0 ;
  z_size_t arg3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = *(Bytef **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  
  result = (uLong)crc32_z(arg1,(unsigned char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateInit__aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (int)_swig_go_3; 
  
  result = (int)deflateInit_(arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_inflateInit__aig_324a1309ed911fbd(z_stream_s *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  z_streamp arg1 = (z_streamp) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  result = (int)inflateInit_(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_deflateInit2__aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, _gostring_ _swig_go_6, intgo _swig_go_7) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  
  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';
  
  arg8 = (int)_swig_go_7; 
  
  result = (int)deflateInit2_(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  _swig_go_result = result; 
  free(arg7); 
  return _swig_go_result;
}


intgo _wrap_inflateInit2__aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (int)_swig_go_3; 
  
  result = (int)inflateInit2_(arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_inflateBackInit__aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1, char *_swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(unsigned char **)&_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (int)_swig_go_4; 
  
  result = (int)inflateBackInit_(arg1,arg2,arg3,(char const *)arg4,arg5);
  _swig_go_result = result; 
  free(arg4); 
  return _swig_go_result;
}


void _wrap_gzFile_s_have_set_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, intgo _swig_go_1) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->have = arg2;
  
}


intgo _wrap_gzFile_s_have_get_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->have);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_gzFile_s_next_set_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, char *_swig_go_1) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  
  if (arg1) (arg1)->next = arg2;
  
}


char *_wrap_gzFile_s_next_get_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  unsigned char *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  result = (unsigned char *) ((arg1)->next);
  *(unsigned char **)&_swig_go_result = (unsigned char *)result; 
  return _swig_go_result;
}


void _wrap_gzFile_s_pos_set_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, off_t *_swig_go_1) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  off_t arg2 ;
  off_t *argp2 ;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  argp2 = (off_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null off_t");
  }
  arg2 = (off_t)*argp2;
  
  
  if (arg1) (arg1)->pos = arg2;
  
}


off_t *_wrap_gzFile_s_pos_get_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  off_t result;
  off_t *_swig_go_result;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  result =  ((arg1)->pos);
  *(off_t **)&_swig_go_result = new off_t(result); 
  return _swig_go_result;
}


gzFile_s *_wrap_new_gzFile_s_aig_324a1309ed911fbd() {
  gzFile_s *result = 0 ;
  gzFile_s *_swig_go_result;
  
  
  result = (gzFile_s *)new gzFile_s();
  *(gzFile_s **)&_swig_go_result = (gzFile_s *)result; 
  return _swig_go_result;
}


void _wrap_delete_gzFile_s_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile_s *arg1 = (gzFile_s *) 0 ;
  
  arg1 = *(gzFile_s **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_gzgetc__aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = (int)gzgetc_(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


gzFile_s *_wrap_gzopen_aig_324a1309ed911fbd(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  gzFile result;
  gzFile_s *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (gzFile)gzopen((char const *)arg1,(char const *)arg2);
  *(gzFile *)&_swig_go_result = (gzFile)result; 
  free(arg1); 
  free(arg2); 
  return _swig_go_result;
}


off_t *_wrap_gzseek_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, off_t *_swig_go_1, intgo _swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  off_t arg2 ;
  int arg3 ;
  off_t *argp2 ;
  off_t result;
  off_t *_swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  argp2 = (off_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null off_t");
  }
  arg2 = (off_t)*argp2;
  
  arg3 = (int)_swig_go_2; 
  
  result = gzseek(arg1,arg2,arg3);
  *(off_t **)&_swig_go_result = new off_t(result); 
  return _swig_go_result;
}


off_t *_wrap_gztell_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  off_t result;
  off_t *_swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = gztell(arg1);
  *(off_t **)&_swig_go_result = new off_t(result); 
  return _swig_go_result;
}


off_t *_wrap_gzoffset_aig_324a1309ed911fbd(gzFile_s *_swig_go_0) {
  gzFile arg1 = (gzFile) 0 ;
  off_t result;
  off_t *_swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  result = gzoffset(arg1);
  *(off_t **)&_swig_go_result = new off_t(result); 
  return _swig_go_result;
}


long long _wrap_adler32_combine_aig_324a1309ed911fbd(long long _swig_go_0, long long _swig_go_1, off_t *_swig_go_2) {
  uLong arg1 ;
  uLong arg2 ;
  off_t arg3 ;
  off_t *argp3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  argp3 = (off_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null off_t");
  }
  arg3 = (off_t)*argp3;
  
  
  result = (uLong)adler32_combine(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_crc32_combine_aig_324a1309ed911fbd(long long _swig_go_0, long long _swig_go_1, off_t *_swig_go_2) {
  uLong arg1 ;
  uLong arg2 ;
  off_t arg3 ;
  off_t *argp3 ;
  uLong result;
  long long _swig_go_result;
  
  arg1 = (uLong)_swig_go_0; 
  arg2 = (uLong)_swig_go_1; 
  
  argp3 = (off_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null off_t");
  }
  arg3 = (off_t)*argp3;
  
  
  result = (uLong)crc32_combine(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_zError_aig_324a1309ed911fbd(intgo _swig_go_0) {
  int arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (char *)zError(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_inflateSyncPoint_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateSyncPoint(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long *_wrap_get_crc_table_aig_324a1309ed911fbd() {
  z_crc_t *result = 0 ;
  long long *_swig_go_result;
  
  
  result = (z_crc_t *)get_crc_table();
  *(z_crc_t **)&_swig_go_result = (z_crc_t *)result; 
  return _swig_go_result;
}


intgo _wrap_inflateUndermine_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)inflateUndermine(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateValidate_aig_324a1309ed911fbd(z_stream_s *_swig_go_0, intgo _swig_go_1) {
  z_streamp arg1 = (z_streamp) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)inflateValidate(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_inflateCodesUsed_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  unsigned long result;
  long long _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (unsigned long)inflateCodesUsed(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_inflateResetKeep_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)inflateResetKeep(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_deflateResetKeep_aig_324a1309ed911fbd(z_stream_s *_swig_go_0) {
  z_streamp arg1 = (z_streamp) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(z_streamp *)&_swig_go_0; 
  
  result = (int)deflateResetKeep(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_gzvprintf_aig_324a1309ed911fbd(gzFile_s *_swig_go_0, _gostring_ _swig_go_1, va_list *_swig_go_2) {
  gzFile arg1 = (gzFile) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gzFile *)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (va_list *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg3 = (va_list)*argp3;
  
  
  result = (int)gzvprintf(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_ETF_ASCII_aig_324a1309ed911fbd() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_ASCII;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF8_aig_324a1309ed911fbd() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF8;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF16_BE_aig_324a1309ed911fbd() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF16_BE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF16_LE_aig_324a1309ed911fbd() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF16_LE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF32_BE_aig_324a1309ed911fbd() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF32_BE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ETF_UTF32_LE_aig_324a1309ed911fbd() {
  irr::io::ETEXT_FORMAT result;
  intgo _swig_go_result;
  
  
  result = irr::io::ETF_UTF32_LE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_NONE_aig_324a1309ed911fbd() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_NONE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_ELEMENT_aig_324a1309ed911fbd() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_ELEMENT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_ELEMENT_END_aig_324a1309ed911fbd() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_ELEMENT_END;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_TEXT_aig_324a1309ed911fbd() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_TEXT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_COMMENT_aig_324a1309ed911fbd() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_COMMENT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_CDATA_aig_324a1309ed911fbd() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_CDATA;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_EXN_UNKNOWN_aig_324a1309ed911fbd() {
  irr::io::EXML_NODE result;
  intgo _swig_go_result;
  
  
  result = irr::io::EXN_UNKNOWN;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_delete_IFileReadCallBack_aig_324a1309ed911fbd(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_IFileReadCallBack_read_aig_324a1309ed911fbd(irr::io::IFileReadCallBack *_swig_go_0, void *_swig_go_1, intgo _swig_go_2) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)(arg1)->read(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_IFileReadCallBack_getSize_aig_324a1309ed911fbd(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  result = (int)(arg1)->getSize();
  _swig_go_result = result; 
  return _swig_go_result;
}


irr::io::IXMLBase *_wrap_new_IXMLBase_aig_324a1309ed911fbd() {
  irr::io::IXMLBase *result = 0 ;
  irr::io::IXMLBase *_swig_go_result;
  
  
  result = (irr::io::IXMLBase *)new irr::io::IXMLBase();
  *(irr::io::IXMLBase **)&_swig_go_result = (irr::io::IXMLBase *)result; 
  return _swig_go_result;
}


void _wrap_delete_IXMLBase_aig_324a1309ed911fbd(irr::io::IXMLBase *_swig_go_0) {
  irr::io::IXMLBase *arg1 = (irr::io::IXMLBase *) 0 ;
  
  arg1 = *(irr::io::IXMLBase **)&_swig_go_0; 
  
  delete arg1;
  
}


irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_wrap_createIrrXMLReader__SWIG_0_aig_324a1309ed911fbd(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  irr::io::IrrXMLReader *result = 0 ;
  irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (irr::io::IrrXMLReader *)irr::io::createIrrXMLReader((char const *)arg1);
  *(irr::io::IrrXMLReader **)&_swig_go_result = (irr::io::IrrXMLReader *)result; 
  free(arg1); 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_wrap_createIrrXMLReader__SWIG_1_aig_324a1309ed911fbd(FILE *_swig_go_0) {
  FILE *arg1 = (FILE *) 0 ;
  irr::io::IrrXMLReader *result = 0 ;
  irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(FILE **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReader *)irr::io::createIrrXMLReader(arg1);
  *(irr::io::IrrXMLReader **)&_swig_go_result = (irr::io::IrrXMLReader *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_wrap_createIrrXMLReader__SWIG_2_aig_324a1309ed911fbd(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  irr::io::IrrXMLReader *result = 0 ;
  irr::io::IIrrXMLReader< char,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReader *)irr::io::createIrrXMLReader(arg1);
  *(irr::io::IrrXMLReader **)&_swig_go_result = (irr::io::IrrXMLReader *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF16__SWIG_0_aig_324a1309ed911fbd(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  irr::io::IrrXMLReaderUTF16 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (irr::io::IrrXMLReaderUTF16 *)irr::io::createIrrXMLReaderUTF16((char const *)arg1);
  *(irr::io::IrrXMLReaderUTF16 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF16 *)result; 
  free(arg1); 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF16__SWIG_1_aig_324a1309ed911fbd(FILE *_swig_go_0) {
  FILE *arg1 = (FILE *) 0 ;
  irr::io::IrrXMLReaderUTF16 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(FILE **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReaderUTF16 *)irr::io::createIrrXMLReaderUTF16(arg1);
  *(irr::io::IrrXMLReaderUTF16 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF16 *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF16__SWIG_2_aig_324a1309ed911fbd(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  irr::io::IrrXMLReaderUTF16 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned short,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReaderUTF16 *)irr::io::createIrrXMLReaderUTF16(arg1);
  *(irr::io::IrrXMLReaderUTF16 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF16 *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF32__SWIG_0_aig_324a1309ed911fbd(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  irr::io::IrrXMLReaderUTF32 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (irr::io::IrrXMLReaderUTF32 *)irr::io::createIrrXMLReaderUTF32((char const *)arg1);
  *(irr::io::IrrXMLReaderUTF32 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF32 *)result; 
  free(arg1); 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF32__SWIG_1_aig_324a1309ed911fbd(FILE *_swig_go_0) {
  FILE *arg1 = (FILE *) 0 ;
  irr::io::IrrXMLReaderUTF32 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(FILE **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReaderUTF32 *)irr::io::createIrrXMLReaderUTF32(arg1);
  *(irr::io::IrrXMLReaderUTF32 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF32 *)result; 
  return _swig_go_result;
}


irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_wrap_createIrrXMLReaderUTF32__SWIG_2_aig_324a1309ed911fbd(irr::io::IFileReadCallBack *_swig_go_0) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  irr::io::IrrXMLReaderUTF32 *result = 0 ;
  irr::io::IIrrXMLReader< unsigned long,irr::io::IXMLBase > *_swig_go_result;
  
  arg1 = *(irr::io::IFileReadCallBack **)&_swig_go_0; 
  
  result = (irr::io::IrrXMLReaderUTF32 *)irr::io::createIrrXMLReaderUTF32(arg1);
  *(irr::io::IrrXMLReaderUTF32 **)&_swig_go_result = (irr::io::IrrXMLReaderUTF32 *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_new_UintVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_new_UintVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


std::vector< unsigned int > *_wrap_new_UintVector__SWIG_2_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  std::vector< unsigned int > *_swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  *(std::vector< unsigned int > **)&_swig_go_result = (std::vector< unsigned int > *)result; 
  return _swig_go_result;
}


long long _wrap_UintVector_size_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  result = ((std::vector< unsigned int > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_UintVector_capacity_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_UintVector_reserve_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0, long long _swig_go_1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_UintVector_isEmpty_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_UintVector_clear_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_UintVector_add_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  arg2 = (std::vector< unsigned int >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
  
}


intgo _wrap_UintVector_get_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  intgo _swig_go_result;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (unsigned int)*result; 
  return _swig_go_result;
}


void _wrap_UintVector_set_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< unsigned int >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_UintVector_aig_324a1309ed911fbd(std::vector< unsigned int > *_swig_go_0) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = *(std::vector< unsigned int > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiAnimation * > *_wrap_new_aiAnimationVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiAnimation * > *result = 0 ;
  std::vector< aiAnimation * > *_swig_go_result;
  
  
  result = (std::vector< aiAnimation * > *)new std::vector< aiAnimation * >();
  *(std::vector< aiAnimation * > **)&_swig_go_result = (std::vector< aiAnimation * > *)result; 
  return _swig_go_result;
}


std::vector< aiAnimation * > *_wrap_new_aiAnimationVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiAnimation * >::size_type arg1 ;
  std::vector< aiAnimation * > *result = 0 ;
  std::vector< aiAnimation * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiAnimation * > *)new std::vector< aiAnimation * >(arg1);
  *(std::vector< aiAnimation * > **)&_swig_go_result = (std::vector< aiAnimation * > *)result; 
  return _swig_go_result;
}


std::vector< aiAnimation * > *_wrap_new_aiAnimationVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = 0 ;
  std::vector< aiAnimation * > *result = 0 ;
  std::vector< aiAnimation * > *_swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  result = (std::vector< aiAnimation * > *)new std::vector< aiAnimation * >((std::vector< aiAnimation * > const &)*arg1);
  *(std::vector< aiAnimation * > **)&_swig_go_result = (std::vector< aiAnimation * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiAnimationVector_size_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  std::vector< aiAnimation * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  result = ((std::vector< aiAnimation * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiAnimationVector_capacity_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  std::vector< aiAnimation * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  result = ((std::vector< aiAnimation * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimationVector_reserve_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  std::vector< aiAnimation * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiAnimationVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiAnimation * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimationVector_clear_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiAnimationVector_add_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0, aiAnimation **_swig_go_1) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  std::vector< aiAnimation * >::value_type *arg2 = 0 ;
  std::vector< aiAnimation * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiAnimation * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiAnimation * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiAnimation * >::value_type const &)*arg2);
  
}


aiAnimation **_wrap_aiAnimationVector_get_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  int arg2 ;
  std::vector< aiAnimation * >::value_type *result = 0 ;
  aiAnimation **_swig_go_result;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiAnimation * >::value_type *) &std_vector_Sl_aiAnimation_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiAnimation * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiAnimationVector_set_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0, intgo _swig_go_1, aiAnimation **_swig_go_2) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  int arg2 ;
  std::vector< aiAnimation * >::value_type *arg3 = 0 ;
  std::vector< aiAnimation * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiAnimation * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiAnimation * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiAnimation_Sm__Sg__set(arg1,arg2,(aiAnimation *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiAnimationVector_aig_324a1309ed911fbd(std::vector< aiAnimation * > *_swig_go_0) {
  std::vector< aiAnimation * > *arg1 = (std::vector< aiAnimation * > *) 0 ;
  
  arg1 = *(std::vector< aiAnimation * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiAnimMesh * > *_wrap_new_aiAnimMeshVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiAnimMesh * > *result = 0 ;
  std::vector< aiAnimMesh * > *_swig_go_result;
  
  
  result = (std::vector< aiAnimMesh * > *)new std::vector< aiAnimMesh * >();
  *(std::vector< aiAnimMesh * > **)&_swig_go_result = (std::vector< aiAnimMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiAnimMesh * > *_wrap_new_aiAnimMeshVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiAnimMesh * >::size_type arg1 ;
  std::vector< aiAnimMesh * > *result = 0 ;
  std::vector< aiAnimMesh * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiAnimMesh * > *)new std::vector< aiAnimMesh * >(arg1);
  *(std::vector< aiAnimMesh * > **)&_swig_go_result = (std::vector< aiAnimMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiAnimMesh * > *_wrap_new_aiAnimMeshVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = 0 ;
  std::vector< aiAnimMesh * > *result = 0 ;
  std::vector< aiAnimMesh * > *_swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  result = (std::vector< aiAnimMesh * > *)new std::vector< aiAnimMesh * >((std::vector< aiAnimMesh * > const &)*arg1);
  *(std::vector< aiAnimMesh * > **)&_swig_go_result = (std::vector< aiAnimMesh * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiAnimMeshVector_size_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  std::vector< aiAnimMesh * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  result = ((std::vector< aiAnimMesh * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiAnimMeshVector_capacity_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  std::vector< aiAnimMesh * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  result = ((std::vector< aiAnimMesh * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimMeshVector_reserve_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  std::vector< aiAnimMesh * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiAnimMeshVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiAnimMesh * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiAnimMeshVector_clear_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiAnimMeshVector_add_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0, aiAnimMesh **_swig_go_1) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  std::vector< aiAnimMesh * >::value_type *arg2 = 0 ;
  std::vector< aiAnimMesh * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiAnimMesh * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiAnimMesh * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiAnimMesh * >::value_type const &)*arg2);
  
}


aiAnimMesh **_wrap_aiAnimMeshVector_get_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  int arg2 ;
  std::vector< aiAnimMesh * >::value_type *result = 0 ;
  aiAnimMesh **_swig_go_result;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiAnimMesh * >::value_type *) &std_vector_Sl_aiAnimMesh_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiAnimMesh * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiAnimMeshVector_set_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0, intgo _swig_go_1, aiAnimMesh **_swig_go_2) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  int arg2 ;
  std::vector< aiAnimMesh * >::value_type *arg3 = 0 ;
  std::vector< aiAnimMesh * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiAnimMesh * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiAnimMesh * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiAnimMesh_Sm__Sg__set(arg1,arg2,(aiAnimMesh *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiAnimMeshVector_aig_324a1309ed911fbd(std::vector< aiAnimMesh * > *_swig_go_0) {
  std::vector< aiAnimMesh * > *arg1 = (std::vector< aiAnimMesh * > *) 0 ;
  
  arg1 = *(std::vector< aiAnimMesh * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiBone * > *_wrap_new_aiBonesVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiBone * > *result = 0 ;
  std::vector< aiBone * > *_swig_go_result;
  
  
  result = (std::vector< aiBone * > *)new std::vector< aiBone * >();
  *(std::vector< aiBone * > **)&_swig_go_result = (std::vector< aiBone * > *)result; 
  return _swig_go_result;
}


std::vector< aiBone * > *_wrap_new_aiBonesVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiBone * >::size_type arg1 ;
  std::vector< aiBone * > *result = 0 ;
  std::vector< aiBone * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiBone * > *)new std::vector< aiBone * >(arg1);
  *(std::vector< aiBone * > **)&_swig_go_result = (std::vector< aiBone * > *)result; 
  return _swig_go_result;
}


std::vector< aiBone * > *_wrap_new_aiBonesVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = 0 ;
  std::vector< aiBone * > *result = 0 ;
  std::vector< aiBone * > *_swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  result = (std::vector< aiBone * > *)new std::vector< aiBone * >((std::vector< aiBone * > const &)*arg1);
  *(std::vector< aiBone * > **)&_swig_go_result = (std::vector< aiBone * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiBonesVector_size_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  std::vector< aiBone * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  result = ((std::vector< aiBone * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiBonesVector_capacity_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  std::vector< aiBone * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  result = ((std::vector< aiBone * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiBonesVector_reserve_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  std::vector< aiBone * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiBonesVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiBone * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiBonesVector_clear_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiBonesVector_add_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0, aiBone **_swig_go_1) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  std::vector< aiBone * >::value_type *arg2 = 0 ;
  std::vector< aiBone * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiBone * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiBone * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiBone * >::value_type const &)*arg2);
  
}


aiBone **_wrap_aiBonesVector_get_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  int arg2 ;
  std::vector< aiBone * >::value_type *result = 0 ;
  aiBone **_swig_go_result;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiBone * >::value_type *) &std_vector_Sl_aiBone_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiBone * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiBonesVector_set_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0, intgo _swig_go_1, aiBone **_swig_go_2) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  int arg2 ;
  std::vector< aiBone * >::value_type *arg3 = 0 ;
  std::vector< aiBone * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiBone * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiBone * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiBone_Sm__Sg__set(arg1,arg2,(aiBone *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiBonesVector_aig_324a1309ed911fbd(std::vector< aiBone * > *_swig_go_0) {
  std::vector< aiBone * > *arg1 = (std::vector< aiBone * > *) 0 ;
  
  arg1 = *(std::vector< aiBone * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiCamera * > *_wrap_new_aiCameraVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiCamera * > *result = 0 ;
  std::vector< aiCamera * > *_swig_go_result;
  
  
  result = (std::vector< aiCamera * > *)new std::vector< aiCamera * >();
  *(std::vector< aiCamera * > **)&_swig_go_result = (std::vector< aiCamera * > *)result; 
  return _swig_go_result;
}


std::vector< aiCamera * > *_wrap_new_aiCameraVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiCamera * >::size_type arg1 ;
  std::vector< aiCamera * > *result = 0 ;
  std::vector< aiCamera * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiCamera * > *)new std::vector< aiCamera * >(arg1);
  *(std::vector< aiCamera * > **)&_swig_go_result = (std::vector< aiCamera * > *)result; 
  return _swig_go_result;
}


std::vector< aiCamera * > *_wrap_new_aiCameraVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = 0 ;
  std::vector< aiCamera * > *result = 0 ;
  std::vector< aiCamera * > *_swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  result = (std::vector< aiCamera * > *)new std::vector< aiCamera * >((std::vector< aiCamera * > const &)*arg1);
  *(std::vector< aiCamera * > **)&_swig_go_result = (std::vector< aiCamera * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiCameraVector_size_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  std::vector< aiCamera * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  result = ((std::vector< aiCamera * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiCameraVector_capacity_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  std::vector< aiCamera * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  result = ((std::vector< aiCamera * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiCameraVector_reserve_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  std::vector< aiCamera * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiCameraVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiCamera * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiCameraVector_clear_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiCameraVector_add_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0, aiCamera **_swig_go_1) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  std::vector< aiCamera * >::value_type *arg2 = 0 ;
  std::vector< aiCamera * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiCamera * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiCamera * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiCamera * >::value_type const &)*arg2);
  
}


aiCamera **_wrap_aiCameraVector_get_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  int arg2 ;
  std::vector< aiCamera * >::value_type *result = 0 ;
  aiCamera **_swig_go_result;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiCamera * >::value_type *) &std_vector_Sl_aiCamera_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiCamera * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiCameraVector_set_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0, intgo _swig_go_1, aiCamera **_swig_go_2) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  int arg2 ;
  std::vector< aiCamera * >::value_type *arg3 = 0 ;
  std::vector< aiCamera * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiCamera * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiCamera * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiCamera_Sm__Sg__set(arg1,arg2,(aiCamera *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiCameraVector_aig_324a1309ed911fbd(std::vector< aiCamera * > *_swig_go_0) {
  std::vector< aiCamera * > *arg1 = (std::vector< aiCamera * > *) 0 ;
  
  arg1 = *(std::vector< aiCamera * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiColor4t< float > * > *_wrap_new_aiColor4DVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiColor4D * > *result = 0 ;
  std::vector< aiColor4t< float > * > *_swig_go_result;
  
  
  result = (std::vector< aiColor4D * > *)new std::vector< aiColor4D * >();
  *(std::vector< aiColor4D * > **)&_swig_go_result = (std::vector< aiColor4D * > *)result; 
  return _swig_go_result;
}


std::vector< aiColor4t< float > * > *_wrap_new_aiColor4DVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiColor4t< float > * >::size_type arg1 ;
  std::vector< aiColor4D * > *result = 0 ;
  std::vector< aiColor4t< float > * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiColor4D * > *)new std::vector< aiColor4D * >(arg1);
  *(std::vector< aiColor4D * > **)&_swig_go_result = (std::vector< aiColor4D * > *)result; 
  return _swig_go_result;
}


std::vector< aiColor4t< float > * > *_wrap_new_aiColor4DVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = 0 ;
  std::vector< aiColor4D * > *result = 0 ;
  std::vector< aiColor4t< float > * > *_swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  result = (std::vector< aiColor4D * > *)new std::vector< aiColor4D * >((std::vector< aiColor4D * > const &)*arg1);
  *(std::vector< aiColor4D * > **)&_swig_go_result = (std::vector< aiColor4D * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiColor4DVector_size_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  std::vector< aiColor4t< float > * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  result = ((std::vector< aiColor4D * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiColor4DVector_capacity_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  std::vector< aiColor4t< float > * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  result = ((std::vector< aiColor4D * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVector_reserve_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  std::vector< aiColor4t< float > * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiColor4DVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiColor4D * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVector_clear_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiColor4DVector_add_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0, aiColor4t< float > **_swig_go_1) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  std::vector< aiColor4t< float > * >::value_type *arg2 = 0 ;
  std::vector< aiColor4t< float > * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiColor4t< float > * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiColor4t< float > * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiColor4t< float > * >::value_type const &)*arg2);
  
}


aiColor4t< float > **_wrap_aiColor4DVector_get_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  int arg2 ;
  std::vector< aiColor4t< float > * >::value_type *result = 0 ;
  aiColor4t< float > **_swig_go_result;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiColor4t< float > * >::value_type *) &std_vector_Sl_aiColor4D_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiColor4t< float > * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVector_set_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0, intgo _swig_go_1, aiColor4t< float > **_swig_go_2) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  int arg2 ;
  std::vector< aiColor4t< float > * >::value_type *arg3 = 0 ;
  std::vector< aiColor4t< float > * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiColor4t< float > * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiColor4t< float > * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiColor4D_Sm__Sg__set(arg1,arg2,(aiColor4t< float > *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiColor4DVector_aig_324a1309ed911fbd(std::vector< aiColor4t< float > * > *_swig_go_0) {
  std::vector< aiColor4D * > *arg1 = (std::vector< aiColor4D * > *) 0 ;
  
  arg1 = *(std::vector< aiColor4D * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::vector< aiColor4t< float > * > > *_wrap_new_aiColor4DVectorVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4t< float > * > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< aiColor4D * > > *)new std::vector< std::vector< aiColor4D * > >();
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiColor4t< float > * > > *_wrap_new_aiColor4DVectorVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< std::vector< aiColor4t< float > * > >::size_type arg1 ;
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4t< float > * > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< aiColor4D * > > *)new std::vector< std::vector< aiColor4D * > >(arg1);
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiColor4t< float > * > > *_wrap_new_aiColor4DVectorVector__SWIG_2_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = 0 ;
  std::vector< std::vector< aiColor4D * > > *result = 0 ;
  std::vector< std::vector< aiColor4t< float > * > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiColor4D * > > *)new std::vector< std::vector< aiColor4D * > >((std::vector< std::vector< aiColor4D * > > const &)*arg1);
  *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_result = (std::vector< std::vector< aiColor4D * > > *)result; 
  return _swig_go_result;
}


long long _wrap_aiColor4DVectorVector_size_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  std::vector< std::vector< aiColor4t< float > * > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< aiColor4D * > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiColor4DVectorVector_capacity_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  std::vector< std::vector< aiColor4t< float > * > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< aiColor4D * > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVectorVector_reserve_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  std::vector< std::vector< aiColor4t< float > * > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiColor4DVectorVector_isEmpty_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< aiColor4D * > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVectorVector_clear_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiColor4DVectorVector_add_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0, std::vector< aiColor4t< float > * > *_swig_go_1) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  std::vector< std::vector< aiColor4t< float > * > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< aiColor4t< float > * > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< aiColor4t< float > * > >::value_type const &)*arg2);
  
}


std::vector< aiColor4t< float > * > *_wrap_aiColor4DVectorVector_get_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< aiColor4D * > >::value_type *result = 0 ;
  std::vector< aiColor4t< float > * > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< aiColor4D * > >::value_type *) &std_vector_Sl_std_vector_Sl_aiColor4D_Sm__Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< aiColor4D * > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiColor4DVectorVector_set_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0, intgo _swig_go_1, std::vector< aiColor4t< float > * > *_swig_go_2) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< aiColor4t< float > * > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< aiColor4t< float > * > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_aiColor4D_Sm__Sg__Sg__set(arg1,arg2,(std::vector< aiColor4t< float > * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiColor4DVectorVector_aig_324a1309ed911fbd(std::vector< std::vector< aiColor4t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiColor4D * > > *arg1 = (std::vector< std::vector< aiColor4D * > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< aiColor4D * > > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiFace * > *_wrap_new_aiFaceVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiFace * > *result = 0 ;
  std::vector< aiFace * > *_swig_go_result;
  
  
  result = (std::vector< aiFace * > *)new std::vector< aiFace * >();
  *(std::vector< aiFace * > **)&_swig_go_result = (std::vector< aiFace * > *)result; 
  return _swig_go_result;
}


std::vector< aiFace * > *_wrap_new_aiFaceVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiFace * >::size_type arg1 ;
  std::vector< aiFace * > *result = 0 ;
  std::vector< aiFace * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiFace * > *)new std::vector< aiFace * >(arg1);
  *(std::vector< aiFace * > **)&_swig_go_result = (std::vector< aiFace * > *)result; 
  return _swig_go_result;
}


std::vector< aiFace * > *_wrap_new_aiFaceVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = 0 ;
  std::vector< aiFace * > *result = 0 ;
  std::vector< aiFace * > *_swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  result = (std::vector< aiFace * > *)new std::vector< aiFace * >((std::vector< aiFace * > const &)*arg1);
  *(std::vector< aiFace * > **)&_swig_go_result = (std::vector< aiFace * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiFaceVector_size_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  std::vector< aiFace * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  result = ((std::vector< aiFace * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiFaceVector_capacity_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  std::vector< aiFace * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  result = ((std::vector< aiFace * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiFaceVector_reserve_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  std::vector< aiFace * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiFaceVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiFace * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiFaceVector_clear_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiFaceVector_add_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0, aiFace **_swig_go_1) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  std::vector< aiFace * >::value_type *arg2 = 0 ;
  std::vector< aiFace * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiFace * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiFace * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiFace * >::value_type const &)*arg2);
  
}


aiFace **_wrap_aiFaceVector_get_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  int arg2 ;
  std::vector< aiFace * >::value_type *result = 0 ;
  aiFace **_swig_go_result;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiFace * >::value_type *) &std_vector_Sl_aiFace_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiFace * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiFaceVector_set_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0, intgo _swig_go_1, aiFace **_swig_go_2) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  int arg2 ;
  std::vector< aiFace * >::value_type *arg3 = 0 ;
  std::vector< aiFace * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiFace * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiFace * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiFace_Sm__Sg__set(arg1,arg2,(aiFace *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiFaceVector_aig_324a1309ed911fbd(std::vector< aiFace * > *_swig_go_0) {
  std::vector< aiFace * > *arg1 = (std::vector< aiFace * > *) 0 ;
  
  arg1 = *(std::vector< aiFace * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiLight * > *_wrap_new_aiLightVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiLight * > *result = 0 ;
  std::vector< aiLight * > *_swig_go_result;
  
  
  result = (std::vector< aiLight * > *)new std::vector< aiLight * >();
  *(std::vector< aiLight * > **)&_swig_go_result = (std::vector< aiLight * > *)result; 
  return _swig_go_result;
}


std::vector< aiLight * > *_wrap_new_aiLightVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiLight * >::size_type arg1 ;
  std::vector< aiLight * > *result = 0 ;
  std::vector< aiLight * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiLight * > *)new std::vector< aiLight * >(arg1);
  *(std::vector< aiLight * > **)&_swig_go_result = (std::vector< aiLight * > *)result; 
  return _swig_go_result;
}


std::vector< aiLight * > *_wrap_new_aiLightVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = 0 ;
  std::vector< aiLight * > *result = 0 ;
  std::vector< aiLight * > *_swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  result = (std::vector< aiLight * > *)new std::vector< aiLight * >((std::vector< aiLight * > const &)*arg1);
  *(std::vector< aiLight * > **)&_swig_go_result = (std::vector< aiLight * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiLightVector_size_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  std::vector< aiLight * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  result = ((std::vector< aiLight * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiLightVector_capacity_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  std::vector< aiLight * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  result = ((std::vector< aiLight * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLightVector_reserve_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  std::vector< aiLight * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiLightVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiLight * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiLightVector_clear_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiLightVector_add_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0, aiLight **_swig_go_1) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  std::vector< aiLight * >::value_type *arg2 = 0 ;
  std::vector< aiLight * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiLight * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiLight * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiLight * >::value_type const &)*arg2);
  
}


aiLight **_wrap_aiLightVector_get_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  int arg2 ;
  std::vector< aiLight * >::value_type *result = 0 ;
  aiLight **_swig_go_result;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiLight * >::value_type *) &std_vector_Sl_aiLight_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiLight * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiLightVector_set_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0, intgo _swig_go_1, aiLight **_swig_go_2) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  int arg2 ;
  std::vector< aiLight * >::value_type *arg3 = 0 ;
  std::vector< aiLight * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiLight * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiLight * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiLight_Sm__Sg__set(arg1,arg2,(aiLight *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiLightVector_aig_324a1309ed911fbd(std::vector< aiLight * > *_swig_go_0) {
  std::vector< aiLight * > *arg1 = (std::vector< aiLight * > *) 0 ;
  
  arg1 = *(std::vector< aiLight * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiMaterial * > *_wrap_new_aiMaterialVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiMaterial * > *result = 0 ;
  std::vector< aiMaterial * > *_swig_go_result;
  
  
  result = (std::vector< aiMaterial * > *)new std::vector< aiMaterial * >();
  *(std::vector< aiMaterial * > **)&_swig_go_result = (std::vector< aiMaterial * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterial * > *_wrap_new_aiMaterialVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiMaterial * >::size_type arg1 ;
  std::vector< aiMaterial * > *result = 0 ;
  std::vector< aiMaterial * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiMaterial * > *)new std::vector< aiMaterial * >(arg1);
  *(std::vector< aiMaterial * > **)&_swig_go_result = (std::vector< aiMaterial * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterial * > *_wrap_new_aiMaterialVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = 0 ;
  std::vector< aiMaterial * > *result = 0 ;
  std::vector< aiMaterial * > *_swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  result = (std::vector< aiMaterial * > *)new std::vector< aiMaterial * >((std::vector< aiMaterial * > const &)*arg1);
  *(std::vector< aiMaterial * > **)&_swig_go_result = (std::vector< aiMaterial * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiMaterialVector_size_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  std::vector< aiMaterial * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMaterial * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiMaterialVector_capacity_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  std::vector< aiMaterial * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMaterial * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialVector_reserve_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  std::vector< aiMaterial * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiMaterialVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiMaterial * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialVector_clear_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiMaterialVector_add_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0, aiMaterial **_swig_go_1) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  std::vector< aiMaterial * >::value_type *arg2 = 0 ;
  std::vector< aiMaterial * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiMaterial * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiMaterial * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiMaterial * >::value_type const &)*arg2);
  
}


aiMaterial **_wrap_aiMaterialVector_get_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  int arg2 ;
  std::vector< aiMaterial * >::value_type *result = 0 ;
  aiMaterial **_swig_go_result;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiMaterial * >::value_type *) &std_vector_Sl_aiMaterial_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiMaterial * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiMaterialVector_set_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0, intgo _swig_go_1, aiMaterial **_swig_go_2) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  int arg2 ;
  std::vector< aiMaterial * >::value_type *arg3 = 0 ;
  std::vector< aiMaterial * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiMaterial * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiMaterial * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiMaterial_Sm__Sg__set(arg1,arg2,(aiMaterial *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiMaterialVector_aig_324a1309ed911fbd(std::vector< aiMaterial * > *_swig_go_0) {
  std::vector< aiMaterial * > *arg1 = (std::vector< aiMaterial * > *) 0 ;
  
  arg1 = *(std::vector< aiMaterial * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiMaterialProperty * > *_wrap_new_aiMaterialPropertyVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiMaterialProperty * > *result = 0 ;
  std::vector< aiMaterialProperty * > *_swig_go_result;
  
  
  result = (std::vector< aiMaterialProperty * > *)new std::vector< aiMaterialProperty * >();
  *(std::vector< aiMaterialProperty * > **)&_swig_go_result = (std::vector< aiMaterialProperty * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterialProperty * > *_wrap_new_aiMaterialPropertyVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiMaterialProperty * >::size_type arg1 ;
  std::vector< aiMaterialProperty * > *result = 0 ;
  std::vector< aiMaterialProperty * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiMaterialProperty * > *)new std::vector< aiMaterialProperty * >(arg1);
  *(std::vector< aiMaterialProperty * > **)&_swig_go_result = (std::vector< aiMaterialProperty * > *)result; 
  return _swig_go_result;
}


std::vector< aiMaterialProperty * > *_wrap_new_aiMaterialPropertyVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = 0 ;
  std::vector< aiMaterialProperty * > *result = 0 ;
  std::vector< aiMaterialProperty * > *_swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  result = (std::vector< aiMaterialProperty * > *)new std::vector< aiMaterialProperty * >((std::vector< aiMaterialProperty * > const &)*arg1);
  *(std::vector< aiMaterialProperty * > **)&_swig_go_result = (std::vector< aiMaterialProperty * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiMaterialPropertyVector_size_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  std::vector< aiMaterialProperty * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMaterialProperty * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiMaterialPropertyVector_capacity_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  std::vector< aiMaterialProperty * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMaterialProperty * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialPropertyVector_reserve_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  std::vector< aiMaterialProperty * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiMaterialPropertyVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiMaterialProperty * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMaterialPropertyVector_clear_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiMaterialPropertyVector_add_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0, aiMaterialProperty **_swig_go_1) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  std::vector< aiMaterialProperty * >::value_type *arg2 = 0 ;
  std::vector< aiMaterialProperty * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiMaterialProperty * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiMaterialProperty * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiMaterialProperty * >::value_type const &)*arg2);
  
}


aiMaterialProperty **_wrap_aiMaterialPropertyVector_get_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  int arg2 ;
  std::vector< aiMaterialProperty * >::value_type *result = 0 ;
  aiMaterialProperty **_swig_go_result;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiMaterialProperty * >::value_type *) &std_vector_Sl_aiMaterialProperty_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiMaterialProperty * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiMaterialPropertyVector_set_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0, intgo _swig_go_1, aiMaterialProperty **_swig_go_2) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  int arg2 ;
  std::vector< aiMaterialProperty * >::value_type *arg3 = 0 ;
  std::vector< aiMaterialProperty * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiMaterialProperty * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiMaterialProperty * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiMaterialProperty_Sm__Sg__set(arg1,arg2,(aiMaterialProperty *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiMaterialPropertyVector_aig_324a1309ed911fbd(std::vector< aiMaterialProperty * > *_swig_go_0) {
  std::vector< aiMaterialProperty * > *arg1 = (std::vector< aiMaterialProperty * > *) 0 ;
  
  arg1 = *(std::vector< aiMaterialProperty * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiMeshAnim * > *_wrap_new_aiMeshAnimVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiMeshAnim * > *result = 0 ;
  std::vector< aiMeshAnim * > *_swig_go_result;
  
  
  result = (std::vector< aiMeshAnim * > *)new std::vector< aiMeshAnim * >();
  *(std::vector< aiMeshAnim * > **)&_swig_go_result = (std::vector< aiMeshAnim * > *)result; 
  return _swig_go_result;
}


std::vector< aiMeshAnim * > *_wrap_new_aiMeshAnimVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiMeshAnim * >::size_type arg1 ;
  std::vector< aiMeshAnim * > *result = 0 ;
  std::vector< aiMeshAnim * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiMeshAnim * > *)new std::vector< aiMeshAnim * >(arg1);
  *(std::vector< aiMeshAnim * > **)&_swig_go_result = (std::vector< aiMeshAnim * > *)result; 
  return _swig_go_result;
}


std::vector< aiMeshAnim * > *_wrap_new_aiMeshAnimVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = 0 ;
  std::vector< aiMeshAnim * > *result = 0 ;
  std::vector< aiMeshAnim * > *_swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  result = (std::vector< aiMeshAnim * > *)new std::vector< aiMeshAnim * >((std::vector< aiMeshAnim * > const &)*arg1);
  *(std::vector< aiMeshAnim * > **)&_swig_go_result = (std::vector< aiMeshAnim * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiMeshAnimVector_size_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  std::vector< aiMeshAnim * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMeshAnim * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiMeshAnimVector_capacity_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  std::vector< aiMeshAnim * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMeshAnim * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshAnimVector_reserve_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  std::vector< aiMeshAnim * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiMeshAnimVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiMeshAnim * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshAnimVector_clear_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiMeshAnimVector_add_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0, aiMeshAnim **_swig_go_1) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  std::vector< aiMeshAnim * >::value_type *arg2 = 0 ;
  std::vector< aiMeshAnim * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiMeshAnim * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiMeshAnim * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiMeshAnim * >::value_type const &)*arg2);
  
}


aiMeshAnim **_wrap_aiMeshAnimVector_get_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  int arg2 ;
  std::vector< aiMeshAnim * >::value_type *result = 0 ;
  aiMeshAnim **_swig_go_result;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiMeshAnim * >::value_type *) &std_vector_Sl_aiMeshAnim_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiMeshAnim * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiMeshAnimVector_set_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0, intgo _swig_go_1, aiMeshAnim **_swig_go_2) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  int arg2 ;
  std::vector< aiMeshAnim * >::value_type *arg3 = 0 ;
  std::vector< aiMeshAnim * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiMeshAnim * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiMeshAnim * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiMeshAnim_Sm__Sg__set(arg1,arg2,(aiMeshAnim *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiMeshAnimVector_aig_324a1309ed911fbd(std::vector< aiMeshAnim * > *_swig_go_0) {
  std::vector< aiMeshAnim * > *arg1 = (std::vector< aiMeshAnim * > *) 0 ;
  
  arg1 = *(std::vector< aiMeshAnim * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiMesh * > *_wrap_new_aiMeshVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiMesh * > *result = 0 ;
  std::vector< aiMesh * > *_swig_go_result;
  
  
  result = (std::vector< aiMesh * > *)new std::vector< aiMesh * >();
  *(std::vector< aiMesh * > **)&_swig_go_result = (std::vector< aiMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiMesh * > *_wrap_new_aiMeshVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiMesh * >::size_type arg1 ;
  std::vector< aiMesh * > *result = 0 ;
  std::vector< aiMesh * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiMesh * > *)new std::vector< aiMesh * >(arg1);
  *(std::vector< aiMesh * > **)&_swig_go_result = (std::vector< aiMesh * > *)result; 
  return _swig_go_result;
}


std::vector< aiMesh * > *_wrap_new_aiMeshVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = 0 ;
  std::vector< aiMesh * > *result = 0 ;
  std::vector< aiMesh * > *_swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  result = (std::vector< aiMesh * > *)new std::vector< aiMesh * >((std::vector< aiMesh * > const &)*arg1);
  *(std::vector< aiMesh * > **)&_swig_go_result = (std::vector< aiMesh * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiMeshVector_size_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  std::vector< aiMesh * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMesh * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiMeshVector_capacity_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  std::vector< aiMesh * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  result = ((std::vector< aiMesh * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshVector_reserve_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  std::vector< aiMesh * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiMeshVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiMesh * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMeshVector_clear_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiMeshVector_add_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0, aiMesh **_swig_go_1) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  std::vector< aiMesh * >::value_type *arg2 = 0 ;
  std::vector< aiMesh * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiMesh * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiMesh * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiMesh * >::value_type const &)*arg2);
  
}


aiMesh **_wrap_aiMeshVector_get_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  int arg2 ;
  std::vector< aiMesh * >::value_type *result = 0 ;
  aiMesh **_swig_go_result;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiMesh * >::value_type *) &std_vector_Sl_aiMesh_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiMesh * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiMeshVector_set_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0, intgo _swig_go_1, aiMesh **_swig_go_2) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  int arg2 ;
  std::vector< aiMesh * >::value_type *arg3 = 0 ;
  std::vector< aiMesh * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiMesh * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiMesh * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiMesh_Sm__Sg__set(arg1,arg2,(aiMesh *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiMeshVector_aig_324a1309ed911fbd(std::vector< aiMesh * > *_swig_go_0) {
  std::vector< aiMesh * > *arg1 = (std::vector< aiMesh * > *) 0 ;
  
  arg1 = *(std::vector< aiMesh * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiNode * > *_wrap_new_aiNodeVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiNode * > *result = 0 ;
  std::vector< aiNode * > *_swig_go_result;
  
  
  result = (std::vector< aiNode * > *)new std::vector< aiNode * >();
  *(std::vector< aiNode * > **)&_swig_go_result = (std::vector< aiNode * > *)result; 
  return _swig_go_result;
}


std::vector< aiNode * > *_wrap_new_aiNodeVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiNode * >::size_type arg1 ;
  std::vector< aiNode * > *result = 0 ;
  std::vector< aiNode * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiNode * > *)new std::vector< aiNode * >(arg1);
  *(std::vector< aiNode * > **)&_swig_go_result = (std::vector< aiNode * > *)result; 
  return _swig_go_result;
}


std::vector< aiNode * > *_wrap_new_aiNodeVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = 0 ;
  std::vector< aiNode * > *result = 0 ;
  std::vector< aiNode * > *_swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  result = (std::vector< aiNode * > *)new std::vector< aiNode * >((std::vector< aiNode * > const &)*arg1);
  *(std::vector< aiNode * > **)&_swig_go_result = (std::vector< aiNode * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiNodeVector_size_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  std::vector< aiNode * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  result = ((std::vector< aiNode * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiNodeVector_capacity_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  std::vector< aiNode * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  result = ((std::vector< aiNode * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeVector_reserve_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  std::vector< aiNode * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiNodeVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiNode * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeVector_clear_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiNodeVector_add_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0, aiNode **_swig_go_1) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  std::vector< aiNode * >::value_type *arg2 = 0 ;
  std::vector< aiNode * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiNode * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiNode * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiNode * >::value_type const &)*arg2);
  
}


aiNode **_wrap_aiNodeVector_get_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  int arg2 ;
  std::vector< aiNode * >::value_type *result = 0 ;
  aiNode **_swig_go_result;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiNode * >::value_type *) &std_vector_Sl_aiNode_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiNode * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiNodeVector_set_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0, intgo _swig_go_1, aiNode **_swig_go_2) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  int arg2 ;
  std::vector< aiNode * >::value_type *arg3 = 0 ;
  std::vector< aiNode * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiNode * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiNode * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiNode_Sm__Sg__set(arg1,arg2,(aiNode *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiNodeVector_aig_324a1309ed911fbd(std::vector< aiNode * > *_swig_go_0) {
  std::vector< aiNode * > *arg1 = (std::vector< aiNode * > *) 0 ;
  
  arg1 = *(std::vector< aiNode * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiNodeAnim * > *_wrap_new_aiNodeAnimVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiNodeAnim * > *result = 0 ;
  std::vector< aiNodeAnim * > *_swig_go_result;
  
  
  result = (std::vector< aiNodeAnim * > *)new std::vector< aiNodeAnim * >();
  *(std::vector< aiNodeAnim * > **)&_swig_go_result = (std::vector< aiNodeAnim * > *)result; 
  return _swig_go_result;
}


std::vector< aiNodeAnim * > *_wrap_new_aiNodeAnimVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiNodeAnim * >::size_type arg1 ;
  std::vector< aiNodeAnim * > *result = 0 ;
  std::vector< aiNodeAnim * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiNodeAnim * > *)new std::vector< aiNodeAnim * >(arg1);
  *(std::vector< aiNodeAnim * > **)&_swig_go_result = (std::vector< aiNodeAnim * > *)result; 
  return _swig_go_result;
}


std::vector< aiNodeAnim * > *_wrap_new_aiNodeAnimVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = 0 ;
  std::vector< aiNodeAnim * > *result = 0 ;
  std::vector< aiNodeAnim * > *_swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  result = (std::vector< aiNodeAnim * > *)new std::vector< aiNodeAnim * >((std::vector< aiNodeAnim * > const &)*arg1);
  *(std::vector< aiNodeAnim * > **)&_swig_go_result = (std::vector< aiNodeAnim * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiNodeAnimVector_size_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  std::vector< aiNodeAnim * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  result = ((std::vector< aiNodeAnim * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiNodeAnimVector_capacity_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  std::vector< aiNodeAnim * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  result = ((std::vector< aiNodeAnim * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnimVector_reserve_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  std::vector< aiNodeAnim * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiNodeAnimVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiNodeAnim * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnimVector_clear_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiNodeAnimVector_add_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0, aiNodeAnim **_swig_go_1) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  std::vector< aiNodeAnim * >::value_type *arg2 = 0 ;
  std::vector< aiNodeAnim * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiNodeAnim * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiNodeAnim * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiNodeAnim * >::value_type const &)*arg2);
  
}


aiNodeAnim **_wrap_aiNodeAnimVector_get_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  int arg2 ;
  std::vector< aiNodeAnim * >::value_type *result = 0 ;
  aiNodeAnim **_swig_go_result;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiNodeAnim * >::value_type *) &std_vector_Sl_aiNodeAnim_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiNodeAnim * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiNodeAnimVector_set_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0, intgo _swig_go_1, aiNodeAnim **_swig_go_2) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  int arg2 ;
  std::vector< aiNodeAnim * >::value_type *arg3 = 0 ;
  std::vector< aiNodeAnim * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiNodeAnim * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiNodeAnim * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiNodeAnim_Sm__Sg__set(arg1,arg2,(aiNodeAnim *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiNodeAnimVector_aig_324a1309ed911fbd(std::vector< aiNodeAnim * > *_swig_go_0) {
  std::vector< aiNodeAnim * > *arg1 = (std::vector< aiNodeAnim * > *) 0 ;
  
  arg1 = *(std::vector< aiNodeAnim * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiTexture * > *_wrap_new_aiTextureVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiTexture * > *result = 0 ;
  std::vector< aiTexture * > *_swig_go_result;
  
  
  result = (std::vector< aiTexture * > *)new std::vector< aiTexture * >();
  *(std::vector< aiTexture * > **)&_swig_go_result = (std::vector< aiTexture * > *)result; 
  return _swig_go_result;
}


std::vector< aiTexture * > *_wrap_new_aiTextureVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiTexture * >::size_type arg1 ;
  std::vector< aiTexture * > *result = 0 ;
  std::vector< aiTexture * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiTexture * > *)new std::vector< aiTexture * >(arg1);
  *(std::vector< aiTexture * > **)&_swig_go_result = (std::vector< aiTexture * > *)result; 
  return _swig_go_result;
}


std::vector< aiTexture * > *_wrap_new_aiTextureVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = 0 ;
  std::vector< aiTexture * > *result = 0 ;
  std::vector< aiTexture * > *_swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  result = (std::vector< aiTexture * > *)new std::vector< aiTexture * >((std::vector< aiTexture * > const &)*arg1);
  *(std::vector< aiTexture * > **)&_swig_go_result = (std::vector< aiTexture * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiTextureVector_size_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  std::vector< aiTexture * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  result = ((std::vector< aiTexture * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiTextureVector_capacity_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  std::vector< aiTexture * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  result = ((std::vector< aiTexture * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTextureVector_reserve_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  std::vector< aiTexture * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiTextureVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiTexture * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiTextureVector_clear_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiTextureVector_add_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0, aiTexture **_swig_go_1) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  std::vector< aiTexture * >::value_type *arg2 = 0 ;
  std::vector< aiTexture * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiTexture * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiTexture * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiTexture * >::value_type const &)*arg2);
  
}


aiTexture **_wrap_aiTextureVector_get_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  int arg2 ;
  std::vector< aiTexture * >::value_type *result = 0 ;
  aiTexture **_swig_go_result;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiTexture * >::value_type *) &std_vector_Sl_aiTexture_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiTexture * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiTextureVector_set_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0, intgo _swig_go_1, aiTexture **_swig_go_2) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  int arg2 ;
  std::vector< aiTexture * >::value_type *arg3 = 0 ;
  std::vector< aiTexture * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiTexture * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiTexture * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiTexture_Sm__Sg__set(arg1,arg2,(aiTexture *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiTextureVector_aig_324a1309ed911fbd(std::vector< aiTexture * > *_swig_go_0) {
  std::vector< aiTexture * > *arg1 = (std::vector< aiTexture * > *) 0 ;
  
  arg1 = *(std::vector< aiTexture * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiVector3t< float > * > *_wrap_new_aiVector3DVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  
  result = (std::vector< aiVector3D * > *)new std::vector< aiVector3D * >();
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_new_aiVector3DVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiVector3t< float > * >::size_type arg1 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)new std::vector< aiVector3D * >(arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


std::vector< aiVector3t< float > * > *_wrap_new_aiVector3DVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = 0 ;
  std::vector< aiVector3D * > *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  result = (std::vector< aiVector3D * > *)new std::vector< aiVector3D * >((std::vector< aiVector3D * > const &)*arg1);
  *(std::vector< aiVector3D * > **)&_swig_go_result = (std::vector< aiVector3D * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiVector3DVector_size_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  std::vector< aiVector3t< float > * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  result = ((std::vector< aiVector3D * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiVector3DVector_capacity_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  std::vector< aiVector3t< float > * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  result = ((std::vector< aiVector3D * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVector_reserve_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  std::vector< aiVector3t< float > * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiVector3DVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiVector3D * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVector_clear_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiVector3DVector_add_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0, aiVector3t< float > **_swig_go_1) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  std::vector< aiVector3t< float > * >::value_type *arg2 = 0 ;
  std::vector< aiVector3t< float > * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiVector3t< float > * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiVector3t< float > * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiVector3t< float > * >::value_type const &)*arg2);
  
}


aiVector3t< float > **_wrap_aiVector3DVector_get_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  int arg2 ;
  std::vector< aiVector3t< float > * >::value_type *result = 0 ;
  aiVector3t< float > **_swig_go_result;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiVector3t< float > * >::value_type *) &std_vector_Sl_aiVector3D_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiVector3t< float > * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVector_set_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0, intgo _swig_go_1, aiVector3t< float > **_swig_go_2) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  int arg2 ;
  std::vector< aiVector3t< float > * >::value_type *arg3 = 0 ;
  std::vector< aiVector3t< float > * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiVector3t< float > * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiVector3t< float > * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiVector3D_Sm__Sg__set(arg1,arg2,(aiVector3t< float > *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiVector3DVector_aig_324a1309ed911fbd(std::vector< aiVector3t< float > * > *_swig_go_0) {
  std::vector< aiVector3D * > *arg1 = (std::vector< aiVector3D * > *) 0 ;
  
  arg1 = *(std::vector< aiVector3D * > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::vector< aiVector3t< float > * > > *_wrap_new_aiVector3DVectorVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3t< float > * > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< aiVector3D * > > *)new std::vector< std::vector< aiVector3D * > >();
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiVector3t< float > * > > *_wrap_new_aiVector3DVectorVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< std::vector< aiVector3t< float > * > >::size_type arg1 ;
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3t< float > * > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< aiVector3D * > > *)new std::vector< std::vector< aiVector3D * > >(arg1);
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< aiVector3t< float > * > > *_wrap_new_aiVector3DVectorVector__SWIG_2_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = 0 ;
  std::vector< std::vector< aiVector3D * > > *result = 0 ;
  std::vector< std::vector< aiVector3t< float > * > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< aiVector3D * > > *)new std::vector< std::vector< aiVector3D * > >((std::vector< std::vector< aiVector3D * > > const &)*arg1);
  *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_result = (std::vector< std::vector< aiVector3D * > > *)result; 
  return _swig_go_result;
}


long long _wrap_aiVector3DVectorVector_size_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  std::vector< std::vector< aiVector3t< float > * > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< aiVector3D * > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiVector3DVectorVector_capacity_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  std::vector< std::vector< aiVector3t< float > * > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< aiVector3D * > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVectorVector_reserve_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  std::vector< std::vector< aiVector3t< float > * > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiVector3DVectorVector_isEmpty_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< aiVector3D * > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVectorVector_clear_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiVector3DVectorVector_add_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0, std::vector< aiVector3t< float > * > *_swig_go_1) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  std::vector< std::vector< aiVector3t< float > * > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< aiVector3t< float > * > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< aiVector3t< float > * > >::value_type const &)*arg2);
  
}


std::vector< aiVector3t< float > * > *_wrap_aiVector3DVectorVector_get_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< aiVector3D * > >::value_type *result = 0 ;
  std::vector< aiVector3t< float > * > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< aiVector3D * > >::value_type *) &std_vector_Sl_std_vector_Sl_aiVector3D_Sm__Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< aiVector3D * > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3DVectorVector_set_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0, intgo _swig_go_1, std::vector< aiVector3t< float > * > *_swig_go_2) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< aiVector3t< float > * > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< aiVector3t< float > * > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_aiVector3D_Sm__Sg__Sg__set(arg1,arg2,(std::vector< aiVector3t< float > * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiVector3DVectorVector_aig_324a1309ed911fbd(std::vector< std::vector< aiVector3t< float > * > > *_swig_go_0) {
  std::vector< std::vector< aiVector3D * > > *arg1 = (std::vector< std::vector< aiVector3D * > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< aiVector3D * > > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< aiVertexWeight * > *_wrap_new_aiVertexWeightVector__SWIG_0_aig_324a1309ed911fbd() {
  std::vector< aiVertexWeight * > *result = 0 ;
  std::vector< aiVertexWeight * > *_swig_go_result;
  
  
  result = (std::vector< aiVertexWeight * > *)new std::vector< aiVertexWeight * >();
  *(std::vector< aiVertexWeight * > **)&_swig_go_result = (std::vector< aiVertexWeight * > *)result; 
  return _swig_go_result;
}


std::vector< aiVertexWeight * > *_wrap_new_aiVertexWeightVector__SWIG_1_aig_324a1309ed911fbd(long long _swig_go_0) {
  std::vector< aiVertexWeight * >::size_type arg1 ;
  std::vector< aiVertexWeight * > *result = 0 ;
  std::vector< aiVertexWeight * > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< aiVertexWeight * > *)new std::vector< aiVertexWeight * >(arg1);
  *(std::vector< aiVertexWeight * > **)&_swig_go_result = (std::vector< aiVertexWeight * > *)result; 
  return _swig_go_result;
}


std::vector< aiVertexWeight * > *_wrap_new_aiVertexWeightVector__SWIG_2_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = 0 ;
  std::vector< aiVertexWeight * > *result = 0 ;
  std::vector< aiVertexWeight * > *_swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  result = (std::vector< aiVertexWeight * > *)new std::vector< aiVertexWeight * >((std::vector< aiVertexWeight * > const &)*arg1);
  *(std::vector< aiVertexWeight * > **)&_swig_go_result = (std::vector< aiVertexWeight * > *)result; 
  return _swig_go_result;
}


long long _wrap_aiVertexWeightVector_size_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  std::vector< aiVertexWeight * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  result = ((std::vector< aiVertexWeight * > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_aiVertexWeightVector_capacity_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  std::vector< aiVertexWeight * >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  result = ((std::vector< aiVertexWeight * > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeightVector_reserve_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0, long long _swig_go_1) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  std::vector< aiVertexWeight * >::size_type arg2 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_aiVertexWeightVector_isEmpty_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  result = (bool)((std::vector< aiVertexWeight * > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeightVector_clear_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_aiVertexWeightVector_add_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0, aiVertexWeight **_swig_go_1) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  std::vector< aiVertexWeight * >::value_type *arg2 = 0 ;
  std::vector< aiVertexWeight * >::value_type temp2 = 0 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  temp2 = *(std::vector< aiVertexWeight * >::value_type *)&_swig_go_1;
  arg2 = (std::vector< aiVertexWeight * >::value_type *)&temp2;
  
  
  (arg1)->push_back((std::vector< aiVertexWeight * >::value_type const &)*arg2);
  
}


aiVertexWeight **_wrap_aiVertexWeightVector_get_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0, intgo _swig_go_1) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  int arg2 ;
  std::vector< aiVertexWeight * >::value_type *result = 0 ;
  aiVertexWeight **_swig_go_result;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< aiVertexWeight * >::value_type *) &std_vector_Sl_aiVertexWeight_Sm__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< aiVertexWeight * >::value_type *)&_swig_go_result = *result; 
  return _swig_go_result;
}


void _wrap_aiVertexWeightVector_set_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0, intgo _swig_go_1, aiVertexWeight **_swig_go_2) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  int arg2 ;
  std::vector< aiVertexWeight * >::value_type *arg3 = 0 ;
  std::vector< aiVertexWeight * >::value_type temp3 = 0 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  temp3 = *(std::vector< aiVertexWeight * >::value_type *)&_swig_go_2;
  arg3 = (std::vector< aiVertexWeight * >::value_type *)&temp3;
  
  
  try {
    std_vector_Sl_aiVertexWeight_Sm__Sg__set(arg1,arg2,(aiVertexWeight *const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_aiVertexWeightVector_aig_324a1309ed911fbd(std::vector< aiVertexWeight * > *_swig_go_0) {
  std::vector< aiVertexWeight * > *arg1 = (std::vector< aiVertexWeight * > *) 0 ;
  
  arg1 = *(std::vector< aiVertexWeight * > **)&_swig_go_0; 
  
  delete arg1;
  
}


aiVector2t< float > *_wrap_new_aiVector2D__SWIG_0_aig_324a1309ed911fbd() {
  aiVector2t< ai_real > *result = 0 ;
  aiVector2t< float > *_swig_go_result;
  
  
  result = (aiVector2t< ai_real > *)new aiVector2t< ai_real >();
  *(aiVector2t< ai_real > **)&_swig_go_result = (aiVector2t< ai_real > *)result; 
  return _swig_go_result;
}


aiVector2t< float > *_wrap_new_aiVector2D__SWIG_1_aig_324a1309ed911fbd(float _swig_go_0, float _swig_go_1) {
  float arg1 ;
  float arg2 ;
  aiVector2t< ai_real > *result = 0 ;
  aiVector2t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  result = (aiVector2t< ai_real > *)new aiVector2t< ai_real >(arg1,arg2);
  *(aiVector2t< ai_real > **)&_swig_go_result = (aiVector2t< ai_real > *)result; 
  return _swig_go_result;
}


aiVector2t< float > *_wrap_new_aiVector2D__SWIG_2_aig_324a1309ed911fbd(float _swig_go_0) {
  float arg1 ;
  aiVector2t< ai_real > *result = 0 ;
  aiVector2t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  
  result = (aiVector2t< ai_real > *)new aiVector2t< ai_real >(arg1);
  *(aiVector2t< ai_real > **)&_swig_go_result = (aiVector2t< ai_real > *)result; 
  return _swig_go_result;
}


aiVector2t< float > *_wrap_new_aiVector2D__SWIG_3_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0) {
  aiVector2t< ai_real > *arg1 = 0 ;
  aiVector2t< ai_real > *result = 0 ;
  aiVector2t< float > *_swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  
  result = (aiVector2t< ai_real > *)new aiVector2t< ai_real >((aiVector2t< ai_real > const &)*arg1);
  *(aiVector2t< ai_real > **)&_swig_go_result = (aiVector2t< ai_real > *)result; 
  return _swig_go_result;
}


void _wrap_aiVector2D_Set_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0, float _swig_go_1, float _swig_go_2) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  (arg1)->Set(arg2,arg3);
  
}


float _wrap_aiVector2D_SquareLength_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  
  result = (float)((aiVector2t< ai_real > const *)arg1)->SquareLength();
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_aiVector2D_Length_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  
  result = (float)((aiVector2t< ai_real > const *)arg1)->Length();
  _swig_go_result = result; 
  return _swig_go_result;
}


aiVector2t< float > *_wrap_aiVector2D_Normalize_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  aiVector2t< ai_real > *result = 0 ;
  aiVector2t< float > *_swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  
  result = (aiVector2t< ai_real > *) &(arg1)->Normalize();
  *(aiVector2t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiVector2D_Equal__SWIG_0_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0, aiVector2t< float > *_swig_go_1, float _swig_go_2) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  aiVector2t< ai_real > *arg2 = 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector2t< ai_real > **)&_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  result = (bool)((aiVector2t< ai_real > const *)arg1)->Equal((aiVector2t< ai_real > const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiVector2D_Equal__SWIG_1_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0, aiVector2t< float > *_swig_go_1) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  aiVector2t< ai_real > *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector2t< ai_real > **)&_swig_go_1; 
  
  result = (bool)((aiVector2t< ai_real > const *)arg1)->Equal((aiVector2t< ai_real > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiVector2t< float > *_wrap_aiVector2D_SymMul_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0, aiVector2t< float > *_swig_go_1) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  aiVector2t< ai_real > *arg2 = 0 ;
  aiVector2t< ai_real > result;
  aiVector2t< float > *_swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector2t< ai_real > **)&_swig_go_1; 
  
  result = (arg1)->SymMul((aiVector2t< ai_real > const &)*arg2);
  *(aiVector2t< ai_real > **)&_swig_go_result = new aiVector2t< ai_real >(result); 
  return _swig_go_result;
}


void _wrap_aiVector2D_x_set_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0, float _swig_go_1) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


float _wrap_aiVector2D_x_get_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector2D_y_set_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0, float _swig_go_1) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


float _wrap_aiVector2D_y_get_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_aiVector2D_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0) {
  aiVector2t< ai_real > *arg1 = (aiVector2t< ai_real > *) 0 ;
  
  arg1 = *(aiVector2t< ai_real > **)&_swig_go_0; 
  
  delete arg1;
  
}


aiVector3t< float > *_wrap_new_aiVector3D__SWIG_0_aig_324a1309ed911fbd() {
  aiVector3t< ai_real > *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  
  result = (aiVector3t< ai_real > *)new aiVector3t< ai_real >();
  *(aiVector3t< ai_real > **)&_swig_go_result = (aiVector3t< ai_real > *)result; 
  return _swig_go_result;
}


aiVector3t< float > *_wrap_new_aiVector3D__SWIG_1_aig_324a1309ed911fbd(float _swig_go_0, float _swig_go_1, float _swig_go_2) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  aiVector3t< ai_real > *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  result = (aiVector3t< ai_real > *)new aiVector3t< ai_real >(arg1,arg2,arg3);
  *(aiVector3t< ai_real > **)&_swig_go_result = (aiVector3t< ai_real > *)result; 
  return _swig_go_result;
}


aiVector3t< float > *_wrap_new_aiVector3D__SWIG_2_aig_324a1309ed911fbd(float _swig_go_0) {
  float arg1 ;
  aiVector3t< ai_real > *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  
  result = (aiVector3t< ai_real > *)new aiVector3t< ai_real >(arg1);
  *(aiVector3t< ai_real > **)&_swig_go_result = (aiVector3t< ai_real > *)result; 
  return _swig_go_result;
}


aiVector3t< float > *_wrap_new_aiVector3D__SWIG_3_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = 0 ;
  aiVector3t< ai_real > *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  result = (aiVector3t< ai_real > *)new aiVector3t< ai_real >((aiVector3t< ai_real > const &)*arg1);
  *(aiVector3t< ai_real > **)&_swig_go_result = (aiVector3t< ai_real > *)result; 
  return _swig_go_result;
}


bool _wrap_aiVector3D_Equal__SWIG_0_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1, float _swig_go_2) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  aiVector3t< ai_real > *arg2 = 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector3t< ai_real > **)&_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  result = (bool)((aiVector3t< ai_real > const *)arg1)->Equal((aiVector3t< ai_real > const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiVector3D_Equal__SWIG_1_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  aiVector3t< ai_real > *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector3t< ai_real > **)&_swig_go_1; 
  
  result = (bool)((aiVector3t< ai_real > const *)arg1)->Equal((aiVector3t< ai_real > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3D_Set_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  
  (arg1)->Set(arg2,arg3,arg4);
  
}


float _wrap_aiVector3D_SquareLength_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  result = (float)((aiVector3t< ai_real > const *)arg1)->SquareLength();
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_aiVector3D_Length_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  result = (float)((aiVector3t< ai_real > const *)arg1)->Length();
  _swig_go_result = result; 
  return _swig_go_result;
}


aiVector3t< float > *_wrap_aiVector3D_Normalize_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  aiVector3t< ai_real > *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  result = (aiVector3t< ai_real > *) &(arg1)->Normalize();
  *(aiVector3t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiVector3t< float > *_wrap_aiVector3D_NormalizeSafe_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  aiVector3t< ai_real > *result = 0 ;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  result = (aiVector3t< ai_real > *) &(arg1)->NormalizeSafe();
  *(aiVector3t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiVector3t< float > *_wrap_aiVector3D_SymMul_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  aiVector3t< ai_real > *arg2 = 0 ;
  aiVector3t< ai_real > result;
  aiVector3t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector3t< ai_real > **)&_swig_go_1; 
  
  result = (arg1)->SymMul((aiVector3t< ai_real > const &)*arg2);
  *(aiVector3t< ai_real > **)&_swig_go_result = new aiVector3t< ai_real >(result); 
  return _swig_go_result;
}


void _wrap_aiVector3D_x_set_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, float _swig_go_1) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


float _wrap_aiVector3D_x_get_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3D_y_set_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, float _swig_go_1) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


float _wrap_aiVector3D_y_get_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiVector3D_z_set_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, float _swig_go_1) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


float _wrap_aiVector3D_z_get_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_aiVector3D_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0) {
  aiVector3t< ai_real > *arg1 = (aiVector3t< ai_real > *) 0 ;
  
  arg1 = *(aiVector3t< ai_real > **)&_swig_go_0; 
  
  delete arg1;
  
}


aiMatrix3x3t< float > *_wrap_new_aiMatrix3x3__SWIG_0_aig_324a1309ed911fbd() {
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  
  result = (aiMatrix3x3t< ai_real > *)new aiMatrix3x3t< ai_real >();
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = (aiMatrix3x3t< ai_real > *)result; 
  return _swig_go_result;
}


aiMatrix3x3t< float > *_wrap_new_aiMatrix3x3__SWIG_1_aig_324a1309ed911fbd(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, float _swig_go_6, float _swig_go_7, float _swig_go_8) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  arg5 = (float)_swig_go_4; 
  arg6 = (float)_swig_go_5; 
  arg7 = (float)_swig_go_6; 
  arg8 = (float)_swig_go_7; 
  arg9 = (float)_swig_go_8; 
  
  result = (aiMatrix3x3t< ai_real > *)new aiMatrix3x3t< ai_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = (aiMatrix3x3t< ai_real > *)result; 
  return _swig_go_result;
}


bool _wrap_aiMatrix3x3_Equal__SWIG_0_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1, float _swig_go_2) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  aiMatrix4x4t< float > *arg2 = 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4t< float > **)&_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  result = (bool)((aiMatrix3x3t< ai_real > const *)arg1)->Equal((aiMatrix4x4t< float > const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMatrix3x3_Equal__SWIG_1_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  aiMatrix4x4t< float > *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4t< float > **)&_swig_go_1; 
  
  result = (bool)((aiMatrix3x3t< ai_real > const *)arg1)->Equal((aiMatrix4x4t< float > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix3x3t< float > *_wrap_new_aiMatrix3x3__SWIG_2_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< float > *arg1 = 0 ;
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  arg1 = *(aiMatrix4x4t< float > **)&_swig_go_0; 
  
  result = (aiMatrix3x3t< ai_real > *)new aiMatrix3x3t< ai_real >((aiMatrix4x4t< float > const &)*arg1);
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = (aiMatrix3x3t< ai_real > *)result; 
  return _swig_go_result;
}


aiMatrix3x3t< float > *_wrap_aiMatrix3x3_Transpose_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (aiMatrix3x3t< ai_real > *) &(arg1)->Transpose();
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix3x3t< float > *_wrap_aiMatrix3x3_Inverse_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (aiMatrix3x3t< ai_real > *) &(arg1)->Inverse();
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_aiMatrix3x3_Determinant_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float)((aiMatrix3x3t< ai_real > const *)arg1)->Determinant();
  _swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix3x3t< float > *_wrap_aiMatrix3x3_RotationZ_aig_324a1309ed911fbd(float _swig_go_0, aiMatrix3x3t< float > *_swig_go_1) {
  float arg1 ;
  aiMatrix3x3t< ai_real > *arg2 = 0 ;
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(aiMatrix3x3t< ai_real > **)&_swig_go_1; 
  
  result = (aiMatrix3x3t< ai_real > *) &aiMatrix3x3t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR RotationZ(arg1,*arg2);
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix3x3t< float > *_wrap_aiMatrix3x3_Rotation_aig_324a1309ed911fbd(float _swig_go_0, aiVector3t< float > *_swig_go_1, aiMatrix3x3t< float > *_swig_go_2) {
  float arg1 ;
  aiVector3t< float > *arg2 = 0 ;
  aiMatrix3x3t< ai_real > *arg3 = 0 ;
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(aiVector3t< float > **)&_swig_go_1; 
  arg3 = *(aiMatrix3x3t< ai_real > **)&_swig_go_2; 
  
  result = (aiMatrix3x3t< ai_real > *) &aiMatrix3x3t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR Rotation(arg1,(aiVector3t< float > const &)*arg2,*arg3);
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix3x3t< float > *_wrap_aiMatrix3x3_Translation_aig_324a1309ed911fbd(aiVector2t< float > *_swig_go_0, aiMatrix3x3t< float > *_swig_go_1) {
  aiVector2t< float > *arg1 = 0 ;
  aiMatrix3x3t< ai_real > *arg2 = 0 ;
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  arg1 = *(aiVector2t< float > **)&_swig_go_0; 
  arg2 = *(aiMatrix3x3t< ai_real > **)&_swig_go_1; 
  
  result = (aiMatrix3x3t< ai_real > *) &aiMatrix3x3t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR Translation((aiVector2t< float > const &)*arg1,*arg2);
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix3x3t< float > *_wrap_aiMatrix3x3_FromToMatrix_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1, aiMatrix3x3t< float > *_swig_go_2) {
  aiVector3t< float > *arg1 = 0 ;
  aiVector3t< float > *arg2 = 0 ;
  aiMatrix3x3t< ai_real > *arg3 = 0 ;
  aiMatrix3x3t< ai_real > *result = 0 ;
  aiMatrix3x3t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< float > **)&_swig_go_0; 
  arg2 = *(aiVector3t< float > **)&_swig_go_1; 
  arg3 = *(aiMatrix3x3t< ai_real > **)&_swig_go_2; 
  
  result = (aiMatrix3x3t< ai_real > *) &aiMatrix3x3t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR FromToMatrix((aiVector3t< float > const &)*arg1,(aiVector3t< float > const &)*arg2,*arg3);
  *(aiMatrix3x3t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_a1_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->a1 = arg2;
  
}


float _wrap_aiMatrix3x3_a1_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->a1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_a2_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->a2 = arg2;
  
}


float _wrap_aiMatrix3x3_a2_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->a2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_a3_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->a3 = arg2;
  
}


float _wrap_aiMatrix3x3_a3_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->a3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_b1_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->b1 = arg2;
  
}


float _wrap_aiMatrix3x3_b1_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->b1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_b2_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->b2 = arg2;
  
}


float _wrap_aiMatrix3x3_b2_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->b2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_b3_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->b3 = arg2;
  
}


float _wrap_aiMatrix3x3_b3_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->b3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_c1_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->c1 = arg2;
  
}


float _wrap_aiMatrix3x3_c1_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->c1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_c2_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->c2 = arg2;
  
}


float _wrap_aiMatrix3x3_c2_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->c2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix3x3_c3_set_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->c3 = arg2;
  
}


float _wrap_aiMatrix3x3_c3_get_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->c3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_aiMatrix3x3_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< ai_real > *arg1 = (aiMatrix3x3t< ai_real > *) 0 ;
  
  arg1 = *(aiMatrix3x3t< ai_real > **)&_swig_go_0; 
  
  delete arg1;
  
}


aiMatrix4x4t< float > *_wrap_new_aiMatrix4x4__SWIG_0_aig_324a1309ed911fbd() {
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  
  result = (aiMatrix4x4t< ai_real > *)new aiMatrix4x4t< ai_real >();
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = (aiMatrix4x4t< ai_real > *)result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_new_aiMatrix4x4__SWIG_1_aig_324a1309ed911fbd(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, float _swig_go_6, float _swig_go_7, float _swig_go_8, float _swig_go_9, float _swig_go_10, float _swig_go_11, float _swig_go_12, float _swig_go_13, float _swig_go_14, float _swig_go_15) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  arg5 = (float)_swig_go_4; 
  arg6 = (float)_swig_go_5; 
  arg7 = (float)_swig_go_6; 
  arg8 = (float)_swig_go_7; 
  arg9 = (float)_swig_go_8; 
  arg10 = (float)_swig_go_9; 
  arg11 = (float)_swig_go_10; 
  arg12 = (float)_swig_go_11; 
  arg13 = (float)_swig_go_12; 
  arg14 = (float)_swig_go_13; 
  arg15 = (float)_swig_go_14; 
  arg16 = (float)_swig_go_15; 
  
  result = (aiMatrix4x4t< ai_real > *)new aiMatrix4x4t< ai_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = (aiMatrix4x4t< ai_real > *)result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_new_aiMatrix4x4__SWIG_2_aig_324a1309ed911fbd(aiMatrix3x3t< float > *_swig_go_0) {
  aiMatrix3x3t< float > *arg1 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiMatrix3x3t< float > **)&_swig_go_0; 
  
  result = (aiMatrix4x4t< ai_real > *)new aiMatrix4x4t< ai_real >((aiMatrix3x3t< float > const &)*arg1);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = (aiMatrix4x4t< ai_real > *)result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_new_aiMatrix4x4__SWIG_3_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiQuaterniont< float > *_swig_go_1, aiVector3t< float > *_swig_go_2) {
  aiVector3t< float > *arg1 = 0 ;
  aiQuaterniont< float > *arg2 = 0 ;
  aiVector3t< float > *arg3 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< float > **)&_swig_go_0; 
  arg2 = *(aiQuaterniont< float > **)&_swig_go_1; 
  arg3 = *(aiVector3t< float > **)&_swig_go_2; 
  
  result = (aiMatrix4x4t< ai_real > *)new aiMatrix4x4t< ai_real >((aiVector3t< float > const &)*arg1,(aiQuaterniont< float > const &)*arg2,(aiVector3t< float > const &)*arg3);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = (aiMatrix4x4t< ai_real > *)result; 
  return _swig_go_result;
}


bool _wrap_aiMatrix4x4_Equal__SWIG_0_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1, float _swig_go_2) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiMatrix4x4t< ai_real > *arg2 = 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4t< ai_real > **)&_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  result = (bool)((aiMatrix4x4t< ai_real > const *)arg1)->Equal((aiMatrix4x4t< ai_real > const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMatrix4x4_Equal__SWIG_1_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiMatrix4x4t< ai_real > *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4t< ai_real > **)&_swig_go_1; 
  
  result = (bool)((aiMatrix4x4t< ai_real > const *)arg1)->Equal((aiMatrix4x4t< ai_real > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_Transpose_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (aiMatrix4x4t< ai_real > *) &(arg1)->Transpose();
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_Inverse_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (aiMatrix4x4t< ai_real > *) &(arg1)->Inverse();
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_aiMatrix4x4_Determinant_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float)((aiMatrix4x4t< ai_real > const *)arg1)->Determinant();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_aiMatrix4x4_IsIdentity_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (bool)((aiMatrix4x4t< ai_real > const *)arg1)->IsIdentity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_Decompose__SWIG_0_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1, aiQuaterniont< float > *_swig_go_2, aiVector3t< float > *_swig_go_3) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiVector3t< float > *arg2 = 0 ;
  aiQuaterniont< float > *arg3 = 0 ;
  aiVector3t< float > *arg4 = 0 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector3t< float > **)&_swig_go_1; 
  arg3 = *(aiQuaterniont< float > **)&_swig_go_2; 
  arg4 = *(aiVector3t< float > **)&_swig_go_3; 
  
  ((aiMatrix4x4t< ai_real > const *)arg1)->Decompose(*arg2,*arg3,*arg4);
  
}


void _wrap_aiMatrix4x4_Decompose__SWIG_1_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1, aiVector3t< float > *_swig_go_2, aiVector3t< float > *_swig_go_3) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiVector3t< float > *arg2 = 0 ;
  aiVector3t< float > *arg3 = 0 ;
  aiVector3t< float > *arg4 = 0 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector3t< float > **)&_swig_go_1; 
  arg3 = *(aiVector3t< float > **)&_swig_go_2; 
  arg4 = *(aiVector3t< float > **)&_swig_go_3; 
  
  ((aiMatrix4x4t< ai_real > const *)arg1)->Decompose(*arg2,*arg3,*arg4);
  
}


void _wrap_aiMatrix4x4_Decompose__SWIG_2_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1, aiVector3t< float > *_swig_go_2, float *_swig_go_3, aiVector3t< float > *_swig_go_4) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiVector3t< float > *arg2 = 0 ;
  aiVector3t< float > *arg3 = 0 ;
  float *arg4 = 0 ;
  aiVector3t< float > *arg5 = 0 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector3t< float > **)&_swig_go_1; 
  arg3 = *(aiVector3t< float > **)&_swig_go_2; 
  arg4 = *(float **)&_swig_go_3; 
  arg5 = *(aiVector3t< float > **)&_swig_go_4; 
  
  ((aiMatrix4x4t< ai_real > const *)arg1)->Decompose(*arg2,*arg3,*arg4,*arg5);
  
}


void _wrap_aiMatrix4x4_DecomposeNoScaling_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiQuaterniont< float > *_swig_go_1, aiVector3t< float > *_swig_go_2) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiQuaterniont< float > *arg2 = 0 ;
  aiVector3t< float > *arg3 = 0 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiQuaterniont< float > **)&_swig_go_1; 
  arg3 = *(aiVector3t< float > **)&_swig_go_2; 
  
  ((aiMatrix4x4t< ai_real > const *)arg1)->DecomposeNoScaling(*arg2,*arg3);
  
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_FromEulerAnglesXYZ__SWIG_0_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  
  result = (aiMatrix4x4t< ai_real > *) &(arg1)->FromEulerAnglesXYZ(arg2,arg3,arg4);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_FromEulerAnglesXYZ__SWIG_1_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  aiVector3t< float > *arg2 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = *(aiVector3t< float > **)&_swig_go_1; 
  
  result = (aiMatrix4x4t< ai_real > *) &(arg1)->FromEulerAnglesXYZ((aiVector3t< float > const &)*arg2);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_RotationX_aig_324a1309ed911fbd(float _swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  float arg1 ;
  aiMatrix4x4t< ai_real > *arg2 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(aiMatrix4x4t< ai_real > **)&_swig_go_1; 
  
  result = (aiMatrix4x4t< ai_real > *) &aiMatrix4x4t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR RotationX(arg1,*arg2);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_RotationY_aig_324a1309ed911fbd(float _swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  float arg1 ;
  aiMatrix4x4t< ai_real > *arg2 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(aiMatrix4x4t< ai_real > **)&_swig_go_1; 
  
  result = (aiMatrix4x4t< ai_real > *) &aiMatrix4x4t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR RotationY(arg1,*arg2);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_RotationZ_aig_324a1309ed911fbd(float _swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  float arg1 ;
  aiMatrix4x4t< ai_real > *arg2 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(aiMatrix4x4t< ai_real > **)&_swig_go_1; 
  
  result = (aiMatrix4x4t< ai_real > *) &aiMatrix4x4t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR RotationZ(arg1,*arg2);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_Rotation_aig_324a1309ed911fbd(float _swig_go_0, aiVector3t< float > *_swig_go_1, aiMatrix4x4t< float > *_swig_go_2) {
  float arg1 ;
  aiVector3t< float > *arg2 = 0 ;
  aiMatrix4x4t< ai_real > *arg3 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(aiVector3t< float > **)&_swig_go_1; 
  arg3 = *(aiMatrix4x4t< ai_real > **)&_swig_go_2; 
  
  result = (aiMatrix4x4t< ai_real > *) &aiMatrix4x4t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR Rotation(arg1,(aiVector3t< float > const &)*arg2,*arg3);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_Translation_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiVector3t< float > *arg1 = 0 ;
  aiMatrix4x4t< ai_real > *arg2 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< float > **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4t< ai_real > **)&_swig_go_1; 
  
  result = (aiMatrix4x4t< ai_real > *) &aiMatrix4x4t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR Translation((aiVector3t< float > const &)*arg1,*arg2);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_Scaling_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiMatrix4x4t< float > *_swig_go_1) {
  aiVector3t< float > *arg1 = 0 ;
  aiMatrix4x4t< ai_real > *arg2 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< float > **)&_swig_go_0; 
  arg2 = *(aiMatrix4x4t< ai_real > **)&_swig_go_1; 
  
  result = (aiMatrix4x4t< ai_real > *) &aiMatrix4x4t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR Scaling((aiVector3t< float > const &)*arg1,*arg2);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


aiMatrix4x4t< float > *_wrap_aiMatrix4x4_FromToMatrix_aig_324a1309ed911fbd(aiVector3t< float > *_swig_go_0, aiVector3t< float > *_swig_go_1, aiMatrix4x4t< float > *_swig_go_2) {
  aiVector3t< float > *arg1 = 0 ;
  aiVector3t< float > *arg2 = 0 ;
  aiMatrix4x4t< ai_real > *arg3 = 0 ;
  aiMatrix4x4t< ai_real > *result = 0 ;
  aiMatrix4x4t< float > *_swig_go_result;
  
  arg1 = *(aiVector3t< float > **)&_swig_go_0; 
  arg2 = *(aiVector3t< float > **)&_swig_go_1; 
  arg3 = *(aiMatrix4x4t< ai_real > **)&_swig_go_2; 
  
  result = (aiMatrix4x4t< ai_real > *) &aiMatrix4x4t< ai_real >::SWIGTEMPLATEDISAMBIGUATOR FromToMatrix((aiVector3t< float > const &)*arg1,(aiVector3t< float > const &)*arg2,*arg3);
  *(aiMatrix4x4t< ai_real > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_a1_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->a1 = arg2;
  
}


float _wrap_aiMatrix4x4_a1_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->a1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_a2_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->a2 = arg2;
  
}


float _wrap_aiMatrix4x4_a2_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->a2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_a3_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->a3 = arg2;
  
}


float _wrap_aiMatrix4x4_a3_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->a3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_a4_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->a4 = arg2;
  
}


float _wrap_aiMatrix4x4_a4_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->a4);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_b1_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->b1 = arg2;
  
}


float _wrap_aiMatrix4x4_b1_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->b1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_b2_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->b2 = arg2;
  
}


float _wrap_aiMatrix4x4_b2_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->b2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_b3_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->b3 = arg2;
  
}


float _wrap_aiMatrix4x4_b3_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->b3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_b4_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->b4 = arg2;
  
}


float _wrap_aiMatrix4x4_b4_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->b4);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_c1_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->c1 = arg2;
  
}


float _wrap_aiMatrix4x4_c1_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->c1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_c2_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->c2 = arg2;
  
}


float _wrap_aiMatrix4x4_c2_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->c2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_c3_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->c3 = arg2;
  
}


float _wrap_aiMatrix4x4_c3_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->c3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_c4_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->c4 = arg2;
  
}


float _wrap_aiMatrix4x4_c4_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->c4);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_d1_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->d1 = arg2;
  
}


float _wrap_aiMatrix4x4_d1_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->d1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_d2_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->d2 = arg2;
  
}


float _wrap_aiMatrix4x4_d2_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->d2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_d3_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->d3 = arg2;
  
}


float _wrap_aiMatrix4x4_d3_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->d3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_aiMatrix4x4_d4_set_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0, float _swig_go_1) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float arg2 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->d4 = arg2;
  
}


float _wrap_aiMatrix4x4_d4_get_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  result = (float) ((arg1)->d4);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_aiMatrix4x4_aig_324a1309ed911fbd(aiMatrix4x4t< float > *_swig_go_0) {
  aiMatrix4x4t< ai_real > *arg1 = (aiMatrix4x4t< ai_real > *) 0 ;
  
  arg1 = *(aiMatrix4x4t< ai_real > **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

